
Oct20_Amit_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000333c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  0000333c  000033d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080018a  0080018a  000034fa  2**0
                  ALLOC
  3 .stab         0000351c  00000000  00000000  000034fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ccc  00000000  00000000  00006a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000086e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000ae81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c207  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d3e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d896  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 07 	call	0xea6	; 0xea6 <main>
      8a:	0c 94 9c 19 	jmp	0x3338	; 0x3338 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e7       	ldi	r22, 0x71	; 113
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e7 58       	subi	r30, 0x87	; 135
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_13>:
#include "Uart.h"

u8 loc_uartReturn =0;

ISR(USART_RXC_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	loc_uartReturn= UART_UDR_REG;
     e58:	ec e2       	ldi	r30, 0x2C	; 44
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 93 8a 01 	sts	0x018A, r24
	if (loc_uartReturn == 'a')
     e62:	80 91 8a 01 	lds	r24, 0x018A
     e66:	81 36       	cpi	r24, 0x61	; 97
     e68:	21 f4       	brne	.+8      	; 0xe72 <__vector_13+0x44>
	{
		Led_vidledToggle(LED0);
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <Led_vidledToggle>
     e70:	07 c0       	rjmp	.+14     	; 0xe80 <__vector_13+0x52>
	}
	else if (loc_uartReturn == 'b')
     e72:	80 91 8a 01 	lds	r24, 0x018A
     e76:	82 36       	cpi	r24, 0x62	; 98
     e78:	19 f4       	brne	.+6      	; 0xe80 <__vector_13+0x52>
	{
		Led_vidledToggle(LED1);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <Led_vidledToggle>
	}
}
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	ff 91       	pop	r31
     e86:	ef 91       	pop	r30
     e88:	bf 91       	pop	r27
     e8a:	af 91       	pop	r26
     e8c:	9f 91       	pop	r25
     e8e:	8f 91       	pop	r24
     e90:	7f 91       	pop	r23
     e92:	6f 91       	pop	r22
     e94:	5f 91       	pop	r21
     e96:	4f 91       	pop	r20
     e98:	3f 91       	pop	r19
     e9a:	2f 91       	pop	r18
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <main>:

int main()
{
     ea6:	df 93       	push	r29
     ea8:	cf 93       	push	r28
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	2e 97       	sbiw	r28, 0x0e	; 14
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
	Led_vidledInit();
     eba:	0e 94 03 0a 	call	0x1406	; 0x1406 <Led_vidledInit>
	USART_Init(9600);
     ebe:	60 e8       	ldi	r22, 0x80	; 128
     ec0:	75 e2       	ldi	r23, 0x25	; 37
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 30 11 	call	0x2260	; 0x2260 <USART_Init>

	GINT_vidEnableAllInterrupts();
     eca:	0e 94 b0 12 	call	0x2560	; 0x2560 <GINT_vidEnableAllInterrupts>
	USART_ReceiveInterruptEnable();
     ece:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <USART_ReceiveInterruptEnable>

	USART_TransmitStr("Hello UART...");
     ed2:	80 e6       	ldi	r24, 0x60	; 96
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 c6 11 	call	0x238c	; 0x238c <USART_TransmitStr>
	while (1)
	{
		Led_vidledToggle(LED2);
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <Led_vidledToggle>
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	aa ef       	ldi	r26, 0xFA	; 250
     ee6:	b3 e4       	ldi	r27, 0x43	; 67
     ee8:	8b 87       	std	Y+11, r24	; 0x0b
     eea:	9c 87       	std	Y+12, r25	; 0x0c
     eec:	ad 87       	std	Y+13, r26	; 0x0d
     eee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	4a e7       	ldi	r20, 0x7A	; 122
     efe:	55 e4       	ldi	r21, 0x45	; 69
     f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	8f 83       	std	Y+7, r24	; 0x07
     f0a:	98 87       	std	Y+8, r25	; 0x08
     f0c:	a9 87       	std	Y+9, r26	; 0x09
     f0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f10:	6f 81       	ldd	r22, Y+7	; 0x07
     f12:	78 85       	ldd	r23, Y+8	; 0x08
     f14:	89 85       	ldd	r24, Y+9	; 0x09
     f16:	9a 85       	ldd	r25, Y+10	; 0x0a
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e8       	ldi	r20, 0x80	; 128
     f1e:	5f e3       	ldi	r21, 0x3F	; 63
     f20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f24:	88 23       	and	r24, r24
     f26:	2c f4       	brge	.+10     	; 0xf32 <main+0x8c>
		__ticks = 1;
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	8d 83       	std	Y+5, r24	; 0x05
     f30:	3f c0       	rjmp	.+126    	; 0xfb0 <main+0x10a>
	else if (__tmp > 65535)
     f32:	6f 81       	ldd	r22, Y+7	; 0x07
     f34:	78 85       	ldd	r23, Y+8	; 0x08
     f36:	89 85       	ldd	r24, Y+9	; 0x09
     f38:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	3f ef       	ldi	r19, 0xFF	; 255
     f3e:	4f e7       	ldi	r20, 0x7F	; 127
     f40:	57 e4       	ldi	r21, 0x47	; 71
     f42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f46:	18 16       	cp	r1, r24
     f48:	4c f5       	brge	.+82     	; 0xf9c <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f50:	9e 85       	ldd	r25, Y+14	; 0x0e
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e2       	ldi	r20, 0x20	; 32
     f58:	51 e4       	ldi	r21, 0x41	; 65
     f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	9e 83       	std	Y+6, r25	; 0x06
     f70:	8d 83       	std	Y+5, r24	; 0x05
     f72:	0f c0       	rjmp	.+30     	; 0xf92 <main+0xec>
     f74:	80 e9       	ldi	r24, 0x90	; 144
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	9c 83       	std	Y+4, r25	; 0x04
     f7a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	9c 81       	ldd	r25, Y+4	; 0x04
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <main+0xda>
     f84:	9c 83       	std	Y+4, r25	; 0x04
     f86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	9e 81       	ldd	r25, Y+6	; 0x06
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	9e 83       	std	Y+6, r25	; 0x06
     f90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f92:	8d 81       	ldd	r24, Y+5	; 0x05
     f94:	9e 81       	ldd	r25, Y+6	; 0x06
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	69 f7       	brne	.-38     	; 0xf74 <main+0xce>
     f9a:	9f cf       	rjmp	.-194    	; 0xeda <main+0x34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9c:	6f 81       	ldd	r22, Y+7	; 0x07
     f9e:	78 85       	ldd	r23, Y+8	; 0x08
     fa0:	89 85       	ldd	r24, Y+9	; 0x09
     fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	9e 83       	std	Y+6, r25	; 0x06
     fae:	8d 83       	std	Y+5, r24	; 0x05
     fb0:	8d 81       	ldd	r24, Y+5	; 0x05
     fb2:	9e 81       	ldd	r25, Y+6	; 0x06
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <main+0x116>
     fc0:	9a 83       	std	Y+2, r25	; 0x02
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	8a cf       	rjmp	.-236    	; 0xeda <main+0x34>

00000fc6 <SSD_vidinit>:
#include "SSD.h"
#include "Dio.h"
#include <util/delay.h>

void SSD_vidinit(void)
{
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	41 e0       	ldi	r20, 0x01	; 1
     fd4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	62 e0       	ldi	r22, 0x02	; 2
     fdc:	41 e0       	ldi	r20, 0x01	; 1
     fde:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>

	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	64 e0       	ldi	r22, 0x04	; 4
     fe6:	41 e0       	ldi	r20, 0x01	; 1
     fe8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	65 e0       	ldi	r22, 0x05	; 5
     ff0:	41 e0       	ldi	r20, 0x01	; 1
     ff2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	66 e0       	ldi	r22, 0x06	; 6
     ffa:	41 e0       	ldi	r20, 0x01	; 1
     ffc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	67 e0       	ldi	r22, 0x07	; 7
    1004:	41 e0       	ldi	r20, 0x01	; 1
    1006:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
}
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <SSD_viddisplyNum>:

void SSD_viddisplyNum(u8 num)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	e3 97       	sbiw	r28, 0x33	; 51
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	8b ab       	std	Y+51, r24	; 0x33
	u8 loc_secondDigit =  (num%10)<<4;
    1026:	8b a9       	ldd	r24, Y+51	; 0x33
    1028:	9a e0       	ldi	r25, 0x0A	; 10
    102a:	69 2f       	mov	r22, r25
    102c:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__udivmodqi4>
    1030:	89 2f       	mov	r24, r25
    1032:	82 95       	swap	r24
    1034:	80 7f       	andi	r24, 0xF0	; 240
    1036:	8a ab       	std	Y+50, r24	; 0x32
	u8 loc_firstDigit = (num/10)<<4;
    1038:	8b a9       	ldd	r24, Y+51	; 0x33
    103a:	9a e0       	ldi	r25, 0x0A	; 10
    103c:	69 2f       	mov	r22, r25
    103e:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__udivmodqi4>
    1042:	82 95       	swap	r24
    1044:	80 7f       	andi	r24, 0xF0	; 240
    1046:	89 ab       	std	Y+49, r24	; 0x31

	/* Enable SSD 1	-> EN1 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_HIGH);
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	62 e0       	ldi	r22, 0x02	; 2
    104c:	41 e0       	ldi	r20, 0x01	; 1
    104e:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
	/* Disable SSD 2 -> EN2 =Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
	/* Write first digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_firstDigit, SSD_MASK);
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	69 a9       	ldd	r22, Y+49	; 0x31
    1060:	4f e0       	ldi	r20, 0x0F	; 15
    1062:	0e 94 9e 14 	call	0x293c	; 0x293c <Dio_vidWriteChanelGroup>
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	a8 ec       	ldi	r26, 0xC8	; 200
    106c:	b2 e4       	ldi	r27, 0x42	; 66
    106e:	8d a7       	std	Y+45, r24	; 0x2d
    1070:	9e a7       	std	Y+46, r25	; 0x2e
    1072:	af a7       	std	Y+47, r26	; 0x2f
    1074:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1076:	6d a5       	ldd	r22, Y+45	; 0x2d
    1078:	7e a5       	ldd	r23, Y+46	; 0x2e
    107a:	8f a5       	ldd	r24, Y+47	; 0x2f
    107c:	98 a9       	ldd	r25, Y+48	; 0x30
    107e:	2b ea       	ldi	r18, 0xAB	; 171
    1080:	3a ea       	ldi	r19, 0xAA	; 170
    1082:	4a ea       	ldi	r20, 0xAA	; 170
    1084:	50 e4       	ldi	r21, 0x40	; 64
    1086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	89 a7       	std	Y+41, r24	; 0x29
    1090:	9a a7       	std	Y+42, r25	; 0x2a
    1092:	ab a7       	std	Y+43, r26	; 0x2b
    1094:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1096:	69 a5       	ldd	r22, Y+41	; 0x29
    1098:	7a a5       	ldd	r23, Y+42	; 0x2a
    109a:	8b a5       	ldd	r24, Y+43	; 0x2b
    109c:	9c a5       	ldd	r25, Y+44	; 0x2c
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e8       	ldi	r20, 0x80	; 128
    10a4:	5f e3       	ldi	r21, 0x3F	; 63
    10a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10aa:	88 23       	and	r24, r24
    10ac:	1c f4       	brge	.+6      	; 0x10b4 <SSD_viddisplyNum+0xa4>
		__ticks = 1;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	88 a7       	std	Y+40, r24	; 0x28
    10b2:	91 c0       	rjmp	.+290    	; 0x11d6 <SSD_viddisplyNum+0x1c6>
	else if (__tmp > 255)
    10b4:	69 a5       	ldd	r22, Y+41	; 0x29
    10b6:	7a a5       	ldd	r23, Y+42	; 0x2a
    10b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    10ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	4f e7       	ldi	r20, 0x7F	; 127
    10c2:	53 e4       	ldi	r21, 0x43	; 67
    10c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10c8:	18 16       	cp	r1, r24
    10ca:	0c f0       	brlt	.+2      	; 0x10ce <SSD_viddisplyNum+0xbe>
    10cc:	7b c0       	rjmp	.+246    	; 0x11c4 <SSD_viddisplyNum+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    10ce:	6d a5       	ldd	r22, Y+45	; 0x2d
    10d0:	7e a5       	ldd	r23, Y+46	; 0x2e
    10d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    10d4:	98 a9       	ldd	r25, Y+48	; 0x30
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	4a e7       	ldi	r20, 0x7A	; 122
    10dc:	54 e4       	ldi	r21, 0x44	; 68
    10de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	8c a3       	std	Y+36, r24	; 0x24
    10e8:	9d a3       	std	Y+37, r25	; 0x25
    10ea:	ae a3       	std	Y+38, r26	; 0x26
    10ec:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ee:	6c a1       	ldd	r22, Y+36	; 0x24
    10f0:	7d a1       	ldd	r23, Y+37	; 0x25
    10f2:	8e a1       	ldd	r24, Y+38	; 0x26
    10f4:	9f a1       	ldd	r25, Y+39	; 0x27
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	4a e7       	ldi	r20, 0x7A	; 122
    10fc:	55 e4       	ldi	r21, 0x45	; 69
    10fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	88 a3       	std	Y+32, r24	; 0x20
    1108:	99 a3       	std	Y+33, r25	; 0x21
    110a:	aa a3       	std	Y+34, r26	; 0x22
    110c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    110e:	68 a1       	ldd	r22, Y+32	; 0x20
    1110:	79 a1       	ldd	r23, Y+33	; 0x21
    1112:	8a a1       	ldd	r24, Y+34	; 0x22
    1114:	9b a1       	ldd	r25, Y+35	; 0x23
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e8       	ldi	r20, 0x80	; 128
    111c:	5f e3       	ldi	r21, 0x3F	; 63
    111e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1122:	88 23       	and	r24, r24
    1124:	2c f4       	brge	.+10     	; 0x1130 <SSD_viddisplyNum+0x120>
		__ticks = 1;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9f 8f       	std	Y+31, r25	; 0x1f
    112c:	8e 8f       	std	Y+30, r24	; 0x1e
    112e:	3f c0       	rjmp	.+126    	; 0x11ae <SSD_viddisplyNum+0x19e>
	else if (__tmp > 65535)
    1130:	68 a1       	ldd	r22, Y+32	; 0x20
    1132:	79 a1       	ldd	r23, Y+33	; 0x21
    1134:	8a a1       	ldd	r24, Y+34	; 0x22
    1136:	9b a1       	ldd	r25, Y+35	; 0x23
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	3f ef       	ldi	r19, 0xFF	; 255
    113c:	4f e7       	ldi	r20, 0x7F	; 127
    113e:	57 e4       	ldi	r21, 0x47	; 71
    1140:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1144:	18 16       	cp	r1, r24
    1146:	4c f5       	brge	.+82     	; 0x119a <SSD_viddisplyNum+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1148:	6c a1       	ldd	r22, Y+36	; 0x24
    114a:	7d a1       	ldd	r23, Y+37	; 0x25
    114c:	8e a1       	ldd	r24, Y+38	; 0x26
    114e:	9f a1       	ldd	r25, Y+39	; 0x27
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e2       	ldi	r20, 0x20	; 32
    1156:	51 e4       	ldi	r21, 0x41	; 65
    1158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115c:	dc 01       	movw	r26, r24
    115e:	cb 01       	movw	r24, r22
    1160:	bc 01       	movw	r22, r24
    1162:	cd 01       	movw	r24, r26
    1164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	9f 8f       	std	Y+31, r25	; 0x1f
    116e:	8e 8f       	std	Y+30, r24	; 0x1e
    1170:	0f c0       	rjmp	.+30     	; 0x1190 <SSD_viddisplyNum+0x180>
    1172:	80 e9       	ldi	r24, 0x90	; 144
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	9d 8f       	std	Y+29, r25	; 0x1d
    1178:	8c 8f       	std	Y+28, r24	; 0x1c
    117a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    117c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <SSD_viddisplyNum+0x16e>
    1182:	9d 8f       	std	Y+29, r25	; 0x1d
    1184:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1186:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1188:	9f 8d       	ldd	r25, Y+31	; 0x1f
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	9f 8f       	std	Y+31, r25	; 0x1f
    118e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1190:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1192:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	69 f7       	brne	.-38     	; 0x1172 <SSD_viddisplyNum+0x162>
    1198:	24 c0       	rjmp	.+72     	; 0x11e2 <SSD_viddisplyNum+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119a:	68 a1       	ldd	r22, Y+32	; 0x20
    119c:	79 a1       	ldd	r23, Y+33	; 0x21
    119e:	8a a1       	ldd	r24, Y+34	; 0x22
    11a0:	9b a1       	ldd	r25, Y+35	; 0x23
    11a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9f 8f       	std	Y+31, r25	; 0x1f
    11ac:	8e 8f       	std	Y+30, r24	; 0x1e
    11ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11b2:	9b 8f       	std	Y+27, r25	; 0x1b
    11b4:	8a 8f       	std	Y+26, r24	; 0x1a
    11b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    11b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <SSD_viddisplyNum+0x1aa>
    11be:	9b 8f       	std	Y+27, r25	; 0x1b
    11c0:	8a 8f       	std	Y+26, r24	; 0x1a
    11c2:	0f c0       	rjmp	.+30     	; 0x11e2 <SSD_viddisplyNum+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11c4:	69 a5       	ldd	r22, Y+41	; 0x29
    11c6:	7a a5       	ldd	r23, Y+42	; 0x2a
    11c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    11cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	88 a7       	std	Y+40, r24	; 0x28
    11d6:	88 a5       	ldd	r24, Y+40	; 0x28
    11d8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11da:	89 8d       	ldd	r24, Y+25	; 0x19
    11dc:	8a 95       	dec	r24
    11de:	f1 f7       	brne	.-4      	; 0x11dc <SSD_viddisplyNum+0x1cc>
    11e0:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(100);

	/* Disable SSD 1	-> EN1 = Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	62 e0       	ldi	r22, 0x02	; 2
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
	/* Enable SSD 2 -> EN2 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	41 e0       	ldi	r20, 0x01	; 1
    11f2:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
	/* Write second digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_secondDigit, SSD_MASK);
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	6a a9       	ldd	r22, Y+50	; 0x32
    11fa:	4f e0       	ldi	r20, 0x0F	; 15
    11fc:	0e 94 9e 14 	call	0x293c	; 0x293c <Dio_vidWriteChanelGroup>
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a8 ec       	ldi	r26, 0xC8	; 200
    1206:	b2 e4       	ldi	r27, 0x42	; 66
    1208:	8d 8b       	std	Y+21, r24	; 0x15
    120a:	9e 8b       	std	Y+22, r25	; 0x16
    120c:	af 8b       	std	Y+23, r26	; 0x17
    120e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1210:	6d 89       	ldd	r22, Y+21	; 0x15
    1212:	7e 89       	ldd	r23, Y+22	; 0x16
    1214:	8f 89       	ldd	r24, Y+23	; 0x17
    1216:	98 8d       	ldd	r25, Y+24	; 0x18
    1218:	2b ea       	ldi	r18, 0xAB	; 171
    121a:	3a ea       	ldi	r19, 0xAA	; 170
    121c:	4a ea       	ldi	r20, 0xAA	; 170
    121e:	50 e4       	ldi	r21, 0x40	; 64
    1220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	89 8b       	std	Y+17, r24	; 0x11
    122a:	9a 8b       	std	Y+18, r25	; 0x12
    122c:	ab 8b       	std	Y+19, r26	; 0x13
    122e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1230:	69 89       	ldd	r22, Y+17	; 0x11
    1232:	7a 89       	ldd	r23, Y+18	; 0x12
    1234:	8b 89       	ldd	r24, Y+19	; 0x13
    1236:	9c 89       	ldd	r25, Y+20	; 0x14
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e8       	ldi	r20, 0x80	; 128
    123e:	5f e3       	ldi	r21, 0x3F	; 63
    1240:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1244:	88 23       	and	r24, r24
    1246:	1c f4       	brge	.+6      	; 0x124e <SSD_viddisplyNum+0x23e>
		__ticks = 1;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	88 8b       	std	Y+16, r24	; 0x10
    124c:	91 c0       	rjmp	.+290    	; 0x1370 <SSD_viddisplyNum+0x360>
	else if (__tmp > 255)
    124e:	69 89       	ldd	r22, Y+17	; 0x11
    1250:	7a 89       	ldd	r23, Y+18	; 0x12
    1252:	8b 89       	ldd	r24, Y+19	; 0x13
    1254:	9c 89       	ldd	r25, Y+20	; 0x14
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	53 e4       	ldi	r21, 0x43	; 67
    125e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1262:	18 16       	cp	r1, r24
    1264:	0c f0       	brlt	.+2      	; 0x1268 <SSD_viddisplyNum+0x258>
    1266:	7b c0       	rjmp	.+246    	; 0x135e <SSD_viddisplyNum+0x34e>
	{
		_delay_ms(__us / 1000.0);
    1268:	6d 89       	ldd	r22, Y+21	; 0x15
    126a:	7e 89       	ldd	r23, Y+22	; 0x16
    126c:	8f 89       	ldd	r24, Y+23	; 0x17
    126e:	98 8d       	ldd	r25, Y+24	; 0x18
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	4a e7       	ldi	r20, 0x7A	; 122
    1276:	54 e4       	ldi	r21, 0x44	; 68
    1278:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	8c 87       	std	Y+12, r24	; 0x0c
    1282:	9d 87       	std	Y+13, r25	; 0x0d
    1284:	ae 87       	std	Y+14, r26	; 0x0e
    1286:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1288:	6c 85       	ldd	r22, Y+12	; 0x0c
    128a:	7d 85       	ldd	r23, Y+13	; 0x0d
    128c:	8e 85       	ldd	r24, Y+14	; 0x0e
    128e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	4a e7       	ldi	r20, 0x7A	; 122
    1296:	55 e4       	ldi	r21, 0x45	; 69
    1298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	88 87       	std	Y+8, r24	; 0x08
    12a2:	99 87       	std	Y+9, r25	; 0x09
    12a4:	aa 87       	std	Y+10, r26	; 0x0a
    12a6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    12a8:	68 85       	ldd	r22, Y+8	; 0x08
    12aa:	79 85       	ldd	r23, Y+9	; 0x09
    12ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e8       	ldi	r20, 0x80	; 128
    12b6:	5f e3       	ldi	r21, 0x3F	; 63
    12b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12bc:	88 23       	and	r24, r24
    12be:	2c f4       	brge	.+10     	; 0x12ca <SSD_viddisplyNum+0x2ba>
		__ticks = 1;
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	9f 83       	std	Y+7, r25	; 0x07
    12c6:	8e 83       	std	Y+6, r24	; 0x06
    12c8:	3f c0       	rjmp	.+126    	; 0x1348 <SSD_viddisplyNum+0x338>
	else if (__tmp > 65535)
    12ca:	68 85       	ldd	r22, Y+8	; 0x08
    12cc:	79 85       	ldd	r23, Y+9	; 0x09
    12ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	3f ef       	ldi	r19, 0xFF	; 255
    12d6:	4f e7       	ldi	r20, 0x7F	; 127
    12d8:	57 e4       	ldi	r21, 0x47	; 71
    12da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12de:	18 16       	cp	r1, r24
    12e0:	4c f5       	brge	.+82     	; 0x1334 <SSD_viddisplyNum+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    12e4:	7d 85       	ldd	r23, Y+13	; 0x0d
    12e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    12e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e2       	ldi	r20, 0x20	; 32
    12f0:	51 e4       	ldi	r21, 0x41	; 65
    12f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	9f 83       	std	Y+7, r25	; 0x07
    1308:	8e 83       	std	Y+6, r24	; 0x06
    130a:	0f c0       	rjmp	.+30     	; 0x132a <SSD_viddisplyNum+0x31a>
    130c:	80 e9       	ldi	r24, 0x90	; 144
    130e:	91 e0       	ldi	r25, 0x01	; 1
    1310:	9d 83       	std	Y+5, r25	; 0x05
    1312:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	9d 81       	ldd	r25, Y+5	; 0x05
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <SSD_viddisplyNum+0x308>
    131c:	9d 83       	std	Y+5, r25	; 0x05
    131e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1320:	8e 81       	ldd	r24, Y+6	; 0x06
    1322:	9f 81       	ldd	r25, Y+7	; 0x07
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	9f 83       	std	Y+7, r25	; 0x07
    1328:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132a:	8e 81       	ldd	r24, Y+6	; 0x06
    132c:	9f 81       	ldd	r25, Y+7	; 0x07
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	69 f7       	brne	.-38     	; 0x130c <SSD_viddisplyNum+0x2fc>
    1332:	24 c0       	rjmp	.+72     	; 0x137c <SSD_viddisplyNum+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1334:	68 85       	ldd	r22, Y+8	; 0x08
    1336:	79 85       	ldd	r23, Y+9	; 0x09
    1338:	8a 85       	ldd	r24, Y+10	; 0x0a
    133a:	9b 85       	ldd	r25, Y+11	; 0x0b
    133c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	9f 83       	std	Y+7, r25	; 0x07
    1346:	8e 83       	std	Y+6, r24	; 0x06
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	9b 83       	std	Y+3, r25	; 0x03
    134e:	8a 83       	std	Y+2, r24	; 0x02
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	9b 81       	ldd	r25, Y+3	; 0x03
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <SSD_viddisplyNum+0x344>
    1358:	9b 83       	std	Y+3, r25	; 0x03
    135a:	8a 83       	std	Y+2, r24	; 0x02
    135c:	0f c0       	rjmp	.+30     	; 0x137c <SSD_viddisplyNum+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    135e:	69 89       	ldd	r22, Y+17	; 0x11
    1360:	7a 89       	ldd	r23, Y+18	; 0x12
    1362:	8b 89       	ldd	r24, Y+19	; 0x13
    1364:	9c 89       	ldd	r25, Y+20	; 0x14
    1366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	88 8b       	std	Y+16, r24	; 0x10
    1370:	88 89       	ldd	r24, Y+16	; 0x10
    1372:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	8a 95       	dec	r24
    1378:	f1 f7       	brne	.-4      	; 0x1376 <SSD_viddisplyNum+0x366>
    137a:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(100);
}
    137c:	e3 96       	adiw	r28, 0x33	; 51
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <SSD_vidDelayWithDisply_ms>:

void SSD_vidDelayWithDisply_ms(u8 num,u32 delay)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	29 97       	sbiw	r28, 0x09	; 9
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	8d 83       	std	Y+5, r24	; 0x05
    13a4:	4e 83       	std	Y+6, r20	; 0x06
    13a6:	5f 83       	std	Y+7, r21	; 0x07
    13a8:	68 87       	std	Y+8, r22	; 0x08
    13aa:	79 87       	std	Y+9, r23	; 0x09
	u32 cnt=0;
    13ac:	19 82       	std	Y+1, r1	; 0x01
    13ae:	1a 82       	std	Y+2, r1	; 0x02
    13b0:	1b 82       	std	Y+3, r1	; 0x03
    13b2:	1c 82       	std	Y+4, r1	; 0x04
	for (cnt=0; cnt<delay; cnt++)
    13b4:	19 82       	std	Y+1, r1	; 0x01
    13b6:	1a 82       	std	Y+2, r1	; 0x02
    13b8:	1b 82       	std	Y+3, r1	; 0x03
    13ba:	1c 82       	std	Y+4, r1	; 0x04
    13bc:	0e c0       	rjmp	.+28     	; 0x13da <SSD_vidDelayWithDisply_ms+0x4c>
		 {
			 SSD_viddisplyNum(num);
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	0e 94 08 08 	call	0x1010	; 0x1010 <SSD_viddisplyNum>
}

void SSD_vidDelayWithDisply_ms(u8 num,u32 delay)
{
	u32 cnt=0;
	for (cnt=0; cnt<delay; cnt++)
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	ab 81       	ldd	r26, Y+3	; 0x03
    13ca:	bc 81       	ldd	r27, Y+4	; 0x04
    13cc:	01 96       	adiw	r24, 0x01	; 1
    13ce:	a1 1d       	adc	r26, r1
    13d0:	b1 1d       	adc	r27, r1
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	ab 83       	std	Y+3, r26	; 0x03
    13d8:	bc 83       	std	Y+4, r27	; 0x04
    13da:	29 81       	ldd	r18, Y+1	; 0x01
    13dc:	3a 81       	ldd	r19, Y+2	; 0x02
    13de:	4b 81       	ldd	r20, Y+3	; 0x03
    13e0:	5c 81       	ldd	r21, Y+4	; 0x04
    13e2:	8e 81       	ldd	r24, Y+6	; 0x06
    13e4:	9f 81       	ldd	r25, Y+7	; 0x07
    13e6:	a8 85       	ldd	r26, Y+8	; 0x08
    13e8:	b9 85       	ldd	r27, Y+9	; 0x09
    13ea:	28 17       	cp	r18, r24
    13ec:	39 07       	cpc	r19, r25
    13ee:	4a 07       	cpc	r20, r26
    13f0:	5b 07       	cpc	r21, r27
    13f2:	28 f3       	brcs	.-54     	; 0x13be <SSD_vidDelayWithDisply_ms+0x30>
		 {
			 SSD_viddisplyNum(num);
		 }
}
    13f4:	29 96       	adiw	r28, 0x09	; 9
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <Led_vidledInit>:
#include "Led.h"
#include "Dio.h"


void Led_vidledInit(void)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_OUTPUT);
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	62 e0       	ldi	r22, 0x02	; 2
    1412:	41 e0       	ldi	r20, 0x01	; 1
    1414:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
    1418:	82 e0       	ldi	r24, 0x02	; 2
    141a:	67 e0       	ldi	r22, 0x07	; 7
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN3, DIO_OUTPUT);
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	63 e0       	ldi	r22, 0x03	; 3
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
}
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <Led_vidledOn>:

void Led_vidledOn(led_ledId_t led)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <Led_vidledOn+0x6>
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3b 83       	std	Y+3, r19	; 0x03
    1448:	2a 83       	std	Y+2, r18	; 0x02
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	9b 81       	ldd	r25, Y+3	; 0x03
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	91 05       	cpc	r25, r1
    1452:	79 f0       	breq	.+30     	; 0x1472 <Led_vidledOn+0x40>
    1454:	2a 81       	ldd	r18, Y+2	; 0x02
    1456:	3b 81       	ldd	r19, Y+3	; 0x03
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	81 f0       	breq	.+32     	; 0x147e <Led_vidledOn+0x4c>
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	9b 81       	ldd	r25, Y+3	; 0x03
    1462:	00 97       	sbiw	r24, 0x00	; 0
    1464:	89 f4       	brne	.+34     	; 0x1488 <Led_vidledOn+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	62 e0       	ldi	r22, 0x02	; 2
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
    1470:	0b c0       	rjmp	.+22     	; 0x1488 <Led_vidledOn+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	67 e0       	ldi	r22, 0x07	; 7
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
    147c:	05 c0       	rjmp	.+10     	; 0x1488 <Led_vidledOn+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	63 e0       	ldi	r22, 0x03	; 3
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
		break;
	}
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <Led_vidledOff>:

void Led_vidledOff(led_ledId_t led)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <Led_vidledOff+0x6>
    149a:	0f 92       	push	r0
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	3b 83       	std	Y+3, r19	; 0x03
    14aa:	2a 83       	std	Y+2, r18	; 0x02
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	9b 81       	ldd	r25, Y+3	; 0x03
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	91 05       	cpc	r25, r1
    14b4:	79 f0       	breq	.+30     	; 0x14d4 <Led_vidledOff+0x40>
    14b6:	2a 81       	ldd	r18, Y+2	; 0x02
    14b8:	3b 81       	ldd	r19, Y+3	; 0x03
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	81 f0       	breq	.+32     	; 0x14e0 <Led_vidledOff+0x4c>
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	9b 81       	ldd	r25, Y+3	; 0x03
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	89 f4       	brne	.+34     	; 0x14ea <Led_vidledOff+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    14c8:	82 e0       	ldi	r24, 0x02	; 2
    14ca:	62 e0       	ldi	r22, 0x02	; 2
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
    14d2:	0b c0       	rjmp	.+22     	; 0x14ea <Led_vidledOff+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	67 e0       	ldi	r22, 0x07	; 7
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
    14de:	05 c0       	rjmp	.+10     	; 0x14ea <Led_vidledOff+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	63 e0       	ldi	r22, 0x03	; 3
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
		break;
	}
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <Led_vidledToggle>:

void Led_vidledToggle(led_ledId_t ledId)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <Led_vidledToggle+0x6>
    14fc:	0f 92       	push	r0
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	3b 83       	std	Y+3, r19	; 0x03
    150c:	2a 83       	std	Y+2, r18	; 0x02
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	9b 81       	ldd	r25, Y+3	; 0x03
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	91 05       	cpc	r25, r1
    1516:	71 f0       	breq	.+28     	; 0x1534 <Led_vidledToggle+0x3e>
    1518:	2a 81       	ldd	r18, Y+2	; 0x02
    151a:	3b 81       	ldd	r19, Y+3	; 0x03
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	71 f0       	breq	.+28     	; 0x153e <Led_vidledToggle+0x48>
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	9b 81       	ldd	r25, Y+3	; 0x03
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	71 f4       	brne	.+28     	; 0x1546 <Led_vidledToggle+0x50>
	{
	case LED0:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN2);
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <Dio_vidflipChanel>
    1532:	09 c0       	rjmp	.+18     	; 0x1546 <Led_vidledToggle+0x50>
		break;

	case LED1:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN7);
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	67 e0       	ldi	r22, 0x07	; 7
    1538:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <Dio_vidflipChanel>
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <Led_vidledToggle+0x50>
		break;

	case LED2:
		Dio_vidflipChanel(DIO_PORTD, DIO_PIN3);
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	63 e0       	ldi	r22, 0x03	; 3
    1542:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <Dio_vidflipChanel>
		break;
	}
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <Lm35_vidInit>:

#include "Std_Types.h"
#include "Adc.h"

void Lm35_vidInit(void)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
	Adc_vidInit();
    155a:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <Adc_vidInit>
}
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <Lm35_u8TempRead>:
u16 Lm35_u8TempRead(void)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <Lm35_u8TempRead+0x6>
    156a:	00 d0       	rcall	.+0      	; 0x156c <Lm35_u8TempRead+0x8>
    156c:	00 d0       	rcall	.+0      	; 0x156e <Lm35_u8TempRead+0xa>
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
	f64 loc_adcRead = 0;
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a0 e0       	ldi	r26, 0x00	; 0
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	8b 83       	std	Y+3, r24	; 0x03
    157c:	9c 83       	std	Y+4, r25	; 0x04
    157e:	ad 83       	std	Y+5, r26	; 0x05
    1580:	be 83       	std	Y+6, r27	; 0x06
	u16 loc_temp = 0;
    1582:	1a 82       	std	Y+2, r1	; 0x02
    1584:	19 82       	std	Y+1, r1	; 0x01

	loc_adcRead = Adc_u16AdcRead(ADC_CHANNEL1);
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <Adc_u16AdcRead>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	8b 83       	std	Y+3, r24	; 0x03
    1592:	9c 83       	std	Y+4, r25	; 0x04
    1594:	ad 83       	std	Y+5, r26	; 0x05
    1596:	be 83       	std	Y+6, r27	; 0x06
	loc_temp = loc_adcRead/10;
    1598:	6b 81       	ldd	r22, Y+3	; 0x03
    159a:	7c 81       	ldd	r23, Y+4	; 0x04
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e2       	ldi	r20, 0x20	; 32
    15a6:	51 e4       	ldi	r21, 0x41	; 65
    15a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	89 83       	std	Y+1, r24	; 0x01

	return loc_temp;
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    15c4:	26 96       	adiw	r28, 0x06	; 6
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <Lcd_vidinit>:
#include "util/delay.h"
#include <stdio.h>


void Lcd_vidinit(void)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	e4 97       	sbiw	r28, 0x34	; 52
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
	/*	configure control pins as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	61 e0       	ldi	r22, 0x01	; 1
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	62 e0       	ldi	r22, 0x02	; 2
    15f8:	41 e0       	ldi	r20, 0x01	; 1
    15fa:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	63 e0       	ldi	r22, 0x03	; 3
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>

	/*	configure data pins as output	*/
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	64 e0       	ldi	r22, 0x04	; 4
    160c:	41 e0       	ldi	r20, 0x01	; 1
    160e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	65 e0       	ldi	r22, 0x05	; 5
    1616:	41 e0       	ldi	r20, 0x01	; 1
    1618:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	66 e0       	ldi	r22, 0x06	; 6
    1620:	41 e0       	ldi	r20, 0x01	; 1
    1622:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	67 e0       	ldi	r22, 0x07	; 7
    162a:	41 e0       	ldi	r20, 0x01	; 1
    162c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>

	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	62 e0       	ldi	r22, 0x02	; 2
    1634:	40 e0       	ldi	r20, 0x00	; 0
    1636:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a0 e7       	ldi	r26, 0x70	; 112
    1640:	b1 e4       	ldi	r27, 0x41	; 65
    1642:	89 ab       	std	Y+49, r24	; 0x31
    1644:	9a ab       	std	Y+50, r25	; 0x32
    1646:	ab ab       	std	Y+51, r26	; 0x33
    1648:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164a:	69 a9       	ldd	r22, Y+49	; 0x31
    164c:	7a a9       	ldd	r23, Y+50	; 0x32
    164e:	8b a9       	ldd	r24, Y+51	; 0x33
    1650:	9c a9       	ldd	r25, Y+52	; 0x34
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	4a e7       	ldi	r20, 0x7A	; 122
    1658:	55 e4       	ldi	r21, 0x45	; 69
    165a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	8d a7       	std	Y+45, r24	; 0x2d
    1664:	9e a7       	std	Y+46, r25	; 0x2e
    1666:	af a7       	std	Y+47, r26	; 0x2f
    1668:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    166a:	6d a5       	ldd	r22, Y+45	; 0x2d
    166c:	7e a5       	ldd	r23, Y+46	; 0x2e
    166e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1670:	98 a9       	ldd	r25, Y+48	; 0x30
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e8       	ldi	r20, 0x80	; 128
    1678:	5f e3       	ldi	r21, 0x3F	; 63
    167a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    167e:	88 23       	and	r24, r24
    1680:	2c f4       	brge	.+10     	; 0x168c <Lcd_vidinit+0xb6>
		__ticks = 1;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9c a7       	std	Y+44, r25	; 0x2c
    1688:	8b a7       	std	Y+43, r24	; 0x2b
    168a:	3f c0       	rjmp	.+126    	; 0x170a <Lcd_vidinit+0x134>
	else if (__tmp > 65535)
    168c:	6d a5       	ldd	r22, Y+45	; 0x2d
    168e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1690:	8f a5       	ldd	r24, Y+47	; 0x2f
    1692:	98 a9       	ldd	r25, Y+48	; 0x30
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	3f ef       	ldi	r19, 0xFF	; 255
    1698:	4f e7       	ldi	r20, 0x7F	; 127
    169a:	57 e4       	ldi	r21, 0x47	; 71
    169c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16a0:	18 16       	cp	r1, r24
    16a2:	4c f5       	brge	.+82     	; 0x16f6 <Lcd_vidinit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a4:	69 a9       	ldd	r22, Y+49	; 0x31
    16a6:	7a a9       	ldd	r23, Y+50	; 0x32
    16a8:	8b a9       	ldd	r24, Y+51	; 0x33
    16aa:	9c a9       	ldd	r25, Y+52	; 0x34
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e2       	ldi	r20, 0x20	; 32
    16b2:	51 e4       	ldi	r21, 0x41	; 65
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	bc 01       	movw	r22, r24
    16be:	cd 01       	movw	r24, r26
    16c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	9c a7       	std	Y+44, r25	; 0x2c
    16ca:	8b a7       	std	Y+43, r24	; 0x2b
    16cc:	0f c0       	rjmp	.+30     	; 0x16ec <Lcd_vidinit+0x116>
    16ce:	80 e9       	ldi	r24, 0x90	; 144
    16d0:	91 e0       	ldi	r25, 0x01	; 1
    16d2:	9a a7       	std	Y+42, r25	; 0x2a
    16d4:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16d6:	89 a5       	ldd	r24, Y+41	; 0x29
    16d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <Lcd_vidinit+0x104>
    16de:	9a a7       	std	Y+42, r25	; 0x2a
    16e0:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    16e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	9c a7       	std	Y+44, r25	; 0x2c
    16ea:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	69 f7       	brne	.-38     	; 0x16ce <Lcd_vidinit+0xf8>
    16f4:	14 c0       	rjmp	.+40     	; 0x171e <Lcd_vidinit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    16f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    16fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    16fc:	98 a9       	ldd	r25, Y+48	; 0x30
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9c a7       	std	Y+44, r25	; 0x2c
    1708:	8b a7       	std	Y+43, r24	; 0x2b
    170a:	8b a5       	ldd	r24, Y+43	; 0x2b
    170c:	9c a5       	ldd	r25, Y+44	; 0x2c
    170e:	98 a7       	std	Y+40, r25	; 0x28
    1710:	8f a3       	std	Y+39, r24	; 0x27
    1712:	8f a1       	ldd	r24, Y+39	; 0x27
    1714:	98 a5       	ldd	r25, Y+40	; 0x28
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <Lcd_vidinit+0x140>
    171a:	98 a7       	std	Y+40, r25	; 0x28
    171c:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_vidCmd(0x03);
    171e:	83 e0       	ldi	r24, 0x03	; 3
    1720:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Lcd_vidCmd>
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a0 ea       	ldi	r26, 0xA0	; 160
    172a:	b0 e4       	ldi	r27, 0x40	; 64
    172c:	8b a3       	std	Y+35, r24	; 0x23
    172e:	9c a3       	std	Y+36, r25	; 0x24
    1730:	ad a3       	std	Y+37, r26	; 0x25
    1732:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1734:	6b a1       	ldd	r22, Y+35	; 0x23
    1736:	7c a1       	ldd	r23, Y+36	; 0x24
    1738:	8d a1       	ldd	r24, Y+37	; 0x25
    173a:	9e a1       	ldd	r25, Y+38	; 0x26
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	4a e7       	ldi	r20, 0x7A	; 122
    1742:	55 e4       	ldi	r21, 0x45	; 69
    1744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	8f 8f       	std	Y+31, r24	; 0x1f
    174e:	98 a3       	std	Y+32, r25	; 0x20
    1750:	a9 a3       	std	Y+33, r26	; 0x21
    1752:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1754:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1756:	78 a1       	ldd	r23, Y+32	; 0x20
    1758:	89 a1       	ldd	r24, Y+33	; 0x21
    175a:	9a a1       	ldd	r25, Y+34	; 0x22
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e8       	ldi	r20, 0x80	; 128
    1762:	5f e3       	ldi	r21, 0x3F	; 63
    1764:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1768:	88 23       	and	r24, r24
    176a:	2c f4       	brge	.+10     	; 0x1776 <Lcd_vidinit+0x1a0>
		__ticks = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9e 8f       	std	Y+30, r25	; 0x1e
    1772:	8d 8f       	std	Y+29, r24	; 0x1d
    1774:	3f c0       	rjmp	.+126    	; 0x17f4 <Lcd_vidinit+0x21e>
	else if (__tmp > 65535)
    1776:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1778:	78 a1       	ldd	r23, Y+32	; 0x20
    177a:	89 a1       	ldd	r24, Y+33	; 0x21
    177c:	9a a1       	ldd	r25, Y+34	; 0x22
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	3f ef       	ldi	r19, 0xFF	; 255
    1782:	4f e7       	ldi	r20, 0x7F	; 127
    1784:	57 e4       	ldi	r21, 0x47	; 71
    1786:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    178a:	18 16       	cp	r1, r24
    178c:	4c f5       	brge	.+82     	; 0x17e0 <Lcd_vidinit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178e:	6b a1       	ldd	r22, Y+35	; 0x23
    1790:	7c a1       	ldd	r23, Y+36	; 0x24
    1792:	8d a1       	ldd	r24, Y+37	; 0x25
    1794:	9e a1       	ldd	r25, Y+38	; 0x26
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e2       	ldi	r20, 0x20	; 32
    179c:	51 e4       	ldi	r21, 0x41	; 65
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	bc 01       	movw	r22, r24
    17a8:	cd 01       	movw	r24, r26
    17aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	9e 8f       	std	Y+30, r25	; 0x1e
    17b4:	8d 8f       	std	Y+29, r24	; 0x1d
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <Lcd_vidinit+0x200>
    17b8:	80 e9       	ldi	r24, 0x90	; 144
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	9c 8f       	std	Y+28, r25	; 0x1c
    17be:	8b 8f       	std	Y+27, r24	; 0x1b
    17c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <Lcd_vidinit+0x1ee>
    17c8:	9c 8f       	std	Y+28, r25	; 0x1c
    17ca:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	9e 8f       	std	Y+30, r25	; 0x1e
    17d4:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	69 f7       	brne	.-38     	; 0x17b8 <Lcd_vidinit+0x1e2>
    17de:	14 c0       	rjmp	.+40     	; 0x1808 <Lcd_vidinit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17e2:	78 a1       	ldd	r23, Y+32	; 0x20
    17e4:	89 a1       	ldd	r24, Y+33	; 0x21
    17e6:	9a a1       	ldd	r25, Y+34	; 0x22
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e 8f       	std	Y+30, r25	; 0x1e
    17f2:	8d 8f       	std	Y+29, r24	; 0x1d
    17f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17f8:	9a 8f       	std	Y+26, r25	; 0x1a
    17fa:	89 8f       	std	Y+25, r24	; 0x19
    17fc:	89 8d       	ldd	r24, Y+25	; 0x19
    17fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <Lcd_vidinit+0x22a>
    1804:	9a 8f       	std	Y+26, r25	; 0x1a
    1806:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_vidCmd(0x03);
    1808:	83 e0       	ldi	r24, 0x03	; 3
    180a:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Lcd_vidCmd>
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a8 ec       	ldi	r26, 0xC8	; 200
    1814:	b2 e4       	ldi	r27, 0x42	; 66
    1816:	8d 8b       	std	Y+21, r24	; 0x15
    1818:	9e 8b       	std	Y+22, r25	; 0x16
    181a:	af 8b       	std	Y+23, r26	; 0x17
    181c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    181e:	6d 89       	ldd	r22, Y+21	; 0x15
    1820:	7e 89       	ldd	r23, Y+22	; 0x16
    1822:	8f 89       	ldd	r24, Y+23	; 0x17
    1824:	98 8d       	ldd	r25, Y+24	; 0x18
    1826:	2b ea       	ldi	r18, 0xAB	; 171
    1828:	3a ea       	ldi	r19, 0xAA	; 170
    182a:	4a ea       	ldi	r20, 0xAA	; 170
    182c:	50 e4       	ldi	r21, 0x40	; 64
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	89 8b       	std	Y+17, r24	; 0x11
    1838:	9a 8b       	std	Y+18, r25	; 0x12
    183a:	ab 8b       	std	Y+19, r26	; 0x13
    183c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    183e:	69 89       	ldd	r22, Y+17	; 0x11
    1840:	7a 89       	ldd	r23, Y+18	; 0x12
    1842:	8b 89       	ldd	r24, Y+19	; 0x13
    1844:	9c 89       	ldd	r25, Y+20	; 0x14
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	1c f4       	brge	.+6      	; 0x185c <Lcd_vidinit+0x286>
		__ticks = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	88 8b       	std	Y+16, r24	; 0x10
    185a:	91 c0       	rjmp	.+290    	; 0x197e <Lcd_vidinit+0x3a8>
	else if (__tmp > 255)
    185c:	69 89       	ldd	r22, Y+17	; 0x11
    185e:	7a 89       	ldd	r23, Y+18	; 0x12
    1860:	8b 89       	ldd	r24, Y+19	; 0x13
    1862:	9c 89       	ldd	r25, Y+20	; 0x14
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	4f e7       	ldi	r20, 0x7F	; 127
    186a:	53 e4       	ldi	r21, 0x43	; 67
    186c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1870:	18 16       	cp	r1, r24
    1872:	0c f0       	brlt	.+2      	; 0x1876 <Lcd_vidinit+0x2a0>
    1874:	7b c0       	rjmp	.+246    	; 0x196c <Lcd_vidinit+0x396>
	{
		_delay_ms(__us / 1000.0);
    1876:	6d 89       	ldd	r22, Y+21	; 0x15
    1878:	7e 89       	ldd	r23, Y+22	; 0x16
    187a:	8f 89       	ldd	r24, Y+23	; 0x17
    187c:	98 8d       	ldd	r25, Y+24	; 0x18
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	4a e7       	ldi	r20, 0x7A	; 122
    1884:	54 e4       	ldi	r21, 0x44	; 68
    1886:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	8c 87       	std	Y+12, r24	; 0x0c
    1890:	9d 87       	std	Y+13, r25	; 0x0d
    1892:	ae 87       	std	Y+14, r26	; 0x0e
    1894:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1896:	6c 85       	ldd	r22, Y+12	; 0x0c
    1898:	7d 85       	ldd	r23, Y+13	; 0x0d
    189a:	8e 85       	ldd	r24, Y+14	; 0x0e
    189c:	9f 85       	ldd	r25, Y+15	; 0x0f
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a e7       	ldi	r20, 0x7A	; 122
    18a4:	55 e4       	ldi	r21, 0x45	; 69
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	88 87       	std	Y+8, r24	; 0x08
    18b0:	99 87       	std	Y+9, r25	; 0x09
    18b2:	aa 87       	std	Y+10, r26	; 0x0a
    18b4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    18b6:	68 85       	ldd	r22, Y+8	; 0x08
    18b8:	79 85       	ldd	r23, Y+9	; 0x09
    18ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    18bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <Lcd_vidinit+0x302>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9f 83       	std	Y+7, r25	; 0x07
    18d4:	8e 83       	std	Y+6, r24	; 0x06
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <Lcd_vidinit+0x380>
	else if (__tmp > 65535)
    18d8:	68 85       	ldd	r22, Y+8	; 0x08
    18da:	79 85       	ldd	r23, Y+9	; 0x09
    18dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    18de:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	3f ef       	ldi	r19, 0xFF	; 255
    18e4:	4f e7       	ldi	r20, 0x7F	; 127
    18e6:	57 e4       	ldi	r21, 0x47	; 71
    18e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ec:	18 16       	cp	r1, r24
    18ee:	4c f5       	brge	.+82     	; 0x1942 <Lcd_vidinit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    18f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    18f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    18f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9f 83       	std	Y+7, r25	; 0x07
    1916:	8e 83       	std	Y+6, r24	; 0x06
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <Lcd_vidinit+0x362>
    191a:	80 e9       	ldi	r24, 0x90	; 144
    191c:	91 e0       	ldi	r25, 0x01	; 1
    191e:	9d 83       	std	Y+5, r25	; 0x05
    1920:	8c 83       	std	Y+4, r24	; 0x04
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	9d 81       	ldd	r25, Y+5	; 0x05
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <Lcd_vidinit+0x350>
    192a:	9d 83       	std	Y+5, r25	; 0x05
    192c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	8e 81       	ldd	r24, Y+6	; 0x06
    1930:	9f 81       	ldd	r25, Y+7	; 0x07
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	9f 83       	std	Y+7, r25	; 0x07
    1936:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	8e 81       	ldd	r24, Y+6	; 0x06
    193a:	9f 81       	ldd	r25, Y+7	; 0x07
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f7       	brne	.-38     	; 0x191a <Lcd_vidinit+0x344>
    1940:	24 c0       	rjmp	.+72     	; 0x198a <Lcd_vidinit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	68 85       	ldd	r22, Y+8	; 0x08
    1944:	79 85       	ldd	r23, Y+9	; 0x09
    1946:	8a 85       	ldd	r24, Y+10	; 0x0a
    1948:	9b 85       	ldd	r25, Y+11	; 0x0b
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9f 83       	std	Y+7, r25	; 0x07
    1954:	8e 83       	std	Y+6, r24	; 0x06
    1956:	8e 81       	ldd	r24, Y+6	; 0x06
    1958:	9f 81       	ldd	r25, Y+7	; 0x07
    195a:	9b 83       	std	Y+3, r25	; 0x03
    195c:	8a 83       	std	Y+2, r24	; 0x02
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	9b 81       	ldd	r25, Y+3	; 0x03
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <Lcd_vidinit+0x38c>
    1966:	9b 83       	std	Y+3, r25	; 0x03
    1968:	8a 83       	std	Y+2, r24	; 0x02
    196a:	0f c0       	rjmp	.+30     	; 0x198a <Lcd_vidinit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    196c:	69 89       	ldd	r22, Y+17	; 0x11
    196e:	7a 89       	ldd	r23, Y+18	; 0x12
    1970:	8b 89       	ldd	r24, Y+19	; 0x13
    1972:	9c 89       	ldd	r25, Y+20	; 0x14
    1974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	88 8b       	std	Y+16, r24	; 0x10
    197e:	88 89       	ldd	r24, Y+16	; 0x10
    1980:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	8a 95       	dec	r24
    1986:	f1 f7       	brne	.-4      	; 0x1984 <Lcd_vidinit+0x3ae>
    1988:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_vidCmd(0x03);
    198a:	83 e0       	ldi	r24, 0x03	; 3
    198c:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Lcd_vidCmd>
	Lcd_vidCmd(0x02);
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Lcd_vidCmd>
	Lcd_vidCmd(_LCD_4BIT_MODE);
    1996:	88 e2       	ldi	r24, 0x28	; 40
    1998:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Lcd_vidCmd>
}
    199c:	e4 96       	adiw	r28, 0x34	; 52
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <Lcd_videnablePulse>:

static void Lcd_videnablePulse(void)
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	a6 97       	sbiw	r28, 0x26	; 38
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
	//send Enable pulse
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	63 e0       	ldi	r22, 0x03	; 3
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	a0 e8       	ldi	r26, 0x80	; 128
    19d2:	bf e3       	ldi	r27, 0x3F	; 63
    19d4:	8b a3       	std	Y+35, r24	; 0x23
    19d6:	9c a3       	std	Y+36, r25	; 0x24
    19d8:	ad a3       	std	Y+37, r26	; 0x25
    19da:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19dc:	6b a1       	ldd	r22, Y+35	; 0x23
    19de:	7c a1       	ldd	r23, Y+36	; 0x24
    19e0:	8d a1       	ldd	r24, Y+37	; 0x25
    19e2:	9e a1       	ldd	r25, Y+38	; 0x26
    19e4:	2b ea       	ldi	r18, 0xAB	; 171
    19e6:	3a ea       	ldi	r19, 0xAA	; 170
    19e8:	4a ea       	ldi	r20, 0xAA	; 170
    19ea:	50 e4       	ldi	r21, 0x40	; 64
    19ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	8f 8f       	std	Y+31, r24	; 0x1f
    19f6:	98 a3       	std	Y+32, r25	; 0x20
    19f8:	a9 a3       	std	Y+33, r26	; 0x21
    19fa:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    19fc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19fe:	78 a1       	ldd	r23, Y+32	; 0x20
    1a00:	89 a1       	ldd	r24, Y+33	; 0x21
    1a02:	9a a1       	ldd	r25, Y+34	; 0x22
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e8       	ldi	r20, 0x80	; 128
    1a0a:	5f e3       	ldi	r21, 0x3F	; 63
    1a0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a10:	88 23       	and	r24, r24
    1a12:	1c f4       	brge	.+6      	; 0x1a1a <Lcd_videnablePulse+0x6c>
		__ticks = 1;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	8e 8f       	std	Y+30, r24	; 0x1e
    1a18:	91 c0       	rjmp	.+290    	; 0x1b3c <Lcd_videnablePulse+0x18e>
	else if (__tmp > 255)
    1a1a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a1c:	78 a1       	ldd	r23, Y+32	; 0x20
    1a1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a20:	9a a1       	ldd	r25, Y+34	; 0x22
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	4f e7       	ldi	r20, 0x7F	; 127
    1a28:	53 e4       	ldi	r21, 0x43	; 67
    1a2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a2e:	18 16       	cp	r1, r24
    1a30:	0c f0       	brlt	.+2      	; 0x1a34 <Lcd_videnablePulse+0x86>
    1a32:	7b c0       	rjmp	.+246    	; 0x1b2a <Lcd_videnablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1a34:	6b a1       	ldd	r22, Y+35	; 0x23
    1a36:	7c a1       	ldd	r23, Y+36	; 0x24
    1a38:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4a e7       	ldi	r20, 0x7A	; 122
    1a42:	54 e4       	ldi	r21, 0x44	; 68
    1a44:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	8a 8f       	std	Y+26, r24	; 0x1a
    1a4e:	9b 8f       	std	Y+27, r25	; 0x1b
    1a50:	ac 8f       	std	Y+28, r26	; 0x1c
    1a52:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a54:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a56:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a58:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	4a e7       	ldi	r20, 0x7A	; 122
    1a62:	55 e4       	ldi	r21, 0x45	; 69
    1a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	8e 8b       	std	Y+22, r24	; 0x16
    1a6e:	9f 8b       	std	Y+23, r25	; 0x17
    1a70:	a8 8f       	std	Y+24, r26	; 0x18
    1a72:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1a74:	6e 89       	ldd	r22, Y+22	; 0x16
    1a76:	7f 89       	ldd	r23, Y+23	; 0x17
    1a78:	88 8d       	ldd	r24, Y+24	; 0x18
    1a7a:	99 8d       	ldd	r25, Y+25	; 0x19
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e8       	ldi	r20, 0x80	; 128
    1a82:	5f e3       	ldi	r21, 0x3F	; 63
    1a84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a88:	88 23       	and	r24, r24
    1a8a:	2c f4       	brge	.+10     	; 0x1a96 <Lcd_videnablePulse+0xe8>
		__ticks = 1;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9d 8b       	std	Y+21, r25	; 0x15
    1a92:	8c 8b       	std	Y+20, r24	; 0x14
    1a94:	3f c0       	rjmp	.+126    	; 0x1b14 <Lcd_videnablePulse+0x166>
	else if (__tmp > 65535)
    1a96:	6e 89       	ldd	r22, Y+22	; 0x16
    1a98:	7f 89       	ldd	r23, Y+23	; 0x17
    1a9a:	88 8d       	ldd	r24, Y+24	; 0x18
    1a9c:	99 8d       	ldd	r25, Y+25	; 0x19
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	3f ef       	ldi	r19, 0xFF	; 255
    1aa2:	4f e7       	ldi	r20, 0x7F	; 127
    1aa4:	57 e4       	ldi	r21, 0x47	; 71
    1aa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aaa:	18 16       	cp	r1, r24
    1aac:	4c f5       	brge	.+82     	; 0x1b00 <Lcd_videnablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aae:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ab0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ab2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ab4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e2       	ldi	r20, 0x20	; 32
    1abc:	51 e4       	ldi	r21, 0x41	; 65
    1abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	9d 8b       	std	Y+21, r25	; 0x15
    1ad4:	8c 8b       	std	Y+20, r24	; 0x14
    1ad6:	0f c0       	rjmp	.+30     	; 0x1af6 <Lcd_videnablePulse+0x148>
    1ad8:	80 e9       	ldi	r24, 0x90	; 144
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	9b 8b       	std	Y+19, r25	; 0x13
    1ade:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ae0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ae2:	9b 89       	ldd	r25, Y+19	; 0x13
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <Lcd_videnablePulse+0x136>
    1ae8:	9b 8b       	std	Y+19, r25	; 0x13
    1aea:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aec:	8c 89       	ldd	r24, Y+20	; 0x14
    1aee:	9d 89       	ldd	r25, Y+21	; 0x15
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	9d 8b       	std	Y+21, r25	; 0x15
    1af4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af6:	8c 89       	ldd	r24, Y+20	; 0x14
    1af8:	9d 89       	ldd	r25, Y+21	; 0x15
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	69 f7       	brne	.-38     	; 0x1ad8 <Lcd_videnablePulse+0x12a>
    1afe:	24 c0       	rjmp	.+72     	; 0x1b48 <Lcd_videnablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b00:	6e 89       	ldd	r22, Y+22	; 0x16
    1b02:	7f 89       	ldd	r23, Y+23	; 0x17
    1b04:	88 8d       	ldd	r24, Y+24	; 0x18
    1b06:	99 8d       	ldd	r25, Y+25	; 0x19
    1b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	9d 8b       	std	Y+21, r25	; 0x15
    1b12:	8c 8b       	std	Y+20, r24	; 0x14
    1b14:	8c 89       	ldd	r24, Y+20	; 0x14
    1b16:	9d 89       	ldd	r25, Y+21	; 0x15
    1b18:	99 8b       	std	Y+17, r25	; 0x11
    1b1a:	88 8b       	std	Y+16, r24	; 0x10
    1b1c:	88 89       	ldd	r24, Y+16	; 0x10
    1b1e:	99 89       	ldd	r25, Y+17	; 0x11
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <Lcd_videnablePulse+0x172>
    1b24:	99 8b       	std	Y+17, r25	; 0x11
    1b26:	88 8b       	std	Y+16, r24	; 0x10
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <Lcd_videnablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b2a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b2c:	78 a1       	ldd	r23, Y+32	; 0x20
    1b2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b30:	9a a1       	ldd	r25, Y+34	; 0x22
    1b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	8e 8f       	std	Y+30, r24	; 0x1e
    1b3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b3e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b42:	8a 95       	dec	r24
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <Lcd_videnablePulse+0x194>
    1b46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	63 e0       	ldi	r22, 0x03	; 3
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 e0       	ldi	r26, 0x00	; 0
    1b58:	b0 e4       	ldi	r27, 0x40	; 64
    1b5a:	8b 87       	std	Y+11, r24	; 0x0b
    1b5c:	9c 87       	std	Y+12, r25	; 0x0c
    1b5e:	ad 87       	std	Y+13, r26	; 0x0d
    1b60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a e7       	ldi	r20, 0x7A	; 122
    1b70:	55 e4       	ldi	r21, 0x45	; 69
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8f 83       	std	Y+7, r24	; 0x07
    1b7c:	98 87       	std	Y+8, r25	; 0x08
    1b7e:	a9 87       	std	Y+9, r26	; 0x09
    1b80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <Lcd_videnablePulse+0x1f6>
		__ticks = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	3f c0       	rjmp	.+126    	; 0x1c22 <Lcd_videnablePulse+0x274>
	else if (__tmp > 65535)
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	3f ef       	ldi	r19, 0xFF	; 255
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	57 e4       	ldi	r21, 0x47	; 71
    1bb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	4c f5       	brge	.+82     	; 0x1c0e <Lcd_videnablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e2       	ldi	r20, 0x20	; 32
    1bca:	51 e4       	ldi	r21, 0x41	; 65
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	cd 01       	movw	r24, r26
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <Lcd_videnablePulse+0x256>
    1be6:	80 e9       	ldi	r24, 0x90	; 144
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	9c 83       	std	Y+4, r25	; 0x04
    1bec:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <Lcd_videnablePulse+0x244>
    1bf6:	9c 83       	std	Y+4, r25	; 0x04
    1bf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	69 f7       	brne	.-38     	; 0x1be6 <Lcd_videnablePulse+0x238>
    1c0c:	14 c0       	rjmp	.+40     	; 0x1c36 <Lcd_videnablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <Lcd_videnablePulse+0x280>
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c36:	a6 96       	adiw	r28, 0x26	; 38
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <Lcd_vidDisplayChar>:
void Lcd_vidDisplayChar(u8 chr)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <Lcd_vidDisplayChar+0x6>
    1c4e:	0f 92       	push	r0
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	8b 83       	std	Y+3, r24	; 0x03
	0b1101  1001

	1101   0000
	1001   0000
*/
	u8 loc_MSB = (chr & ~LCD_MASK);
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	80 7f       	andi	r24, 0xF0	; 240
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = (chr<<4);
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	82 95       	swap	r24
    1c60:	80 7f       	andi	r24, 0xF0	; 240
    1c62:	89 83       	std	Y+1, r24	; 0x01
	//RS->1
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	41 e0       	ldi	r20, 0x01	; 1
    1c6a:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	6a 81       	ldd	r22, Y+2	; 0x02
    1c72:	4f e0       	ldi	r20, 0x0F	; 15
    1c74:	0e 94 9e 14 	call	0x293c	; 0x293c <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1c78:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	69 81       	ldd	r22, Y+1	; 0x01
    1c80:	4f e0       	ldi	r20, 0x0F	; 15
    1c82:	0e 94 9e 14 	call	0x293c	; 0x293c <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1c86:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <Lcd_videnablePulse>
}
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <Lcd_vidCmd>:
void Lcd_vidCmd(lcd_Cmd_t cmd)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <Lcd_vidCmd+0x6>
    1c9c:	0f 92       	push	r0
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_MSB = cmd & ~LCD_MASK;
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	80 7f       	andi	r24, 0xF0	; 240
    1ca8:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = cmd<<4;
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	82 95       	swap	r24
    1cae:	80 7f       	andi	r24, 0xF0	; 240
    1cb0:	89 83       	std	Y+1, r24	; 0x01
	//RS->0
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	61 e0       	ldi	r22, 0x01	; 1
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	6a 81       	ldd	r22, Y+2	; 0x02
    1cc0:	4f e0       	ldi	r20, 0x0F	; 15
    1cc2:	0e 94 9e 14 	call	0x293c	; 0x293c <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1cc6:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	69 81       	ldd	r22, Y+1	; 0x01
    1cce:	4f e0       	ldi	r20, 0x0F	; 15
    1cd0:	0e 94 9e 14 	call	0x293c	; 0x293c <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1cd4:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <Lcd_videnablePulse>
}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <Lcd_vidRowColumn>:

void Lcd_vidRowColumn(u8 row, u8 col)
{
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <Lcd_vidRowColumn+0x6>
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <Lcd_vidRowColumn+0x8>
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	3c 83       	std	Y+4, r19	; 0x04
    1cfc:	2b 83       	std	Y+3, r18	; 0x03
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	31 f0       	breq	.+12     	; 0x1d12 <Lcd_vidRowColumn+0x2e>
    1d06:	2b 81       	ldd	r18, Y+3	; 0x03
    1d08:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0a:	21 30       	cpi	r18, 0x01	; 1
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	31 f0       	breq	.+12     	; 0x1d1c <Lcd_vidRowColumn+0x38>
    1d10:	09 c0       	rjmp	.+18     	; 0x1d24 <Lcd_vidRowColumn+0x40>
	{
	case 0:
		Lcd_vidCmd(0x80 + col);
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	80 58       	subi	r24, 0x80	; 128
    1d16:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Lcd_vidCmd>
    1d1a:	04 c0       	rjmp	.+8      	; 0x1d24 <Lcd_vidRowColumn+0x40>
		break;

	case 1:
		Lcd_vidCmd(0xC0 + col);
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	80 54       	subi	r24, 0x40	; 64
    1d20:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Lcd_vidCmd>
		break;
	}
}
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <Lcd_vidDisplyStr>:
void Lcd_vidDisplyStr(u8* str)
{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <Lcd_vidDisplyStr+0x6>
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	0a c0       	rjmp	.+20     	; 0x1d56 <Lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		Lcd_vidDisplayChar(*str);
    1d42:	e9 81       	ldd	r30, Y+1	; 0x01
    1d44:	fa 81       	ldd	r31, Y+2	; 0x02
    1d46:	80 81       	ld	r24, Z
    1d48:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <Lcd_vidDisplayChar>
		str++;
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
}
void Lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    1d56:	e9 81       	ldd	r30, Y+1	; 0x01
    1d58:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5a:	80 81       	ld	r24, Z
    1d5c:	88 23       	and	r24, r24
    1d5e:	89 f7       	brne	.-30     	; 0x1d42 <Lcd_vidDisplyStr+0x10>
	{
		Lcd_vidDisplayChar(*str);
		str++;
	}
}
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <Lcd_vidDisplyInt>:

void Lcd_vidDisplyInt(u32 num)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	29 97       	sbiw	r28, 0x09	; 9
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	6e 83       	std	Y+6, r22	; 0x06
    1d80:	7f 83       	std	Y+7, r23	; 0x07
    1d82:	88 87       	std	Y+8, r24	; 0x08
    1d84:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer[5];
	sprintf(buffer,"%d",num);
    1d86:	8d b7       	in	r24, 0x3d	; 61
    1d88:	9e b7       	in	r25, 0x3e	; 62
    1d8a:	08 97       	sbiw	r24, 0x08	; 8
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	9e bf       	out	0x3e, r25	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	8d bf       	out	0x3d, r24	; 61
    1d96:	ed b7       	in	r30, 0x3d	; 61
    1d98:	fe b7       	in	r31, 0x3e	; 62
    1d9a:	31 96       	adiw	r30, 0x01	; 1
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	01 96       	adiw	r24, 0x01	; 1
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	80 83       	st	Z, r24
    1da4:	8e e6       	ldi	r24, 0x6E	; 110
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	93 83       	std	Z+3, r25	; 0x03
    1daa:	82 83       	std	Z+2, r24	; 0x02
    1dac:	8e 81       	ldd	r24, Y+6	; 0x06
    1dae:	9f 81       	ldd	r25, Y+7	; 0x07
    1db0:	a8 85       	ldd	r26, Y+8	; 0x08
    1db2:	b9 85       	ldd	r27, Y+9	; 0x09
    1db4:	84 83       	std	Z+4, r24	; 0x04
    1db6:	95 83       	std	Z+5, r25	; 0x05
    1db8:	a6 83       	std	Z+6, r26	; 0x06
    1dba:	b7 83       	std	Z+7, r27	; 0x07
    1dbc:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <sprintf>
    1dc0:	8d b7       	in	r24, 0x3d	; 61
    1dc2:	9e b7       	in	r25, 0x3e	; 62
    1dc4:	08 96       	adiw	r24, 0x08	; 8
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	9e bf       	out	0x3e, r25	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	01 96       	adiw	r24, 0x01	; 1
    1dd4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <Lcd_vidDisplyStr>
}
    1dd8:	29 96       	adiw	r28, 0x09	; 9
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <Keypad_vidinit>:
		{'7','8','9','C'},
		{'*','0','#','D'}
};

void Keypad_vidinit(void)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Rows Pins as input	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN0, DIO_INPUT);
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN1, DIO_INPUT);
    1dfc:	82 e0       	ldi	r24, 0x02	; 2
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_INPUT);
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	62 e0       	ldi	r22, 0x02	; 2
    1e0a:	40 e0       	ldi	r20, 0x00	; 0
    1e0c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN3, DIO_INPUT);
    1e10:	82 e0       	ldi	r24, 0x02	; 2
    1e12:	63 e0       	ldi	r22, 0x03	; 3
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>

	/*	Configure Columns Pins as output	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	64 e0       	ldi	r22, 0x04	; 4
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	65 e0       	ldi	r22, 0x05	; 5
    1e28:	41 e0       	ldi	r20, 0x01	; 1
    1e2a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	66 e0       	ldi	r22, 0x06	; 6
    1e32:	41 e0       	ldi	r20, 0x01	; 1
    1e34:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	67 e0       	ldi	r22, 0x07	; 7
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>

	/*	initialize output columns with high	*/
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1e42:	82 e0       	ldi	r24, 0x02	; 2
    1e44:	64 e0       	ldi	r22, 0x04	; 4
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	65 e0       	ldi	r22, 0x05	; 5
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	66 e0       	ldi	r22, 0x06	; 6
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	67 e0       	ldi	r22, 0x07	; 7
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
}
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <Keypad_udtIsPressed>:

boolean Keypad_udtIsPressed()
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	0f 92       	push	r0
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
	if (
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <Dio_udtreadChanel>
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	91 f0       	breq	.+36     	; 0x1eaa <Keypad_udtIsPressed+0x3a>
    1e86:	82 e0       	ldi	r24, 0x02	; 2
    1e88:	61 e0       	ldi	r22, 0x01	; 1
    1e8a:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <Dio_udtreadChanel>
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	61 f0       	breq	.+24     	; 0x1eaa <Keypad_udtIsPressed+0x3a>
    1e92:	82 e0       	ldi	r24, 0x02	; 2
    1e94:	62 e0       	ldi	r22, 0x02	; 2
    1e96:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <Dio_udtreadChanel>
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	31 f0       	breq	.+12     	; 0x1eaa <Keypad_udtIsPressed+0x3a>
    1e9e:	82 e0       	ldi	r24, 0x02	; 2
    1ea0:	63 e0       	ldi	r22, 0x03	; 3
    1ea2:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <Dio_udtreadChanel>
    1ea6:	81 30       	cpi	r24, 0x01	; 1
    1ea8:	19 f4       	brne	.+6      	; 0x1eb0 <Keypad_udtIsPressed+0x40>
			(Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_HIGH)||
			(Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_HIGH)||
			(Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_HIGH)
	)
	{
		return TRUE;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <Keypad_udtIsPressed+0x42>
	}
	else
	{
		return FALSE;
    1eb0:	19 82       	std	Y+1, r1	; 0x01
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1eb4:	0f 90       	pop	r0
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <Keypad_udtgetRow>:

kp_row_t Keypad_udtgetRow(void)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_row = KP_NOROW;
    1ec6:	84 e0       	ldi	r24, 0x04	; 4
    1ec8:	89 83       	std	Y+1, r24	; 0x01

	if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN0) == DIO_HIGH)
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <Dio_udtreadChanel>
    1ed2:	81 30       	cpi	r24, 0x01	; 1
    1ed4:	11 f4       	brne	.+4      	; 0x1eda <Keypad_udtgetRow+0x1e>
	{
		loc_row=KP_ROW0;
    1ed6:	19 82       	std	Y+1, r1	; 0x01
    1ed8:	1d c0       	rjmp	.+58     	; 0x1f14 <Keypad_udtgetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_HIGH)
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	61 e0       	ldi	r22, 0x01	; 1
    1ede:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <Dio_udtreadChanel>
    1ee2:	81 30       	cpi	r24, 0x01	; 1
    1ee4:	19 f4       	brne	.+6      	; 0x1eec <Keypad_udtgetRow+0x30>
	{
		loc_row=KP_ROW1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	14 c0       	rjmp	.+40     	; 0x1f14 <Keypad_udtgetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_HIGH)
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	62 e0       	ldi	r22, 0x02	; 2
    1ef0:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <Dio_udtreadChanel>
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	19 f4       	brne	.+6      	; 0x1efe <Keypad_udtgetRow+0x42>
	{
		loc_row=KP_ROW2;
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	0b c0       	rjmp	.+22     	; 0x1f14 <Keypad_udtgetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_HIGH)
    1efe:	82 e0       	ldi	r24, 0x02	; 2
    1f00:	63 e0       	ldi	r22, 0x03	; 3
    1f02:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <Dio_udtreadChanel>
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	19 f4       	brne	.+6      	; 0x1f10 <Keypad_udtgetRow+0x54>
	{
		loc_row=KP_ROW3;
    1f0a:	83 e0       	ldi	r24, 0x03	; 3
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <Keypad_udtgetRow+0x58>
	}
	else
	{
		loc_row = KP_NOROW;
    1f10:	84 e0       	ldi	r24, 0x04	; 4
    1f12:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_row;
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f16:	0f 90       	pop	r0
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <Keypad_udtgetCol>:

kp_col_t Keypad_udtgetCol(kp_row_t current_row)
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <Keypad_udtgetCol+0x6>
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	8a 83       	std	Y+2, r24	; 0x02
	kp_col_t loc_column = KP_NOCOL;
    1f2a:	84 e0       	ldi	r24, 0x04	; 4
    1f2c:	89 83       	std	Y+1, r24	; 0x01

	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1f2e:	82 e0       	ldi	r24, 0x02	; 2
    1f30:	64 e0       	ldi	r22, 0x04	; 4
    1f32:	41 e0       	ldi	r20, 0x01	; 1
    1f34:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1f38:	82 e0       	ldi	r24, 0x02	; 2
    1f3a:	65 e0       	ldi	r22, 0x05	; 5
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1f42:	82 e0       	ldi	r24, 0x02	; 2
    1f44:	66 e0       	ldi	r22, 0x06	; 6
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	67 e0       	ldi	r22, 0x07	; 7
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>

	if (Keypad_udtgetRow() == current_row)
    1f56:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <Keypad_udtgetRow>
    1f5a:	98 2f       	mov	r25, r24
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	98 17       	cp	r25, r24
    1f60:	11 f4       	brne	.+4      	; 0x1f66 <Keypad_udtgetCol+0x48>
	{
		loc_column = KP_COL0;
    1f62:	19 82       	std	Y+1, r1	; 0x01
    1f64:	56 c0       	rjmp	.+172    	; 0x2012 <Keypad_udtgetCol+0xf4>
	}
	else
	{
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	64 e0       	ldi	r22, 0x04	; 4
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	65 e0       	ldi	r22, 0x05	; 5
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	66 e0       	ldi	r22, 0x06	; 6
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	67 e0       	ldi	r22, 0x07	; 7
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>

		if (Keypad_udtgetRow() == current_row)
    1f8e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <Keypad_udtgetRow>
    1f92:	98 2f       	mov	r25, r24
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	98 17       	cp	r25, r24
    1f98:	19 f4       	brne	.+6      	; 0x1fa0 <Keypad_udtgetCol+0x82>
		{
			loc_column = KP_COL1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	39 c0       	rjmp	.+114    	; 0x2012 <Keypad_udtgetCol+0xf4>
		}
		else
		{
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1fa0:	82 e0       	ldi	r24, 0x02	; 2
    1fa2:	64 e0       	ldi	r22, 0x04	; 4
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	65 e0       	ldi	r22, 0x05	; 5
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
    1fb6:	66 e0       	ldi	r22, 0x06	; 6
    1fb8:	41 e0       	ldi	r20, 0x01	; 1
    1fba:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	67 e0       	ldi	r22, 0x07	; 7
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>

			if (Keypad_udtgetRow() == current_row)
    1fc8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <Keypad_udtgetRow>
    1fcc:	98 2f       	mov	r25, r24
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	98 17       	cp	r25, r24
    1fd2:	19 f4       	brne	.+6      	; 0x1fda <Keypad_udtgetCol+0xbc>
			{
				loc_column = KP_COL2;
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    1fd8:	1c c0       	rjmp	.+56     	; 0x2012 <Keypad_udtgetCol+0xf4>
			}
			else
			{
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	64 e0       	ldi	r22, 0x04	; 4
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	65 e0       	ldi	r22, 0x05	; 5
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1fee:	82 e0       	ldi	r24, 0x02	; 2
    1ff0:	66 e0       	ldi	r22, 0x06	; 6
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	67 e0       	ldi	r22, 0x07	; 7
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>

				if (Keypad_udtgetRow() == current_row)
    2002:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <Keypad_udtgetRow>
    2006:	98 2f       	mov	r25, r24
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	98 17       	cp	r25, r24
    200c:	11 f4       	brne	.+4      	; 0x2012 <Keypad_udtgetCol+0xf4>
				{
					loc_column = KP_COL3;
    200e:	83 e0       	ldi	r24, 0x03	; 3
    2010:	89 83       	std	Y+1, r24	; 0x01

				}
			}
		}
	}
	return loc_column;
    2012:	89 81       	ldd	r24, Y+1	; 0x01
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <Keypad_u8GetButton>:

u8 Keypad_u8GetButton(void)
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	00 d0       	rcall	.+0      	; 0x2024 <Keypad_u8GetButton+0x6>
    2024:	0f 92       	push	r0
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_row = KP_NOROW;
    202a:	84 e0       	ldi	r24, 0x04	; 4
    202c:	8b 83       	std	Y+3, r24	; 0x03
	kp_col_t loc_col = KP_NOCOL;
    202e:	84 e0       	ldi	r24, 0x04	; 4
    2030:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_button = 0xFF;
    2032:	8f ef       	ldi	r24, 0xFF	; 255
    2034:	89 83       	std	Y+1, r24	; 0x01

	Keypad_vidinit();
    2036:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <Keypad_vidinit>

	if (Keypad_udtIsPressed() == TRUE)
    203a:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <Keypad_udtIsPressed>
    203e:	81 30       	cpi	r24, 0x01	; 1
    2040:	c9 f4       	brne	.+50     	; 0x2074 <Keypad_u8GetButton+0x56>
	{
		loc_row = Keypad_udtgetRow();
    2042:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <Keypad_udtgetRow>
    2046:	8b 83       	std	Y+3, r24	; 0x03
		loc_col = Keypad_udtgetCol(loc_row);
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <Keypad_udtgetCol>
    204e:	8a 83       	std	Y+2, r24	; 0x02
		loc_button = Keypad_Layout[loc_row][loc_col];
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	48 2f       	mov	r20, r24
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	ca 01       	movw	r24, r20
    205e:	88 0f       	add	r24, r24
    2060:	99 1f       	adc	r25, r25
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	82 0f       	add	r24, r18
    2068:	93 1f       	adc	r25, r19
    206a:	fc 01       	movw	r30, r24
    206c:	e7 58       	subi	r30, 0x87	; 135
    206e:	fe 4f       	sbci	r31, 0xFE	; 254
    2070:	80 81       	ld	r24, Z
    2072:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return loc_button;
    2074:	89 81       	ldd	r24, Y+1	; 0x01
}
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <DcMotor_vidInit>:
 */
#include "Dc_Motor_Types.h"
#include <util/delay.h>

void DcMotor_vidInit(void)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Pins Directions	*/

	/*	Make Sure Motor Stopped	*/

}
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <DcMotor_vidStart>:

void DcMotor_vidStart(dcMotor_dir_t dir)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	0f 92       	push	r0
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	89 83       	std	Y+1, r24	; 0x01
	{
		/*	Clear IN1	*/

		/*	Set IN2	*/
	}
}
    209c:	0f 90       	pop	r0
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <Dc_Motor_vidStop>:

void Dc_Motor_vidStop(void)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	2e 97       	sbiw	r28, 0x0e	; 14
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e8       	ldi	r25, 0x80	; 128
    20bc:	ab e3       	ldi	r26, 0x3B	; 59
    20be:	b5 e4       	ldi	r27, 0x45	; 69
    20c0:	8b 87       	std	Y+11, r24	; 0x0b
    20c2:	9c 87       	std	Y+12, r25	; 0x0c
    20c4:	ad 87       	std	Y+13, r26	; 0x0d
    20c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    20cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	4a e7       	ldi	r20, 0x7A	; 122
    20d6:	55 e4       	ldi	r21, 0x45	; 69
    20d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	8f 83       	std	Y+7, r24	; 0x07
    20e2:	98 87       	std	Y+8, r25	; 0x08
    20e4:	a9 87       	std	Y+9, r26	; 0x09
    20e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ea:	78 85       	ldd	r23, Y+8	; 0x08
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 e8       	ldi	r20, 0x80	; 128
    20f6:	5f e3       	ldi	r21, 0x3F	; 63
    20f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20fc:	88 23       	and	r24, r24
    20fe:	2c f4       	brge	.+10     	; 0x210a <Dc_Motor_vidStop+0x66>
		__ticks = 1;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9e 83       	std	Y+6, r25	; 0x06
    2106:	8d 83       	std	Y+5, r24	; 0x05
    2108:	3f c0       	rjmp	.+126    	; 0x2188 <Dc_Motor_vidStop+0xe4>
	else if (__tmp > 65535)
    210a:	6f 81       	ldd	r22, Y+7	; 0x07
    210c:	78 85       	ldd	r23, Y+8	; 0x08
    210e:	89 85       	ldd	r24, Y+9	; 0x09
    2110:	9a 85       	ldd	r25, Y+10	; 0x0a
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	3f ef       	ldi	r19, 0xFF	; 255
    2116:	4f e7       	ldi	r20, 0x7F	; 127
    2118:	57 e4       	ldi	r21, 0x47	; 71
    211a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    211e:	18 16       	cp	r1, r24
    2120:	4c f5       	brge	.+82     	; 0x2174 <Dc_Motor_vidStop+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2122:	6b 85       	ldd	r22, Y+11	; 0x0b
    2124:	7c 85       	ldd	r23, Y+12	; 0x0c
    2126:	8d 85       	ldd	r24, Y+13	; 0x0d
    2128:	9e 85       	ldd	r25, Y+14	; 0x0e
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e2       	ldi	r20, 0x20	; 32
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9e 83       	std	Y+6, r25	; 0x06
    2148:	8d 83       	std	Y+5, r24	; 0x05
    214a:	0f c0       	rjmp	.+30     	; 0x216a <Dc_Motor_vidStop+0xc6>
    214c:	80 e9       	ldi	r24, 0x90	; 144
    214e:	91 e0       	ldi	r25, 0x01	; 1
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	8b 83       	std	Y+3, r24	; 0x03
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	9c 81       	ldd	r25, Y+4	; 0x04
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <Dc_Motor_vidStop+0xb4>
    215c:	9c 83       	std	Y+4, r25	; 0x04
    215e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	9e 81       	ldd	r25, Y+6	; 0x06
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	9e 83       	std	Y+6, r25	; 0x06
    2168:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216a:	8d 81       	ldd	r24, Y+5	; 0x05
    216c:	9e 81       	ldd	r25, Y+6	; 0x06
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	69 f7       	brne	.-38     	; 0x214c <Dc_Motor_vidStop+0xa8>
    2172:	14 c0       	rjmp	.+40     	; 0x219c <Dc_Motor_vidStop+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2174:	6f 81       	ldd	r22, Y+7	; 0x07
    2176:	78 85       	ldd	r23, Y+8	; 0x08
    2178:	89 85       	ldd	r24, Y+9	; 0x09
    217a:	9a 85       	ldd	r25, Y+10	; 0x0a
    217c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	9e 83       	std	Y+6, r25	; 0x06
    2186:	8d 83       	std	Y+5, r24	; 0x05
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	9a 81       	ldd	r25, Y+2	; 0x02
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <Dc_Motor_vidStop+0xf0>
    2198:	9a 83       	std	Y+2, r25	; 0x02
    219a:	89 83       	std	Y+1, r24	; 0x01
	/*	Clear En Pin	*/

	_delay_ms(3000);
}
    219c:	2e 96       	adiw	r28, 0x0e	; 14
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <Button_vidbuttonInit>:
 *      Author: Eng_Fawzi
 */
#include "Button.h"
#include "Dio.h"
void Button_vidbuttonInit(void)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB,DIO_PIN0,DIO_INPUT);
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB,DIO_PIN4,DIO_INPUT);
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	64 e0       	ldi	r22, 0x04	; 4
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD,DIO_PIN2,DIO_INPUT);
    21ca:	83 e0       	ldi	r24, 0x03	; 3
    21cc:	62 e0       	ldi	r22, 0x02	; 2
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
}
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <Button_udtbuttonStatus>:

button_butStatus_t Button_udtbuttonStatus(button_buttonId_t butnId)
{
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <Button_udtbuttonStatus+0x6>
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <Button_udtbuttonStatus+0x8>
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t loc_btnStatus = RELEASED;
    21e8:	19 82       	std	Y+1, r1	; 0x01

	switch (butnId)
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	3c 83       	std	Y+4, r19	; 0x04
    21f2:	2b 83       	std	Y+3, r18	; 0x03
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	91 05       	cpc	r25, r1
    21fc:	a1 f0       	breq	.+40     	; 0x2226 <Button_udtbuttonStatus+0x4c>
    21fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2200:	3c 81       	ldd	r19, Y+4	; 0x04
    2202:	22 30       	cpi	r18, 0x02	; 2
    2204:	31 05       	cpc	r19, r1
    2206:	d1 f0       	breq	.+52     	; 0x223c <Button_udtbuttonStatus+0x62>
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	01 f5       	brne	.+64     	; 0x2250 <Button_udtbuttonStatus+0x76>
	{
	case BUTTON0:
		if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	60 e0       	ldi	r22, 0x00	; 0
    2214:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <Dio_udtreadChanel>
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	19 f4       	brne	.+6      	; 0x2222 <Button_udtbuttonStatus+0x48>
		{
			loc_btnStatus = PRESSED;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	17 c0       	rjmp	.+46     	; 0x2250 <Button_udtbuttonStatus+0x76>
		}
		else
		{
			loc_btnStatus = RELEASED;
    2222:	19 82       	std	Y+1, r1	; 0x01
    2224:	15 c0       	rjmp	.+42     	; 0x2250 <Button_udtbuttonStatus+0x76>
		}
		break;

	case BUTTON1:
		if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN4) == DIO_HIGH)
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	64 e0       	ldi	r22, 0x04	; 4
    222a:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <Dio_udtreadChanel>
    222e:	81 30       	cpi	r24, 0x01	; 1
    2230:	19 f4       	brne	.+6      	; 0x2238 <Button_udtbuttonStatus+0x5e>
		{
			loc_btnStatus = PRESSED;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	89 83       	std	Y+1, r24	; 0x01
    2236:	0c c0       	rjmp	.+24     	; 0x2250 <Button_udtbuttonStatus+0x76>
		}
		else
		{
			loc_btnStatus = RELEASED;
    2238:	19 82       	std	Y+1, r1	; 0x01
    223a:	0a c0       	rjmp	.+20     	; 0x2250 <Button_udtbuttonStatus+0x76>
		}
		break;

	case BUTTON2:
		if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
    223c:	83 e0       	ldi	r24, 0x03	; 3
    223e:	62 e0       	ldi	r22, 0x02	; 2
    2240:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <Dio_udtreadChanel>
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	19 f4       	brne	.+6      	; 0x224e <Button_udtbuttonStatus+0x74>
		{
			loc_btnStatus = PRESSED;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	01 c0       	rjmp	.+2      	; 0x2250 <Button_udtbuttonStatus+0x76>
		}
		else
		{
			loc_btnStatus = RELEASED;
    224e:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_btnStatus;
    2250:	89 81       	ldd	r24, Y+1	; 0x01
}
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <USART_Init>:
#include "Uart.h"
#include "Std_Types.h"
#include "Bit_Math.h"

void USART_Init(u32 baud)
{
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	28 97       	sbiw	r28, 0x08	; 8
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
    2274:	6d 83       	std	Y+5, r22	; 0x05
    2276:	7e 83       	std	Y+6, r23	; 0x06
    2278:	8f 83       	std	Y+7, r24	; 0x07
    227a:	98 87       	std	Y+8, r25	; 0x08
	u32 loc_UBBR_val = ((F_OSC/(16*baud))-1);
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	9e 81       	ldd	r25, Y+6	; 0x06
    2280:	af 81       	ldd	r26, Y+7	; 0x07
    2282:	b8 85       	ldd	r27, Y+8	; 0x08
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	aa 1f       	adc	r26, r26
    228a:	bb 1f       	adc	r27, r27
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	aa 1f       	adc	r26, r26
    2292:	bb 1f       	adc	r27, r27
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	aa 1f       	adc	r26, r26
    229a:	bb 1f       	adc	r27, r27
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	aa 1f       	adc	r26, r26
    22a2:	bb 1f       	adc	r27, r27
    22a4:	9c 01       	movw	r18, r24
    22a6:	ad 01       	movw	r20, r26
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	94 e2       	ldi	r25, 0x24	; 36
    22ac:	a4 ef       	ldi	r26, 0xF4	; 244
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__udivmodsi4>
    22b8:	da 01       	movw	r26, r20
    22ba:	c9 01       	movw	r24, r18
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	a1 09       	sbc	r26, r1
    22c0:	b1 09       	sbc	r27, r1
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	9a 83       	std	Y+2, r25	; 0x02
    22c6:	ab 83       	std	Y+3, r26	; 0x03
    22c8:	bc 83       	std	Y+4, r27	; 0x04
	/* Set baud rate */
	UART_UBRRH_REG = loc_UBBR_val>>8;
    22ca:	e0 e4       	ldi	r30, 0x40	; 64
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	9a 81       	ldd	r25, Y+2	; 0x02
    22d2:	ab 81       	ldd	r26, Y+3	; 0x03
    22d4:	bc 81       	ldd	r27, Y+4	; 0x04
    22d6:	89 2f       	mov	r24, r25
    22d8:	9a 2f       	mov	r25, r26
    22da:	ab 2f       	mov	r26, r27
    22dc:	bb 27       	eor	r27, r27
    22de:	80 83       	st	Z, r24
	UART_UBRRL_REG = loc_UBBR_val;
    22e0:	e9 e2       	ldi	r30, 0x29	; 41
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UART_UCSRB_REG = (1<<UART_RXEN_BIT)|(1<<UART_TXEN_BIT);
    22e8:	ea e2       	ldi	r30, 0x2A	; 42
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	88 e1       	ldi	r24, 0x18	; 24
    22ee:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UART_UCSRC_REG = (1<<UART_URSEL_BIT)|(1<<UART_USBS_BIT)|(3<<UART_UCSZ0_BIT);
    22f0:	e0 e4       	ldi	r30, 0x40	; 64
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	8e e8       	ldi	r24, 0x8E	; 142
    22f6:	80 83       	st	Z, r24
}
    22f8:	28 96       	adiw	r28, 0x08	; 8
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <USART_TransmitChar>:

void USART_TransmitChar(u8 data)
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	0f 92       	push	r0
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (CHECK_BIT(UART_UCSRA_REG,UART_UDRE_BIT) == 0)
    2316:	eb e2       	ldi	r30, 0x2B	; 43
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	82 95       	swap	r24
    231e:	86 95       	lsr	r24
    2320:	87 70       	andi	r24, 0x07	; 7
    2322:	88 2f       	mov	r24, r24
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	81 70       	andi	r24, 0x01	; 1
    2328:	90 70       	andi	r25, 0x00	; 0
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	a1 f3       	breq	.-24     	; 0x2316 <USART_TransmitChar+0xc>
	{
		;
	}
		/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
    232e:	ec e2       	ldi	r30, 0x2C	; 44
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	80 83       	st	Z, r24
}
    2336:	0f 90       	pop	r0
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <USART_Receive_NonBlock>:

/*	it shall be called periodically	*/
u8 USART_Receive_NonBlock(void)
{
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	0f 92       	push	r0
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	if (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 1)
    2348:	eb e2       	ldi	r30, 0x2B	; 43
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	88 1f       	adc	r24, r24
    2350:	88 27       	eor	r24, r24
    2352:	88 1f       	adc	r24, r24
    2354:	81 30       	cpi	r24, 0x01	; 1
    2356:	29 f4       	brne	.+10     	; 0x2362 <USART_Receive_NonBlock+0x24>
	{
		/* Get and return received data from buffer */
		return UART_UDR_REG;
    2358:	ec e2       	ldi	r30, 0x2C	; 44
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	01 c0       	rjmp	.+2      	; 0x2364 <USART_Receive_NonBlock+0x26>
	}
	else
	{
		return 0;
    2362:	19 82       	std	Y+1, r1	; 0x01
    2364:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <USART_Receive_Block>:

u8 USART_Receive_Block(void)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while(CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 0)
    2376:	eb e2       	ldi	r30, 0x2B	; 43
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	88 23       	and	r24, r24
    237e:	dc f7       	brge	.-10     	; 0x2376 <USART_Receive_Block+0x8>
	{
		;
	}
	/* Get and return received data from buffer */
	return UART_UDR_REG;
    2380:	ec e2       	ldi	r30, 0x2C	; 44
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
}
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <USART_TransmitStr>:

void USART_TransmitStr(u8 *str)
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	00 d0       	rcall	.+0      	; 0x2392 <USART_TransmitStr+0x6>
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	0a c0       	rjmp	.+20     	; 0x23b0 <USART_TransmitStr+0x24>
	while (*str != '\0')
	{
		USART_TransmitChar(*str);
    239c:	e9 81       	ldd	r30, Y+1	; 0x01
    239e:	fa 81       	ldd	r31, Y+2	; 0x02
    23a0:	80 81       	ld	r24, Z
    23a2:	0e 94 85 11 	call	0x230a	; 0x230a <USART_TransmitChar>
		str++;
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	9a 81       	ldd	r25, Y+2	; 0x02
    23aa:	01 96       	adiw	r24, 0x01	; 1
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
	return UART_UDR_REG;
}

void USART_TransmitStr(u8 *str)
{
	while (*str != '\0')
    23b0:	e9 81       	ldd	r30, Y+1	; 0x01
    23b2:	fa 81       	ldd	r31, Y+2	; 0x02
    23b4:	80 81       	ld	r24, Z
    23b6:	88 23       	and	r24, r24
    23b8:	89 f7       	brne	.-30     	; 0x239c <USART_TransmitStr+0x10>
	{
		USART_TransmitChar(*str);
		str++;
	}
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <USART_ReceiveInterruptEnable>:

void USART_ReceiveInterruptEnable(void)
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_UCSRB_REG,UART_RXC_INT_BIT);
    23cc:	aa e2       	ldi	r26, 0x2A	; 42
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	ea e2       	ldi	r30, 0x2A	; 42
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	80 68       	ori	r24, 0x80	; 128
    23d8:	8c 93       	st	X, r24
}
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <Spi_vidMasterInit>:
 *
 *************************************************/
#include "Spi.h"

void Spi_vidMasterInit(void)
{
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	65 e0       	ldi	r22, 0x05	; 5
    23ec:	41 e0       	ldi	r20, 0x01	; 1
    23ee:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	/*	configure SPI SS Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	64 e0       	ldi	r22, 0x04	; 4
    23f6:	41 e0       	ldi	r20, 0x01	; 1
    23f8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	/*	configure SPI SCK Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	67 e0       	ldi	r22, 0x07	; 7
    2400:	41 e0       	ldi	r20, 0x01	; 1
    2402:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	/*	configure SPI MISO Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN6, DIO_INPUT);
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	66 e0       	ldi	r22, 0x06	; 6
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	/*	initialize SPI SS pin with HIGH (No slave selected) */
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	64 e0       	ldi	r22, 0x04	; 4
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	0e 94 bb 13 	call	0x2776	; 0x2776 <Dio_vidwriteChanel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    241a:	ad e2       	ldi	r26, 0x2D	; 45
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	ed e2       	ldi	r30, 0x2D	; 45
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	80 64       	ori	r24, 0x40	; 64
    2426:	8c 93       	st	X, r24
	/*	enable SPI Module in Master mode	*/
	SET_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    2428:	ad e2       	ldi	r26, 0x2D	; 45
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	ed e2       	ldi	r30, 0x2D	; 45
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	80 61       	ori	r24, 0x10	; 16
    2434:	8c 93       	st	X, r24
	/*	set SCK frequency by F_CPU/16	*/
	/*	Set SPI Speed	*/
	SPI_SPCR_REG|=SPI_SCK_FREQ_FCPU_DIV_16;
    2436:	ad e2       	ldi	r26, 0x2D	; 45
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	ed e2       	ldi	r30, 0x2D	; 45
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	81 60       	ori	r24, 0x01	; 1
    2442:	8c 93       	st	X, r24
}
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <Spi_vidSlaveInit>:

void Spi_vidSlaveInit(void)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN5, DIO_INPUT);
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	65 e0       	ldi	r22, 0x05	; 5
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	/*	configure SPI SS Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN4, DIO_INPUT);
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	64 e0       	ldi	r22, 0x04	; 4
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	/*	configure SPI SCK Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN7, DIO_INPUT);
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	67 e0       	ldi	r22, 0x07	; 7
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	/*	configure SPI MISO Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	66 e0       	ldi	r22, 0x06	; 6
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <Dio_vidconfigChanel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    247a:	ad e2       	ldi	r26, 0x2D	; 45
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	ed e2       	ldi	r30, 0x2D	; 45
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	80 64       	ori	r24, 0x40	; 64
    2486:	8c 93       	st	X, r24
	/*	enable SPI Module in Slave mode	*/
	CLEAR_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    2488:	ad e2       	ldi	r26, 0x2D	; 45
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	ed e2       	ldi	r30, 0x2D	; 45
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	8f 7e       	andi	r24, 0xEF	; 239
    2494:	8c 93       	st	X, r24
}
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <Spi_MasterWrite>:

void Spi_MasterWrite(u8 data)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <Spi_MasterWrite+0x6>
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_flush_byte;
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    24a8:	ef e2       	ldi	r30, 0x2F	; 47
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(!(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
    24b0:	ee e2       	ldi	r30, 0x2E	; 46
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	88 23       	and	r24, r24
    24b8:	dc f7       	brge	.-10     	; 0x24b0 <Spi_MasterWrite+0x14>
	{
		;
	}
		/*	flush the data register	*/
	loc_flush_byte = SPI_SPDR_REG;
    24ba:	ef e2       	ldi	r30, 0x2F	; 47
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	89 83       	std	Y+1, r24	; 0x01
}
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <Spi_u8MasterRead>:

u8 Spi_u8MasterRead(void)
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	0f 92       	push	r0
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
	u8 loc_dummy_byte=0xFF;
    24d6:	8f ef       	ldi	r24, 0xFF	; 255
    24d8:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = loc_dummy_byte;
    24da:	ef e2       	ldi	r30, 0x2F	; 47
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	80 83       	st	Z, r24
	/*	wait until byte received	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    24e2:	ee e2       	ldi	r30, 0x2E	; 46
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	88 23       	and	r24, r24
    24ea:	dc f7       	brge	.-10     	; 0x24e2 <Spi_u8MasterRead+0x16>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    24ec:	ef e2       	ldi	r30, 0x2F	; 47
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
}
    24f2:	0f 90       	pop	r0
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <Spi_u8MasterTranseve>:

u8 Spi_u8MasterTranseve(u8 data)
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	0f 92       	push	r0
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    2506:	ef e2       	ldi	r30, 0x2F	; 47
    2508:	f0 e0       	ldi	r31, 0x00	; 0
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    250e:	ee e2       	ldi	r30, 0x2E	; 46
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	88 23       	and	r24, r24
    2516:	dc f7       	brge	.-10     	; 0x250e <Spi_u8MasterTranseve+0x14>
	{
		;
	}
	/*	flush the data register	*/
	return SPI_SPDR_REG;
    2518:	ef e2       	ldi	r30, 0x2F	; 47
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
}
    251e:	0f 90       	pop	r0
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <Spi_u8SlaveRead>:

u8 Spi_u8SlaveRead(void)
{
    2526:	df 93       	push	r29
    2528:	cf 93       	push	r28
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
	/*	wait until byte received	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    252e:	ee e2       	ldi	r30, 0x2E	; 46
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	88 23       	and	r24, r24
    2536:	dc f7       	brge	.-10     	; 0x252e <Spi_u8SlaveRead+0x8>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    2538:	ef e2       	ldi	r30, 0x2F	; 47
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
}
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <Spi_vidSlaveWrite>:

void Spi_vidSlaveWrite(u8 data)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	0f 92       	push	r0
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	89 83       	std	Y+1, r24	; 0x01
	SPI_SPDR_REG = data;
    2550:	ef e2       	ldi	r30, 0x2F	; 47
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	80 83       	st	Z, r24
}
    2558:	0f 90       	pop	r0
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <GINT_vidEnableAllInterrupts>:
 */
#include "GINT_Reg.h"
#include "Bit_Math.h"

void GINT_vidEnableAllInterrupts(void)
{
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG,7);
    2568:	af e5       	ldi	r26, 0x5F	; 95
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	ef e5       	ldi	r30, 0x5F	; 95
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	80 68       	ori	r24, 0x80	; 128
    2574:	8c 93       	st	X, r24
}
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <GINT_vidDisableAllInterrupts>:
void GINT_vidDisableAllInterrupts(void)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG,7);
    2584:	af e5       	ldi	r26, 0x5F	; 95
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	ef e5       	ldi	r30, 0x5F	; 95
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	8f 77       	andi	r24, 0x7F	; 127
    2590:	8c 93       	st	X, r24
}
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <EXTINT_vidEnableExtInt>:
#include "EXTINT_Types.h"
#include "EXTINT_Reg.h"
#include "Bit_Math.h"

void EXTINT_vidEnableExtInt(extint_intId_t intId, extint_sensId_t snensId)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	00 d0       	rcall	.+0      	; 0x259e <EXTINT_vidEnableExtInt+0x6>
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	6a 83       	std	Y+2, r22	; 0x02

}
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <Dio_vidconfigChanel>:
 */
#include "Dio.h"
#include "Bit_Math.h"

void Dio_vidconfigChanel(dio_port_t port, dio_pin_t pin,dio_dir_t dir)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <Dio_vidconfigChanel+0x6>
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <Dio_vidconfigChanel+0x8>
    25b8:	0f 92       	push	r0
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	89 83       	std	Y+1, r24	; 0x01
    25c0:	6a 83       	std	Y+2, r22	; 0x02
    25c2:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	3d 83       	std	Y+5, r19	; 0x05
    25cc:	2c 83       	std	Y+4, r18	; 0x04
    25ce:	8c 81       	ldd	r24, Y+4	; 0x04
    25d0:	9d 81       	ldd	r25, Y+5	; 0x05
    25d2:	81 30       	cpi	r24, 0x01	; 1
    25d4:	91 05       	cpc	r25, r1
    25d6:	09 f4       	brne	.+2      	; 0x25da <Dio_vidconfigChanel+0x2a>
    25d8:	43 c0       	rjmp	.+134    	; 0x2660 <Dio_vidconfigChanel+0xb0>
    25da:	2c 81       	ldd	r18, Y+4	; 0x04
    25dc:	3d 81       	ldd	r19, Y+5	; 0x05
    25de:	22 30       	cpi	r18, 0x02	; 2
    25e0:	31 05       	cpc	r19, r1
    25e2:	2c f4       	brge	.+10     	; 0x25ee <Dio_vidconfigChanel+0x3e>
    25e4:	8c 81       	ldd	r24, Y+4	; 0x04
    25e6:	9d 81       	ldd	r25, Y+5	; 0x05
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	71 f0       	breq	.+28     	; 0x2608 <Dio_vidconfigChanel+0x58>
    25ec:	bc c0       	rjmp	.+376    	; 0x2766 <Dio_vidconfigChanel+0x1b6>
    25ee:	2c 81       	ldd	r18, Y+4	; 0x04
    25f0:	3d 81       	ldd	r19, Y+5	; 0x05
    25f2:	22 30       	cpi	r18, 0x02	; 2
    25f4:	31 05       	cpc	r19, r1
    25f6:	09 f4       	brne	.+2      	; 0x25fa <Dio_vidconfigChanel+0x4a>
    25f8:	5f c0       	rjmp	.+190    	; 0x26b8 <Dio_vidconfigChanel+0x108>
    25fa:	8c 81       	ldd	r24, Y+4	; 0x04
    25fc:	9d 81       	ldd	r25, Y+5	; 0x05
    25fe:	83 30       	cpi	r24, 0x03	; 3
    2600:	91 05       	cpc	r25, r1
    2602:	09 f4       	brne	.+2      	; 0x2606 <Dio_vidconfigChanel+0x56>
    2604:	85 c0       	rjmp	.+266    	; 0x2710 <Dio_vidconfigChanel+0x160>
    2606:	af c0       	rjmp	.+350    	; 0x2766 <Dio_vidconfigChanel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	88 23       	and	r24, r24
    260c:	a9 f4       	brne	.+42     	; 0x2638 <Dio_vidconfigChanel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    260e:	aa e3       	ldi	r26, 0x3A	; 58
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	ea e3       	ldi	r30, 0x3A	; 58
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	48 2f       	mov	r20, r24
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	28 2f       	mov	r18, r24
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	02 2e       	mov	r0, r18
    2626:	02 c0       	rjmp	.+4      	; 0x262c <Dio_vidconfigChanel+0x7c>
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	0a 94       	dec	r0
    262e:	e2 f7       	brpl	.-8      	; 0x2628 <Dio_vidconfigChanel+0x78>
    2630:	80 95       	com	r24
    2632:	84 23       	and	r24, r20
    2634:	8c 93       	st	X, r24
    2636:	97 c0       	rjmp	.+302    	; 0x2766 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    2638:	aa e3       	ldi	r26, 0x3A	; 58
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	ea e3       	ldi	r30, 0x3A	; 58
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	48 2f       	mov	r20, r24
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	28 2f       	mov	r18, r24
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	02 2e       	mov	r0, r18
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <Dio_vidconfigChanel+0xa6>
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	0a 94       	dec	r0
    2658:	e2 f7       	brpl	.-8      	; 0x2652 <Dio_vidconfigChanel+0xa2>
    265a:	84 2b       	or	r24, r20
    265c:	8c 93       	st	X, r24
    265e:	83 c0       	rjmp	.+262    	; 0x2766 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	88 23       	and	r24, r24
    2664:	a9 f4       	brne	.+42     	; 0x2690 <Dio_vidconfigChanel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    2666:	a7 e3       	ldi	r26, 0x37	; 55
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e7 e3       	ldi	r30, 0x37	; 55
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	48 2f       	mov	r20, r24
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	02 2e       	mov	r0, r18
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <Dio_vidconfigChanel+0xd4>
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	0a 94       	dec	r0
    2686:	e2 f7       	brpl	.-8      	; 0x2680 <Dio_vidconfigChanel+0xd0>
    2688:	80 95       	com	r24
    268a:	84 23       	and	r24, r20
    268c:	8c 93       	st	X, r24
    268e:	6b c0       	rjmp	.+214    	; 0x2766 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    2690:	a7 e3       	ldi	r26, 0x37	; 55
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e7 e3       	ldi	r30, 0x37	; 55
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	48 2f       	mov	r20, r24
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	02 2e       	mov	r0, r18
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <Dio_vidconfigChanel+0xfe>
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	0a 94       	dec	r0
    26b0:	e2 f7       	brpl	.-8      	; 0x26aa <Dio_vidconfigChanel+0xfa>
    26b2:	84 2b       	or	r24, r20
    26b4:	8c 93       	st	X, r24
    26b6:	57 c0       	rjmp	.+174    	; 0x2766 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	88 23       	and	r24, r24
    26bc:	a9 f4       	brne	.+42     	; 0x26e8 <Dio_vidconfigChanel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    26be:	a4 e3       	ldi	r26, 0x34	; 52
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e4 e3       	ldi	r30, 0x34	; 52
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	48 2f       	mov	r20, r24
    26ca:	8a 81       	ldd	r24, Y+2	; 0x02
    26cc:	28 2f       	mov	r18, r24
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	02 2e       	mov	r0, r18
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <Dio_vidconfigChanel+0x12c>
    26d8:	88 0f       	add	r24, r24
    26da:	99 1f       	adc	r25, r25
    26dc:	0a 94       	dec	r0
    26de:	e2 f7       	brpl	.-8      	; 0x26d8 <Dio_vidconfigChanel+0x128>
    26e0:	80 95       	com	r24
    26e2:	84 23       	and	r24, r20
    26e4:	8c 93       	st	X, r24
    26e6:	3f c0       	rjmp	.+126    	; 0x2766 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    26e8:	a4 e3       	ldi	r26, 0x34	; 52
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e4 e3       	ldi	r30, 0x34	; 52
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	48 2f       	mov	r20, r24
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	02 2e       	mov	r0, r18
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <Dio_vidconfigChanel+0x156>
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	0a 94       	dec	r0
    2708:	e2 f7       	brpl	.-8      	; 0x2702 <Dio_vidconfigChanel+0x152>
    270a:	84 2b       	or	r24, r20
    270c:	8c 93       	st	X, r24
    270e:	2b c0       	rjmp	.+86     	; 0x2766 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	88 23       	and	r24, r24
    2714:	a9 f4       	brne	.+42     	; 0x2740 <Dio_vidconfigChanel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    2716:	a1 e3       	ldi	r26, 0x31	; 49
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e1 e3       	ldi	r30, 0x31	; 49
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	48 2f       	mov	r20, r24
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	02 2e       	mov	r0, r18
    272e:	02 c0       	rjmp	.+4      	; 0x2734 <Dio_vidconfigChanel+0x184>
    2730:	88 0f       	add	r24, r24
    2732:	99 1f       	adc	r25, r25
    2734:	0a 94       	dec	r0
    2736:	e2 f7       	brpl	.-8      	; 0x2730 <Dio_vidconfigChanel+0x180>
    2738:	80 95       	com	r24
    273a:	84 23       	and	r24, r20
    273c:	8c 93       	st	X, r24
    273e:	13 c0       	rjmp	.+38     	; 0x2766 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    2740:	a1 e3       	ldi	r26, 0x31	; 49
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	e1 e3       	ldi	r30, 0x31	; 49
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	80 81       	ld	r24, Z
    274a:	48 2f       	mov	r20, r24
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	02 2e       	mov	r0, r18
    2758:	02 c0       	rjmp	.+4      	; 0x275e <Dio_vidconfigChanel+0x1ae>
    275a:	88 0f       	add	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	0a 94       	dec	r0
    2760:	e2 f7       	brpl	.-8      	; 0x275a <Dio_vidconfigChanel+0x1aa>
    2762:	84 2b       	or	r24, r20
    2764:	8c 93       	st	X, r24
		}
		break;
	}
}
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <Dio_vidwriteChanel>:

void Dio_vidwriteChanel(dio_port_t port, dio_pin_t pin,dio_level_t level)
{
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	00 d0       	rcall	.+0      	; 0x277c <Dio_vidwriteChanel+0x6>
    277c:	00 d0       	rcall	.+0      	; 0x277e <Dio_vidwriteChanel+0x8>
    277e:	0f 92       	push	r0
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	89 83       	std	Y+1, r24	; 0x01
    2786:	6a 83       	std	Y+2, r22	; 0x02
    2788:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	28 2f       	mov	r18, r24
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	3d 83       	std	Y+5, r19	; 0x05
    2792:	2c 83       	std	Y+4, r18	; 0x04
    2794:	8c 81       	ldd	r24, Y+4	; 0x04
    2796:	9d 81       	ldd	r25, Y+5	; 0x05
    2798:	81 30       	cpi	r24, 0x01	; 1
    279a:	91 05       	cpc	r25, r1
    279c:	09 f4       	brne	.+2      	; 0x27a0 <Dio_vidwriteChanel+0x2a>
    279e:	43 c0       	rjmp	.+134    	; 0x2826 <Dio_vidwriteChanel+0xb0>
    27a0:	2c 81       	ldd	r18, Y+4	; 0x04
    27a2:	3d 81       	ldd	r19, Y+5	; 0x05
    27a4:	22 30       	cpi	r18, 0x02	; 2
    27a6:	31 05       	cpc	r19, r1
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <Dio_vidwriteChanel+0x3e>
    27aa:	8c 81       	ldd	r24, Y+4	; 0x04
    27ac:	9d 81       	ldd	r25, Y+5	; 0x05
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	71 f0       	breq	.+28     	; 0x27ce <Dio_vidwriteChanel+0x58>
    27b2:	bc c0       	rjmp	.+376    	; 0x292c <Dio_vidwriteChanel+0x1b6>
    27b4:	2c 81       	ldd	r18, Y+4	; 0x04
    27b6:	3d 81       	ldd	r19, Y+5	; 0x05
    27b8:	22 30       	cpi	r18, 0x02	; 2
    27ba:	31 05       	cpc	r19, r1
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <Dio_vidwriteChanel+0x4a>
    27be:	5f c0       	rjmp	.+190    	; 0x287e <Dio_vidwriteChanel+0x108>
    27c0:	8c 81       	ldd	r24, Y+4	; 0x04
    27c2:	9d 81       	ldd	r25, Y+5	; 0x05
    27c4:	83 30       	cpi	r24, 0x03	; 3
    27c6:	91 05       	cpc	r25, r1
    27c8:	09 f4       	brne	.+2      	; 0x27cc <Dio_vidwriteChanel+0x56>
    27ca:	85 c0       	rjmp	.+266    	; 0x28d6 <Dio_vidwriteChanel+0x160>
    27cc:	af c0       	rjmp	.+350    	; 0x292c <Dio_vidwriteChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    27ce:	8b 81       	ldd	r24, Y+3	; 0x03
    27d0:	81 30       	cpi	r24, 0x01	; 1
    27d2:	a1 f4       	brne	.+40     	; 0x27fc <Dio_vidwriteChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    27d4:	ab e3       	ldi	r26, 0x3B	; 59
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	eb e3       	ldi	r30, 0x3B	; 59
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	48 2f       	mov	r20, r24
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	02 2e       	mov	r0, r18
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <Dio_vidwriteChanel+0x7c>
    27ee:	88 0f       	add	r24, r24
    27f0:	99 1f       	adc	r25, r25
    27f2:	0a 94       	dec	r0
    27f4:	e2 f7       	brpl	.-8      	; 0x27ee <Dio_vidwriteChanel+0x78>
    27f6:	84 2b       	or	r24, r20
    27f8:	8c 93       	st	X, r24
    27fa:	98 c0       	rjmp	.+304    	; 0x292c <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    27fc:	ab e3       	ldi	r26, 0x3B	; 59
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	eb e3       	ldi	r30, 0x3B	; 59
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	48 2f       	mov	r20, r24
    2808:	8a 81       	ldd	r24, Y+2	; 0x02
    280a:	28 2f       	mov	r18, r24
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	02 2e       	mov	r0, r18
    2814:	02 c0       	rjmp	.+4      	; 0x281a <Dio_vidwriteChanel+0xa4>
    2816:	88 0f       	add	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	0a 94       	dec	r0
    281c:	e2 f7       	brpl	.-8      	; 0x2816 <Dio_vidwriteChanel+0xa0>
    281e:	80 95       	com	r24
    2820:	84 23       	and	r24, r20
    2822:	8c 93       	st	X, r24
    2824:	83 c0       	rjmp	.+262    	; 0x292c <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	81 30       	cpi	r24, 0x01	; 1
    282a:	a1 f4       	brne	.+40     	; 0x2854 <Dio_vidwriteChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    282c:	a8 e3       	ldi	r26, 0x38	; 56
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	e8 e3       	ldi	r30, 0x38	; 56
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	48 2f       	mov	r20, r24
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
    283a:	28 2f       	mov	r18, r24
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	02 2e       	mov	r0, r18
    2844:	02 c0       	rjmp	.+4      	; 0x284a <Dio_vidwriteChanel+0xd4>
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	0a 94       	dec	r0
    284c:	e2 f7       	brpl	.-8      	; 0x2846 <Dio_vidwriteChanel+0xd0>
    284e:	84 2b       	or	r24, r20
    2850:	8c 93       	st	X, r24
    2852:	6c c0       	rjmp	.+216    	; 0x292c <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    2854:	a8 e3       	ldi	r26, 0x38	; 56
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e8 e3       	ldi	r30, 0x38	; 56
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	48 2f       	mov	r20, r24
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	02 2e       	mov	r0, r18
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <Dio_vidwriteChanel+0xfc>
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	0a 94       	dec	r0
    2874:	e2 f7       	brpl	.-8      	; 0x286e <Dio_vidwriteChanel+0xf8>
    2876:	80 95       	com	r24
    2878:	84 23       	and	r24, r20
    287a:	8c 93       	st	X, r24
    287c:	57 c0       	rjmp	.+174    	; 0x292c <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	81 30       	cpi	r24, 0x01	; 1
    2882:	a1 f4       	brne	.+40     	; 0x28ac <Dio_vidwriteChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    2884:	a5 e3       	ldi	r26, 0x35	; 53
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e5 e3       	ldi	r30, 0x35	; 53
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	48 2f       	mov	r20, r24
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	28 2f       	mov	r18, r24
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	02 2e       	mov	r0, r18
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <Dio_vidwriteChanel+0x12c>
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	0a 94       	dec	r0
    28a4:	e2 f7       	brpl	.-8      	; 0x289e <Dio_vidwriteChanel+0x128>
    28a6:	84 2b       	or	r24, r20
    28a8:	8c 93       	st	X, r24
    28aa:	40 c0       	rjmp	.+128    	; 0x292c <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    28ac:	a5 e3       	ldi	r26, 0x35	; 53
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e5 e3       	ldi	r30, 0x35	; 53
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	48 2f       	mov	r20, r24
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	02 2e       	mov	r0, r18
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <Dio_vidwriteChanel+0x154>
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	0a 94       	dec	r0
    28cc:	e2 f7       	brpl	.-8      	; 0x28c6 <Dio_vidwriteChanel+0x150>
    28ce:	80 95       	com	r24
    28d0:	84 23       	and	r24, r20
    28d2:	8c 93       	st	X, r24
    28d4:	2b c0       	rjmp	.+86     	; 0x292c <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	81 30       	cpi	r24, 0x01	; 1
    28da:	a1 f4       	brne	.+40     	; 0x2904 <Dio_vidwriteChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    28dc:	a2 e3       	ldi	r26, 0x32	; 50
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	e2 e3       	ldi	r30, 0x32	; 50
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	48 2f       	mov	r20, r24
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	28 2f       	mov	r18, r24
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	02 2e       	mov	r0, r18
    28f4:	02 c0       	rjmp	.+4      	; 0x28fa <Dio_vidwriteChanel+0x184>
    28f6:	88 0f       	add	r24, r24
    28f8:	99 1f       	adc	r25, r25
    28fa:	0a 94       	dec	r0
    28fc:	e2 f7       	brpl	.-8      	; 0x28f6 <Dio_vidwriteChanel+0x180>
    28fe:	84 2b       	or	r24, r20
    2900:	8c 93       	st	X, r24
    2902:	14 c0       	rjmp	.+40     	; 0x292c <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    2904:	a2 e3       	ldi	r26, 0x32	; 50
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	e2 e3       	ldi	r30, 0x32	; 50
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	48 2f       	mov	r20, r24
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	02 2e       	mov	r0, r18
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <Dio_vidwriteChanel+0x1ac>
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	0a 94       	dec	r0
    2924:	e2 f7       	brpl	.-8      	; 0x291e <Dio_vidwriteChanel+0x1a8>
    2926:	80 95       	com	r24
    2928:	84 23       	and	r24, r20
    292a:	8c 93       	st	X, r24
		}
		break;
	}
}
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	08 95       	ret

0000293c <Dio_vidWriteChanelGroup>:

void Dio_vidWriteChanelGroup(dio_port_t port, u8 data, u8 mask)
{
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	00 d0       	rcall	.+0      	; 0x2942 <Dio_vidWriteChanelGroup+0x6>
    2942:	00 d0       	rcall	.+0      	; 0x2944 <Dio_vidWriteChanelGroup+0x8>
    2944:	0f 92       	push	r0
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	89 83       	std	Y+1, r24	; 0x01
    294c:	6a 83       	std	Y+2, r22	; 0x02
    294e:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	28 2f       	mov	r18, r24
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	3d 83       	std	Y+5, r19	; 0x05
    2958:	2c 83       	std	Y+4, r18	; 0x04
    295a:	8c 81       	ldd	r24, Y+4	; 0x04
    295c:	9d 81       	ldd	r25, Y+5	; 0x05
    295e:	81 30       	cpi	r24, 0x01	; 1
    2960:	91 05       	cpc	r25, r1
    2962:	01 f1       	breq	.+64     	; 0x29a4 <Dio_vidWriteChanelGroup+0x68>
    2964:	2c 81       	ldd	r18, Y+4	; 0x04
    2966:	3d 81       	ldd	r19, Y+5	; 0x05
    2968:	22 30       	cpi	r18, 0x02	; 2
    296a:	31 05       	cpc	r19, r1
    296c:	2c f4       	brge	.+10     	; 0x2978 <Dio_vidWriteChanelGroup+0x3c>
    296e:	8c 81       	ldd	r24, Y+4	; 0x04
    2970:	9d 81       	ldd	r25, Y+5	; 0x05
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	61 f0       	breq	.+24     	; 0x298e <Dio_vidWriteChanelGroup+0x52>
    2976:	36 c0       	rjmp	.+108    	; 0x29e4 <Dio_vidWriteChanelGroup+0xa8>
    2978:	2c 81       	ldd	r18, Y+4	; 0x04
    297a:	3d 81       	ldd	r19, Y+5	; 0x05
    297c:	22 30       	cpi	r18, 0x02	; 2
    297e:	31 05       	cpc	r19, r1
    2980:	e1 f0       	breq	.+56     	; 0x29ba <Dio_vidWriteChanelGroup+0x7e>
    2982:	8c 81       	ldd	r24, Y+4	; 0x04
    2984:	9d 81       	ldd	r25, Y+5	; 0x05
    2986:	83 30       	cpi	r24, 0x03	; 3
    2988:	91 05       	cpc	r25, r1
    298a:	11 f1       	breq	.+68     	; 0x29d0 <Dio_vidWriteChanelGroup+0x94>
    298c:	2b c0       	rjmp	.+86     	; 0x29e4 <Dio_vidWriteChanelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data);
    298e:	ab e3       	ldi	r26, 0x3B	; 59
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	eb e3       	ldi	r30, 0x3B	; 59
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	90 81       	ld	r25, Z
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	98 23       	and	r25, r24
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	89 2b       	or	r24, r25
    29a0:	8c 93       	st	X, r24
    29a2:	20 c0       	rjmp	.+64     	; 0x29e4 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    29a4:	a8 e3       	ldi	r26, 0x38	; 56
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e8 e3       	ldi	r30, 0x38	; 56
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	90 81       	ld	r25, Z
    29ae:	8b 81       	ldd	r24, Y+3	; 0x03
    29b0:	98 23       	and	r25, r24
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	89 2b       	or	r24, r25
    29b6:	8c 93       	st	X, r24
    29b8:	15 c0       	rjmp	.+42     	; 0x29e4 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    29ba:	a5 e3       	ldi	r26, 0x35	; 53
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e5 e3       	ldi	r30, 0x35	; 53
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	90 81       	ld	r25, Z
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	98 23       	and	r25, r24
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	89 2b       	or	r24, r25
    29cc:	8c 93       	st	X, r24
    29ce:	0a c0       	rjmp	.+20     	; 0x29e4 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    29d0:	a2 e3       	ldi	r26, 0x32	; 50
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e2 e3       	ldi	r30, 0x32	; 50
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	90 81       	ld	r25, Z
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	98 23       	and	r25, r24
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	89 2b       	or	r24, r25
    29e2:	8c 93       	st	X, r24
		break;
	}
}
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	08 95       	ret

000029f4 <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <Dio_udtreadChanel+0x6>
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <Dio_udtreadChanel+0x8>
    29fc:	0f 92       	push	r0
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	8a 83       	std	Y+2, r24	; 0x02
    2a04:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    2a06:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
    2a08:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	3d 83       	std	Y+5, r19	; 0x05
    2a10:	2c 83       	std	Y+4, r18	; 0x04
    2a12:	4c 81       	ldd	r20, Y+4	; 0x04
    2a14:	5d 81       	ldd	r21, Y+5	; 0x05
    2a16:	41 30       	cpi	r20, 0x01	; 1
    2a18:	51 05       	cpc	r21, r1
    2a1a:	79 f1       	breq	.+94     	; 0x2a7a <Dio_udtreadChanel+0x86>
    2a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a20:	82 30       	cpi	r24, 0x02	; 2
    2a22:	91 05       	cpc	r25, r1
    2a24:	34 f4       	brge	.+12     	; 0x2a32 <Dio_udtreadChanel+0x3e>
    2a26:	2c 81       	ldd	r18, Y+4	; 0x04
    2a28:	3d 81       	ldd	r19, Y+5	; 0x05
    2a2a:	21 15       	cp	r18, r1
    2a2c:	31 05       	cpc	r19, r1
    2a2e:	69 f0       	breq	.+26     	; 0x2a4a <Dio_udtreadChanel+0x56>
    2a30:	6b c0       	rjmp	.+214    	; 0x2b08 <Dio_udtreadChanel+0x114>
    2a32:	4c 81       	ldd	r20, Y+4	; 0x04
    2a34:	5d 81       	ldd	r21, Y+5	; 0x05
    2a36:	42 30       	cpi	r20, 0x02	; 2
    2a38:	51 05       	cpc	r21, r1
    2a3a:	b9 f1       	breq	.+110    	; 0x2aaa <Dio_udtreadChanel+0xb6>
    2a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a40:	83 30       	cpi	r24, 0x03	; 3
    2a42:	91 05       	cpc	r25, r1
    2a44:	09 f4       	brne	.+2      	; 0x2a48 <Dio_udtreadChanel+0x54>
    2a46:	49 c0       	rjmp	.+146    	; 0x2ada <Dio_udtreadChanel+0xe6>
    2a48:	5f c0       	rjmp	.+190    	; 0x2b08 <Dio_udtreadChanel+0x114>
	{
	case DIO_PORTA:
		if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    2a4a:	e9 e3       	ldi	r30, 0x39	; 57
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	28 2f       	mov	r18, r24
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	88 2f       	mov	r24, r24
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	a9 01       	movw	r20, r18
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <Dio_udtreadChanel+0x6e>
    2a5e:	55 95       	asr	r21
    2a60:	47 95       	ror	r20
    2a62:	8a 95       	dec	r24
    2a64:	e2 f7       	brpl	.-8      	; 0x2a5e <Dio_udtreadChanel+0x6a>
    2a66:	ca 01       	movw	r24, r20
    2a68:	81 70       	andi	r24, 0x01	; 1
    2a6a:	90 70       	andi	r25, 0x00	; 0
    2a6c:	88 23       	and	r24, r24
    2a6e:	19 f0       	breq	.+6      	; 0x2a76 <Dio_udtreadChanel+0x82>
		{
			loc_result = DIO_HIGH;
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	49 c0       	rjmp	.+146    	; 0x2b08 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2a76:	19 82       	std	Y+1, r1	; 0x01
    2a78:	47 c0       	rjmp	.+142    	; 0x2b08 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    2a7a:	e6 e3       	ldi	r30, 0x36	; 54
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	28 2f       	mov	r18, r24
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	88 2f       	mov	r24, r24
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a9 01       	movw	r20, r18
    2a8c:	02 c0       	rjmp	.+4      	; 0x2a92 <Dio_udtreadChanel+0x9e>
    2a8e:	55 95       	asr	r21
    2a90:	47 95       	ror	r20
    2a92:	8a 95       	dec	r24
    2a94:	e2 f7       	brpl	.-8      	; 0x2a8e <Dio_udtreadChanel+0x9a>
    2a96:	ca 01       	movw	r24, r20
    2a98:	81 70       	andi	r24, 0x01	; 1
    2a9a:	90 70       	andi	r25, 0x00	; 0
    2a9c:	88 23       	and	r24, r24
    2a9e:	19 f0       	breq	.+6      	; 0x2aa6 <Dio_udtreadChanel+0xb2>
		{
			loc_result = DIO_HIGH;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	89 83       	std	Y+1, r24	; 0x01
    2aa4:	31 c0       	rjmp	.+98     	; 0x2b08 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2aa6:	19 82       	std	Y+1, r1	; 0x01
    2aa8:	2f c0       	rjmp	.+94     	; 0x2b08 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    2aaa:	e3 e3       	ldi	r30, 0x33	; 51
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	88 2f       	mov	r24, r24
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	a9 01       	movw	r20, r18
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <Dio_udtreadChanel+0xce>
    2abe:	55 95       	asr	r21
    2ac0:	47 95       	ror	r20
    2ac2:	8a 95       	dec	r24
    2ac4:	e2 f7       	brpl	.-8      	; 0x2abe <Dio_udtreadChanel+0xca>
    2ac6:	ca 01       	movw	r24, r20
    2ac8:	81 70       	andi	r24, 0x01	; 1
    2aca:	90 70       	andi	r25, 0x00	; 0
    2acc:	88 23       	and	r24, r24
    2ace:	19 f0       	breq	.+6      	; 0x2ad6 <Dio_udtreadChanel+0xe2>
		{
			loc_result = DIO_HIGH;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	89 83       	std	Y+1, r24	; 0x01
    2ad4:	19 c0       	rjmp	.+50     	; 0x2b08 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2ad6:	19 82       	std	Y+1, r1	; 0x01
    2ad8:	17 c0       	rjmp	.+46     	; 0x2b08 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    2ada:	e0 e3       	ldi	r30, 0x30	; 48
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	88 2f       	mov	r24, r24
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	a9 01       	movw	r20, r18
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <Dio_udtreadChanel+0xfe>
    2aee:	55 95       	asr	r21
    2af0:	47 95       	ror	r20
    2af2:	8a 95       	dec	r24
    2af4:	e2 f7       	brpl	.-8      	; 0x2aee <Dio_udtreadChanel+0xfa>
    2af6:	ca 01       	movw	r24, r20
    2af8:	81 70       	andi	r24, 0x01	; 1
    2afa:	90 70       	andi	r25, 0x00	; 0
    2afc:	88 23       	and	r24, r24
    2afe:	19 f0       	breq	.+6      	; 0x2b06 <Dio_udtreadChanel+0x112>
		{
			loc_result = DIO_HIGH;
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	89 83       	std	Y+1, r24	; 0x01
    2b04:	01 c0       	rjmp	.+2      	; 0x2b08 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2b06:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	08 95       	ret

00002b1a <Dio_vidflipChanel>:

void Dio_vidflipChanel(dio_port_t port, dio_pin_t pin)
{
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <Dio_vidflipChanel+0x6>
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <Dio_vidflipChanel+0x8>
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	89 83       	std	Y+1, r24	; 0x01
    2b28:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	3c 83       	std	Y+4, r19	; 0x04
    2b32:	2b 83       	std	Y+3, r18	; 0x03
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	81 30       	cpi	r24, 0x01	; 1
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	49 f1       	breq	.+82     	; 0x2b90 <Dio_vidflipChanel+0x76>
    2b3e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b40:	3c 81       	ldd	r19, Y+4	; 0x04
    2b42:	22 30       	cpi	r18, 0x02	; 2
    2b44:	31 05       	cpc	r19, r1
    2b46:	2c f4       	brge	.+10     	; 0x2b52 <Dio_vidflipChanel+0x38>
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	61 f0       	breq	.+24     	; 0x2b68 <Dio_vidflipChanel+0x4e>
    2b50:	5a c0       	rjmp	.+180    	; 0x2c06 <Dio_vidflipChanel+0xec>
    2b52:	2b 81       	ldd	r18, Y+3	; 0x03
    2b54:	3c 81       	ldd	r19, Y+4	; 0x04
    2b56:	22 30       	cpi	r18, 0x02	; 2
    2b58:	31 05       	cpc	r19, r1
    2b5a:	71 f1       	breq	.+92     	; 0x2bb8 <Dio_vidflipChanel+0x9e>
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b60:	83 30       	cpi	r24, 0x03	; 3
    2b62:	91 05       	cpc	r25, r1
    2b64:	e9 f1       	breq	.+122    	; 0x2be0 <Dio_vidflipChanel+0xc6>
    2b66:	4f c0       	rjmp	.+158    	; 0x2c06 <Dio_vidflipChanel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    2b68:	ab e3       	ldi	r26, 0x3B	; 59
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	eb e3       	ldi	r30, 0x3B	; 59
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	48 2f       	mov	r20, r24
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	28 2f       	mov	r18, r24
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	02 2e       	mov	r0, r18
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <Dio_vidflipChanel+0x6c>
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	0a 94       	dec	r0
    2b88:	e2 f7       	brpl	.-8      	; 0x2b82 <Dio_vidflipChanel+0x68>
    2b8a:	84 27       	eor	r24, r20
    2b8c:	8c 93       	st	X, r24
    2b8e:	3b c0       	rjmp	.+118    	; 0x2c06 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    2b90:	a8 e3       	ldi	r26, 0x38	; 56
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	e8 e3       	ldi	r30, 0x38	; 56
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	48 2f       	mov	r20, r24
    2b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	02 2e       	mov	r0, r18
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <Dio_vidflipChanel+0x94>
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	0a 94       	dec	r0
    2bb0:	e2 f7       	brpl	.-8      	; 0x2baa <Dio_vidflipChanel+0x90>
    2bb2:	84 27       	eor	r24, r20
    2bb4:	8c 93       	st	X, r24
    2bb6:	27 c0       	rjmp	.+78     	; 0x2c06 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    2bb8:	a5 e3       	ldi	r26, 0x35	; 53
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e5 e3       	ldi	r30, 0x35	; 53
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	48 2f       	mov	r20, r24
    2bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	02 2e       	mov	r0, r18
    2bd0:	02 c0       	rjmp	.+4      	; 0x2bd6 <Dio_vidflipChanel+0xbc>
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	0a 94       	dec	r0
    2bd8:	e2 f7       	brpl	.-8      	; 0x2bd2 <Dio_vidflipChanel+0xb8>
    2bda:	84 27       	eor	r24, r20
    2bdc:	8c 93       	st	X, r24
    2bde:	13 c0       	rjmp	.+38     	; 0x2c06 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    2be0:	a2 e3       	ldi	r26, 0x32	; 50
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	e2 e3       	ldi	r30, 0x32	; 50
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	48 2f       	mov	r20, r24
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	02 2e       	mov	r0, r18
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <Dio_vidflipChanel+0xe4>
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	0a 94       	dec	r0
    2c00:	e2 f7       	brpl	.-8      	; 0x2bfa <Dio_vidflipChanel+0xe0>
    2c02:	84 27       	eor	r24, r20
    2c04:	8c 93       	st	X, r24
		break;
	}
}
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	08 95       	ret

00002c14 <Adc_vidInit>:
#include "Adc_Reg.h"
#include "Adc_Types.h"
#include "Bit_Math.h"

void Adc_vidInit(void)
{
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62

	/*	Enable ADC	*/
	SET_BIT(ADC_ADCSRA_REG, 7);
    2c1c:	a6 e2       	ldi	r26, 0x26	; 38
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	e6 e2       	ldi	r30, 0x26	; 38
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	80 68       	ori	r24, 0x80	; 128
    2c28:	8c 93       	st	X, r24
	/*	Configure ADC prescaler	 /128	*/
	ADC_ADCSRA_REG |= 7 /*0000 0111*/;
    2c2a:	a6 e2       	ldi	r26, 0x26	; 38
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	e6 e2       	ldi	r30, 0x26	; 38
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	87 60       	ori	r24, 0x07	; 7
    2c36:	8c 93       	st	X, r24
	/*	Select Vref +	AVCC	*/
	SET_BIT(ADC_ADMUX_REG,6);
    2c38:	a7 e2       	ldi	r26, 0x27	; 39
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e7 e2       	ldi	r30, 0x27	; 39
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	80 64       	ori	r24, 0x40	; 64
    2c44:	8c 93       	st	X, r24
}
    2c46:	cf 91       	pop	r28
    2c48:	df 91       	pop	r29
    2c4a:	08 95       	ret

00002c4c <Adc_u16AdcRead>:

f64 Adc_u16AdcRead(adc_channlId_t channel)
{
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	27 97       	sbiw	r28, 0x07	; 7
    2c56:	0f b6       	in	r0, 0x3f	; 63
    2c58:	f8 94       	cli
    2c5a:	de bf       	out	0x3e, r29	; 62
    2c5c:	0f be       	out	0x3f, r0	; 63
    2c5e:	cd bf       	out	0x3d, r28	; 61
    2c60:	8f 83       	std	Y+7, r24	; 0x07
	u16 loc_adcResult = 0;
    2c62:	1e 82       	std	Y+6, r1	; 0x06
    2c64:	1d 82       	std	Y+5, r1	; 0x05
	f64 loc_volt =0;
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a0 e0       	ldi	r26, 0x00	; 0
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	89 83       	std	Y+1, r24	; 0x01
    2c70:	9a 83       	std	Y+2, r25	; 0x02
    2c72:	ab 83       	std	Y+3, r26	; 0x03
    2c74:	bc 83       	std	Y+4, r27	; 0x04
	/*	select ADC channel	*/
	ADC_ADMUX_REG =  (ADC_ADMUX_REG & 0xF8)| channel;
    2c76:	a7 e2       	ldi	r26, 0x27	; 39
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	e7 e2       	ldi	r30, 0x27	; 39
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	98 2f       	mov	r25, r24
    2c82:	98 7f       	andi	r25, 0xF8	; 248
    2c84:	8f 81       	ldd	r24, Y+7	; 0x07
    2c86:	89 2b       	or	r24, r25
    2c88:	8c 93       	st	X, r24
	/*	Start ADC conversion	*/
	SET_BIT(ADC_ADCSRA_REG,6);
    2c8a:	a6 e2       	ldi	r26, 0x26	; 38
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	e6 e2       	ldi	r30, 0x26	; 38
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	80 64       	ori	r24, 0x40	; 64
    2c96:	8c 93       	st	X, r24

	/*	wait until ADIF flag become 1 */
	while(CHECK_BIT(ADC_ADCSRA_REG,4) !=1)
    2c98:	e6 e2       	ldi	r30, 0x26	; 38
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	80 81       	ld	r24, Z
    2c9e:	82 95       	swap	r24
    2ca0:	8f 70       	andi	r24, 0x0F	; 15
    2ca2:	88 2f       	mov	r24, r24
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	81 70       	andi	r24, 0x01	; 1
    2ca8:	90 70       	andi	r25, 0x00	; 0
    2caa:	00 97       	sbiw	r24, 0x00	; 0
    2cac:	a9 f3       	breq	.-22     	; 0x2c98 <Adc_u16AdcRead+0x4c>
	{
		/*	Do Nothing	*/
	}

	/*	clear ADIF by writing 1 	*/
	SET_BIT(ADC_ADCSRA_REG,4);
    2cae:	a6 e2       	ldi	r26, 0x26	; 38
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	e6 e2       	ldi	r30, 0x26	; 38
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	80 61       	ori	r24, 0x10	; 16
    2cba:	8c 93       	st	X, r24

	/*	read ADC result form ADCL, ADCH	*/
	loc_adcResult=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    2cbc:	e4 e2       	ldi	r30, 0x24	; 36
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	28 2f       	mov	r18, r24
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	e5 e2       	ldi	r30, 0x25	; 37
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	88 2f       	mov	r24, r24
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	98 2f       	mov	r25, r24
    2cd2:	88 27       	eor	r24, r24
    2cd4:	82 2b       	or	r24, r18
    2cd6:	93 2b       	or	r25, r19
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05

	loc_volt = loc_adcResult * ADC_STEP;
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	cc 01       	movw	r24, r24
    2ce2:	a0 e0       	ldi	r26, 0x00	; 0
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	2a e9       	ldi	r18, 0x9A	; 154
    2cf8:	39 e9       	ldi	r19, 0x99	; 153
    2cfa:	49 e9       	ldi	r20, 0x99	; 153
    2cfc:	50 e4       	ldi	r21, 0x40	; 64
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	89 83       	std	Y+1, r24	; 0x01
    2d08:	9a 83       	std	Y+2, r25	; 0x02
    2d0a:	ab 83       	std	Y+3, r26	; 0x03
    2d0c:	bc 83       	std	Y+4, r27	; 0x04
	return loc_volt;
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	9a 81       	ldd	r25, Y+2	; 0x02
    2d12:	ab 81       	ldd	r26, Y+3	; 0x03
    2d14:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	27 96       	adiw	r28, 0x07	; 7
    2d1c:	0f b6       	in	r0, 0x3f	; 63
    2d1e:	f8 94       	cli
    2d20:	de bf       	out	0x3e, r29	; 62
    2d22:	0f be       	out	0x3f, r0	; 63
    2d24:	cd bf       	out	0x3d, r28	; 61
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	08 95       	ret

00002d2c <__udivmodqi4>:
    2d2c:	99 1b       	sub	r25, r25
    2d2e:	79 e0       	ldi	r23, 0x09	; 9
    2d30:	04 c0       	rjmp	.+8      	; 0x2d3a <__udivmodqi4_ep>

00002d32 <__udivmodqi4_loop>:
    2d32:	99 1f       	adc	r25, r25
    2d34:	96 17       	cp	r25, r22
    2d36:	08 f0       	brcs	.+2      	; 0x2d3a <__udivmodqi4_ep>
    2d38:	96 1b       	sub	r25, r22

00002d3a <__udivmodqi4_ep>:
    2d3a:	88 1f       	adc	r24, r24
    2d3c:	7a 95       	dec	r23
    2d3e:	c9 f7       	brne	.-14     	; 0x2d32 <__udivmodqi4_loop>
    2d40:	80 95       	com	r24
    2d42:	08 95       	ret

00002d44 <__udivmodsi4>:
    2d44:	a1 e2       	ldi	r26, 0x21	; 33
    2d46:	1a 2e       	mov	r1, r26
    2d48:	aa 1b       	sub	r26, r26
    2d4a:	bb 1b       	sub	r27, r27
    2d4c:	fd 01       	movw	r30, r26
    2d4e:	0d c0       	rjmp	.+26     	; 0x2d6a <__udivmodsi4_ep>

00002d50 <__udivmodsi4_loop>:
    2d50:	aa 1f       	adc	r26, r26
    2d52:	bb 1f       	adc	r27, r27
    2d54:	ee 1f       	adc	r30, r30
    2d56:	ff 1f       	adc	r31, r31
    2d58:	a2 17       	cp	r26, r18
    2d5a:	b3 07       	cpc	r27, r19
    2d5c:	e4 07       	cpc	r30, r20
    2d5e:	f5 07       	cpc	r31, r21
    2d60:	20 f0       	brcs	.+8      	; 0x2d6a <__udivmodsi4_ep>
    2d62:	a2 1b       	sub	r26, r18
    2d64:	b3 0b       	sbc	r27, r19
    2d66:	e4 0b       	sbc	r30, r20
    2d68:	f5 0b       	sbc	r31, r21

00002d6a <__udivmodsi4_ep>:
    2d6a:	66 1f       	adc	r22, r22
    2d6c:	77 1f       	adc	r23, r23
    2d6e:	88 1f       	adc	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	1a 94       	dec	r1
    2d74:	69 f7       	brne	.-38     	; 0x2d50 <__udivmodsi4_loop>
    2d76:	60 95       	com	r22
    2d78:	70 95       	com	r23
    2d7a:	80 95       	com	r24
    2d7c:	90 95       	com	r25
    2d7e:	9b 01       	movw	r18, r22
    2d80:	ac 01       	movw	r20, r24
    2d82:	bd 01       	movw	r22, r26
    2d84:	cf 01       	movw	r24, r30
    2d86:	08 95       	ret

00002d88 <__prologue_saves__>:
    2d88:	2f 92       	push	r2
    2d8a:	3f 92       	push	r3
    2d8c:	4f 92       	push	r4
    2d8e:	5f 92       	push	r5
    2d90:	6f 92       	push	r6
    2d92:	7f 92       	push	r7
    2d94:	8f 92       	push	r8
    2d96:	9f 92       	push	r9
    2d98:	af 92       	push	r10
    2d9a:	bf 92       	push	r11
    2d9c:	cf 92       	push	r12
    2d9e:	df 92       	push	r13
    2da0:	ef 92       	push	r14
    2da2:	ff 92       	push	r15
    2da4:	0f 93       	push	r16
    2da6:	1f 93       	push	r17
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	ca 1b       	sub	r28, r26
    2db2:	db 0b       	sbc	r29, r27
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	cd bf       	out	0x3d, r28	; 61
    2dbe:	09 94       	ijmp

00002dc0 <__epilogue_restores__>:
    2dc0:	2a 88       	ldd	r2, Y+18	; 0x12
    2dc2:	39 88       	ldd	r3, Y+17	; 0x11
    2dc4:	48 88       	ldd	r4, Y+16	; 0x10
    2dc6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dc8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dca:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dcc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dce:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dd0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dd2:	b9 84       	ldd	r11, Y+9	; 0x09
    2dd4:	c8 84       	ldd	r12, Y+8	; 0x08
    2dd6:	df 80       	ldd	r13, Y+7	; 0x07
    2dd8:	ee 80       	ldd	r14, Y+6	; 0x06
    2dda:	fd 80       	ldd	r15, Y+5	; 0x05
    2ddc:	0c 81       	ldd	r16, Y+4	; 0x04
    2dde:	1b 81       	ldd	r17, Y+3	; 0x03
    2de0:	aa 81       	ldd	r26, Y+2	; 0x02
    2de2:	b9 81       	ldd	r27, Y+1	; 0x01
    2de4:	ce 0f       	add	r28, r30
    2de6:	d1 1d       	adc	r29, r1
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	ed 01       	movw	r28, r26
    2df4:	08 95       	ret

00002df6 <sprintf>:
    2df6:	ae e0       	ldi	r26, 0x0E	; 14
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	e1 e0       	ldi	r30, 0x01	; 1
    2dfc:	f7 e1       	ldi	r31, 0x17	; 23
    2dfe:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__prologue_saves__+0x1c>
    2e02:	0d 89       	ldd	r16, Y+21	; 0x15
    2e04:	1e 89       	ldd	r17, Y+22	; 0x16
    2e06:	86 e0       	ldi	r24, 0x06	; 6
    2e08:	8c 83       	std	Y+4, r24	; 0x04
    2e0a:	1a 83       	std	Y+2, r17	; 0x02
    2e0c:	09 83       	std	Y+1, r16	; 0x01
    2e0e:	8f ef       	ldi	r24, 0xFF	; 255
    2e10:	9f e7       	ldi	r25, 0x7F	; 127
    2e12:	9e 83       	std	Y+6, r25	; 0x06
    2e14:	8d 83       	std	Y+5, r24	; 0x05
    2e16:	9e 01       	movw	r18, r28
    2e18:	27 5e       	subi	r18, 0xE7	; 231
    2e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	01 96       	adiw	r24, 0x01	; 1
    2e20:	6f 89       	ldd	r22, Y+23	; 0x17
    2e22:	78 8d       	ldd	r23, Y+24	; 0x18
    2e24:	a9 01       	movw	r20, r18
    2e26:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <vfprintf>
    2e2a:	2f 81       	ldd	r18, Y+7	; 0x07
    2e2c:	38 85       	ldd	r19, Y+8	; 0x08
    2e2e:	02 0f       	add	r16, r18
    2e30:	13 1f       	adc	r17, r19
    2e32:	f8 01       	movw	r30, r16
    2e34:	10 82       	st	Z, r1
    2e36:	2e 96       	adiw	r28, 0x0e	; 14
    2e38:	e4 e0       	ldi	r30, 0x04	; 4
    2e3a:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__epilogue_restores__+0x1c>

00002e3e <vfprintf>:
    2e3e:	ab e0       	ldi	r26, 0x0B	; 11
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	e5 e2       	ldi	r30, 0x25	; 37
    2e44:	f7 e1       	ldi	r31, 0x17	; 23
    2e46:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__>
    2e4a:	3c 01       	movw	r6, r24
    2e4c:	2b 01       	movw	r4, r22
    2e4e:	5a 01       	movw	r10, r20
    2e50:	fc 01       	movw	r30, r24
    2e52:	17 82       	std	Z+7, r1	; 0x07
    2e54:	16 82       	std	Z+6, r1	; 0x06
    2e56:	83 81       	ldd	r24, Z+3	; 0x03
    2e58:	81 fd       	sbrc	r24, 1
    2e5a:	03 c0       	rjmp	.+6      	; 0x2e62 <vfprintf+0x24>
    2e5c:	6f ef       	ldi	r22, 0xFF	; 255
    2e5e:	7f ef       	ldi	r23, 0xFF	; 255
    2e60:	c6 c1       	rjmp	.+908    	; 0x31ee <vfprintf+0x3b0>
    2e62:	9a e0       	ldi	r25, 0x0A	; 10
    2e64:	89 2e       	mov	r8, r25
    2e66:	1e 01       	movw	r2, r28
    2e68:	08 94       	sec
    2e6a:	21 1c       	adc	r2, r1
    2e6c:	31 1c       	adc	r3, r1
    2e6e:	f3 01       	movw	r30, r6
    2e70:	23 81       	ldd	r18, Z+3	; 0x03
    2e72:	f2 01       	movw	r30, r4
    2e74:	23 fd       	sbrc	r18, 3
    2e76:	85 91       	lpm	r24, Z+
    2e78:	23 ff       	sbrs	r18, 3
    2e7a:	81 91       	ld	r24, Z+
    2e7c:	2f 01       	movw	r4, r30
    2e7e:	88 23       	and	r24, r24
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <vfprintf+0x46>
    2e82:	b2 c1       	rjmp	.+868    	; 0x31e8 <vfprintf+0x3aa>
    2e84:	85 32       	cpi	r24, 0x25	; 37
    2e86:	39 f4       	brne	.+14     	; 0x2e96 <vfprintf+0x58>
    2e88:	23 fd       	sbrc	r18, 3
    2e8a:	85 91       	lpm	r24, Z+
    2e8c:	23 ff       	sbrs	r18, 3
    2e8e:	81 91       	ld	r24, Z+
    2e90:	2f 01       	movw	r4, r30
    2e92:	85 32       	cpi	r24, 0x25	; 37
    2e94:	29 f4       	brne	.+10     	; 0x2ea0 <vfprintf+0x62>
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	b3 01       	movw	r22, r6
    2e9a:	0e 94 12 19 	call	0x3224	; 0x3224 <fputc>
    2e9e:	e7 cf       	rjmp	.-50     	; 0x2e6e <vfprintf+0x30>
    2ea0:	98 2f       	mov	r25, r24
    2ea2:	ff 24       	eor	r15, r15
    2ea4:	ee 24       	eor	r14, r14
    2ea6:	99 24       	eor	r9, r9
    2ea8:	ff e1       	ldi	r31, 0x1F	; 31
    2eaa:	ff 15       	cp	r31, r15
    2eac:	d0 f0       	brcs	.+52     	; 0x2ee2 <vfprintf+0xa4>
    2eae:	9b 32       	cpi	r25, 0x2B	; 43
    2eb0:	69 f0       	breq	.+26     	; 0x2ecc <vfprintf+0x8e>
    2eb2:	9c 32       	cpi	r25, 0x2C	; 44
    2eb4:	28 f4       	brcc	.+10     	; 0x2ec0 <vfprintf+0x82>
    2eb6:	90 32       	cpi	r25, 0x20	; 32
    2eb8:	59 f0       	breq	.+22     	; 0x2ed0 <vfprintf+0x92>
    2eba:	93 32       	cpi	r25, 0x23	; 35
    2ebc:	91 f4       	brne	.+36     	; 0x2ee2 <vfprintf+0xa4>
    2ebe:	0e c0       	rjmp	.+28     	; 0x2edc <vfprintf+0x9e>
    2ec0:	9d 32       	cpi	r25, 0x2D	; 45
    2ec2:	49 f0       	breq	.+18     	; 0x2ed6 <vfprintf+0x98>
    2ec4:	90 33       	cpi	r25, 0x30	; 48
    2ec6:	69 f4       	brne	.+26     	; 0x2ee2 <vfprintf+0xa4>
    2ec8:	41 e0       	ldi	r20, 0x01	; 1
    2eca:	24 c0       	rjmp	.+72     	; 0x2f14 <vfprintf+0xd6>
    2ecc:	52 e0       	ldi	r21, 0x02	; 2
    2ece:	f5 2a       	or	r15, r21
    2ed0:	84 e0       	ldi	r24, 0x04	; 4
    2ed2:	f8 2a       	or	r15, r24
    2ed4:	28 c0       	rjmp	.+80     	; 0x2f26 <vfprintf+0xe8>
    2ed6:	98 e0       	ldi	r25, 0x08	; 8
    2ed8:	f9 2a       	or	r15, r25
    2eda:	25 c0       	rjmp	.+74     	; 0x2f26 <vfprintf+0xe8>
    2edc:	e0 e1       	ldi	r30, 0x10	; 16
    2ede:	fe 2a       	or	r15, r30
    2ee0:	22 c0       	rjmp	.+68     	; 0x2f26 <vfprintf+0xe8>
    2ee2:	f7 fc       	sbrc	r15, 7
    2ee4:	29 c0       	rjmp	.+82     	; 0x2f38 <vfprintf+0xfa>
    2ee6:	89 2f       	mov	r24, r25
    2ee8:	80 53       	subi	r24, 0x30	; 48
    2eea:	8a 30       	cpi	r24, 0x0A	; 10
    2eec:	70 f4       	brcc	.+28     	; 0x2f0a <vfprintf+0xcc>
    2eee:	f6 fe       	sbrs	r15, 6
    2ef0:	05 c0       	rjmp	.+10     	; 0x2efc <vfprintf+0xbe>
    2ef2:	98 9c       	mul	r9, r8
    2ef4:	90 2c       	mov	r9, r0
    2ef6:	11 24       	eor	r1, r1
    2ef8:	98 0e       	add	r9, r24
    2efa:	15 c0       	rjmp	.+42     	; 0x2f26 <vfprintf+0xe8>
    2efc:	e8 9c       	mul	r14, r8
    2efe:	e0 2c       	mov	r14, r0
    2f00:	11 24       	eor	r1, r1
    2f02:	e8 0e       	add	r14, r24
    2f04:	f0 e2       	ldi	r31, 0x20	; 32
    2f06:	ff 2a       	or	r15, r31
    2f08:	0e c0       	rjmp	.+28     	; 0x2f26 <vfprintf+0xe8>
    2f0a:	9e 32       	cpi	r25, 0x2E	; 46
    2f0c:	29 f4       	brne	.+10     	; 0x2f18 <vfprintf+0xda>
    2f0e:	f6 fc       	sbrc	r15, 6
    2f10:	6b c1       	rjmp	.+726    	; 0x31e8 <vfprintf+0x3aa>
    2f12:	40 e4       	ldi	r20, 0x40	; 64
    2f14:	f4 2a       	or	r15, r20
    2f16:	07 c0       	rjmp	.+14     	; 0x2f26 <vfprintf+0xe8>
    2f18:	9c 36       	cpi	r25, 0x6C	; 108
    2f1a:	19 f4       	brne	.+6      	; 0x2f22 <vfprintf+0xe4>
    2f1c:	50 e8       	ldi	r21, 0x80	; 128
    2f1e:	f5 2a       	or	r15, r21
    2f20:	02 c0       	rjmp	.+4      	; 0x2f26 <vfprintf+0xe8>
    2f22:	98 36       	cpi	r25, 0x68	; 104
    2f24:	49 f4       	brne	.+18     	; 0x2f38 <vfprintf+0xfa>
    2f26:	f2 01       	movw	r30, r4
    2f28:	23 fd       	sbrc	r18, 3
    2f2a:	95 91       	lpm	r25, Z+
    2f2c:	23 ff       	sbrs	r18, 3
    2f2e:	91 91       	ld	r25, Z+
    2f30:	2f 01       	movw	r4, r30
    2f32:	99 23       	and	r25, r25
    2f34:	09 f0       	breq	.+2      	; 0x2f38 <vfprintf+0xfa>
    2f36:	b8 cf       	rjmp	.-144    	; 0x2ea8 <vfprintf+0x6a>
    2f38:	89 2f       	mov	r24, r25
    2f3a:	85 54       	subi	r24, 0x45	; 69
    2f3c:	83 30       	cpi	r24, 0x03	; 3
    2f3e:	18 f0       	brcs	.+6      	; 0x2f46 <vfprintf+0x108>
    2f40:	80 52       	subi	r24, 0x20	; 32
    2f42:	83 30       	cpi	r24, 0x03	; 3
    2f44:	38 f4       	brcc	.+14     	; 0x2f54 <vfprintf+0x116>
    2f46:	44 e0       	ldi	r20, 0x04	; 4
    2f48:	50 e0       	ldi	r21, 0x00	; 0
    2f4a:	a4 0e       	add	r10, r20
    2f4c:	b5 1e       	adc	r11, r21
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	59 83       	std	Y+1, r21	; 0x01
    2f52:	0f c0       	rjmp	.+30     	; 0x2f72 <vfprintf+0x134>
    2f54:	93 36       	cpi	r25, 0x63	; 99
    2f56:	31 f0       	breq	.+12     	; 0x2f64 <vfprintf+0x126>
    2f58:	93 37       	cpi	r25, 0x73	; 115
    2f5a:	79 f0       	breq	.+30     	; 0x2f7a <vfprintf+0x13c>
    2f5c:	93 35       	cpi	r25, 0x53	; 83
    2f5e:	09 f0       	breq	.+2      	; 0x2f62 <vfprintf+0x124>
    2f60:	56 c0       	rjmp	.+172    	; 0x300e <vfprintf+0x1d0>
    2f62:	20 c0       	rjmp	.+64     	; 0x2fa4 <vfprintf+0x166>
    2f64:	f5 01       	movw	r30, r10
    2f66:	80 81       	ld	r24, Z
    2f68:	89 83       	std	Y+1, r24	; 0x01
    2f6a:	42 e0       	ldi	r20, 0x02	; 2
    2f6c:	50 e0       	ldi	r21, 0x00	; 0
    2f6e:	a4 0e       	add	r10, r20
    2f70:	b5 1e       	adc	r11, r21
    2f72:	61 01       	movw	r12, r2
    2f74:	01 e0       	ldi	r16, 0x01	; 1
    2f76:	10 e0       	ldi	r17, 0x00	; 0
    2f78:	12 c0       	rjmp	.+36     	; 0x2f9e <vfprintf+0x160>
    2f7a:	f5 01       	movw	r30, r10
    2f7c:	c0 80       	ld	r12, Z
    2f7e:	d1 80       	ldd	r13, Z+1	; 0x01
    2f80:	f6 fc       	sbrc	r15, 6
    2f82:	03 c0       	rjmp	.+6      	; 0x2f8a <vfprintf+0x14c>
    2f84:	6f ef       	ldi	r22, 0xFF	; 255
    2f86:	7f ef       	ldi	r23, 0xFF	; 255
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <vfprintf+0x150>
    2f8a:	69 2d       	mov	r22, r9
    2f8c:	70 e0       	ldi	r23, 0x00	; 0
    2f8e:	42 e0       	ldi	r20, 0x02	; 2
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	a4 0e       	add	r10, r20
    2f94:	b5 1e       	adc	r11, r21
    2f96:	c6 01       	movw	r24, r12
    2f98:	0e 94 07 19 	call	0x320e	; 0x320e <strnlen>
    2f9c:	8c 01       	movw	r16, r24
    2f9e:	5f e7       	ldi	r21, 0x7F	; 127
    2fa0:	f5 22       	and	r15, r21
    2fa2:	14 c0       	rjmp	.+40     	; 0x2fcc <vfprintf+0x18e>
    2fa4:	f5 01       	movw	r30, r10
    2fa6:	c0 80       	ld	r12, Z
    2fa8:	d1 80       	ldd	r13, Z+1	; 0x01
    2faa:	f6 fc       	sbrc	r15, 6
    2fac:	03 c0       	rjmp	.+6      	; 0x2fb4 <vfprintf+0x176>
    2fae:	6f ef       	ldi	r22, 0xFF	; 255
    2fb0:	7f ef       	ldi	r23, 0xFF	; 255
    2fb2:	02 c0       	rjmp	.+4      	; 0x2fb8 <vfprintf+0x17a>
    2fb4:	69 2d       	mov	r22, r9
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	42 e0       	ldi	r20, 0x02	; 2
    2fba:	50 e0       	ldi	r21, 0x00	; 0
    2fbc:	a4 0e       	add	r10, r20
    2fbe:	b5 1e       	adc	r11, r21
    2fc0:	c6 01       	movw	r24, r12
    2fc2:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <strnlen_P>
    2fc6:	8c 01       	movw	r16, r24
    2fc8:	50 e8       	ldi	r21, 0x80	; 128
    2fca:	f5 2a       	or	r15, r21
    2fcc:	f3 fe       	sbrs	r15, 3
    2fce:	07 c0       	rjmp	.+14     	; 0x2fde <vfprintf+0x1a0>
    2fd0:	1a c0       	rjmp	.+52     	; 0x3006 <vfprintf+0x1c8>
    2fd2:	80 e2       	ldi	r24, 0x20	; 32
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	b3 01       	movw	r22, r6
    2fd8:	0e 94 12 19 	call	0x3224	; 0x3224 <fputc>
    2fdc:	ea 94       	dec	r14
    2fde:	8e 2d       	mov	r24, r14
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	08 17       	cp	r16, r24
    2fe4:	19 07       	cpc	r17, r25
    2fe6:	a8 f3       	brcs	.-22     	; 0x2fd2 <vfprintf+0x194>
    2fe8:	0e c0       	rjmp	.+28     	; 0x3006 <vfprintf+0x1c8>
    2fea:	f6 01       	movw	r30, r12
    2fec:	f7 fc       	sbrc	r15, 7
    2fee:	85 91       	lpm	r24, Z+
    2ff0:	f7 fe       	sbrs	r15, 7
    2ff2:	81 91       	ld	r24, Z+
    2ff4:	6f 01       	movw	r12, r30
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	b3 01       	movw	r22, r6
    2ffa:	0e 94 12 19 	call	0x3224	; 0x3224 <fputc>
    2ffe:	e1 10       	cpse	r14, r1
    3000:	ea 94       	dec	r14
    3002:	01 50       	subi	r16, 0x01	; 1
    3004:	10 40       	sbci	r17, 0x00	; 0
    3006:	01 15       	cp	r16, r1
    3008:	11 05       	cpc	r17, r1
    300a:	79 f7       	brne	.-34     	; 0x2fea <vfprintf+0x1ac>
    300c:	ea c0       	rjmp	.+468    	; 0x31e2 <vfprintf+0x3a4>
    300e:	94 36       	cpi	r25, 0x64	; 100
    3010:	11 f0       	breq	.+4      	; 0x3016 <vfprintf+0x1d8>
    3012:	99 36       	cpi	r25, 0x69	; 105
    3014:	69 f5       	brne	.+90     	; 0x3070 <vfprintf+0x232>
    3016:	f7 fe       	sbrs	r15, 7
    3018:	08 c0       	rjmp	.+16     	; 0x302a <vfprintf+0x1ec>
    301a:	f5 01       	movw	r30, r10
    301c:	20 81       	ld	r18, Z
    301e:	31 81       	ldd	r19, Z+1	; 0x01
    3020:	42 81       	ldd	r20, Z+2	; 0x02
    3022:	53 81       	ldd	r21, Z+3	; 0x03
    3024:	84 e0       	ldi	r24, 0x04	; 4
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	0a c0       	rjmp	.+20     	; 0x303e <vfprintf+0x200>
    302a:	f5 01       	movw	r30, r10
    302c:	80 81       	ld	r24, Z
    302e:	91 81       	ldd	r25, Z+1	; 0x01
    3030:	9c 01       	movw	r18, r24
    3032:	44 27       	eor	r20, r20
    3034:	37 fd       	sbrc	r19, 7
    3036:	40 95       	com	r20
    3038:	54 2f       	mov	r21, r20
    303a:	82 e0       	ldi	r24, 0x02	; 2
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	a8 0e       	add	r10, r24
    3040:	b9 1e       	adc	r11, r25
    3042:	9f e6       	ldi	r25, 0x6F	; 111
    3044:	f9 22       	and	r15, r25
    3046:	57 ff       	sbrs	r21, 7
    3048:	09 c0       	rjmp	.+18     	; 0x305c <vfprintf+0x21e>
    304a:	50 95       	com	r21
    304c:	40 95       	com	r20
    304e:	30 95       	com	r19
    3050:	21 95       	neg	r18
    3052:	3f 4f       	sbci	r19, 0xFF	; 255
    3054:	4f 4f       	sbci	r20, 0xFF	; 255
    3056:	5f 4f       	sbci	r21, 0xFF	; 255
    3058:	e0 e8       	ldi	r30, 0x80	; 128
    305a:	fe 2a       	or	r15, r30
    305c:	ca 01       	movw	r24, r20
    305e:	b9 01       	movw	r22, r18
    3060:	a1 01       	movw	r20, r2
    3062:	2a e0       	ldi	r18, 0x0A	; 10
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	0e 94 3e 19 	call	0x327c	; 0x327c <__ultoa_invert>
    306a:	d8 2e       	mov	r13, r24
    306c:	d2 18       	sub	r13, r2
    306e:	40 c0       	rjmp	.+128    	; 0x30f0 <vfprintf+0x2b2>
    3070:	95 37       	cpi	r25, 0x75	; 117
    3072:	29 f4       	brne	.+10     	; 0x307e <vfprintf+0x240>
    3074:	1f 2d       	mov	r17, r15
    3076:	1f 7e       	andi	r17, 0xEF	; 239
    3078:	2a e0       	ldi	r18, 0x0A	; 10
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	1d c0       	rjmp	.+58     	; 0x30b8 <vfprintf+0x27a>
    307e:	1f 2d       	mov	r17, r15
    3080:	19 7f       	andi	r17, 0xF9	; 249
    3082:	9f 36       	cpi	r25, 0x6F	; 111
    3084:	61 f0       	breq	.+24     	; 0x309e <vfprintf+0x260>
    3086:	90 37       	cpi	r25, 0x70	; 112
    3088:	20 f4       	brcc	.+8      	; 0x3092 <vfprintf+0x254>
    308a:	98 35       	cpi	r25, 0x58	; 88
    308c:	09 f0       	breq	.+2      	; 0x3090 <vfprintf+0x252>
    308e:	ac c0       	rjmp	.+344    	; 0x31e8 <vfprintf+0x3aa>
    3090:	0f c0       	rjmp	.+30     	; 0x30b0 <vfprintf+0x272>
    3092:	90 37       	cpi	r25, 0x70	; 112
    3094:	39 f0       	breq	.+14     	; 0x30a4 <vfprintf+0x266>
    3096:	98 37       	cpi	r25, 0x78	; 120
    3098:	09 f0       	breq	.+2      	; 0x309c <vfprintf+0x25e>
    309a:	a6 c0       	rjmp	.+332    	; 0x31e8 <vfprintf+0x3aa>
    309c:	04 c0       	rjmp	.+8      	; 0x30a6 <vfprintf+0x268>
    309e:	28 e0       	ldi	r18, 0x08	; 8
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	0a c0       	rjmp	.+20     	; 0x30b8 <vfprintf+0x27a>
    30a4:	10 61       	ori	r17, 0x10	; 16
    30a6:	14 fd       	sbrc	r17, 4
    30a8:	14 60       	ori	r17, 0x04	; 4
    30aa:	20 e1       	ldi	r18, 0x10	; 16
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	04 c0       	rjmp	.+8      	; 0x30b8 <vfprintf+0x27a>
    30b0:	14 fd       	sbrc	r17, 4
    30b2:	16 60       	ori	r17, 0x06	; 6
    30b4:	20 e1       	ldi	r18, 0x10	; 16
    30b6:	32 e0       	ldi	r19, 0x02	; 2
    30b8:	17 ff       	sbrs	r17, 7
    30ba:	08 c0       	rjmp	.+16     	; 0x30cc <vfprintf+0x28e>
    30bc:	f5 01       	movw	r30, r10
    30be:	60 81       	ld	r22, Z
    30c0:	71 81       	ldd	r23, Z+1	; 0x01
    30c2:	82 81       	ldd	r24, Z+2	; 0x02
    30c4:	93 81       	ldd	r25, Z+3	; 0x03
    30c6:	44 e0       	ldi	r20, 0x04	; 4
    30c8:	50 e0       	ldi	r21, 0x00	; 0
    30ca:	08 c0       	rjmp	.+16     	; 0x30dc <vfprintf+0x29e>
    30cc:	f5 01       	movw	r30, r10
    30ce:	80 81       	ld	r24, Z
    30d0:	91 81       	ldd	r25, Z+1	; 0x01
    30d2:	bc 01       	movw	r22, r24
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	42 e0       	ldi	r20, 0x02	; 2
    30da:	50 e0       	ldi	r21, 0x00	; 0
    30dc:	a4 0e       	add	r10, r20
    30de:	b5 1e       	adc	r11, r21
    30e0:	a1 01       	movw	r20, r2
    30e2:	0e 94 3e 19 	call	0x327c	; 0x327c <__ultoa_invert>
    30e6:	d8 2e       	mov	r13, r24
    30e8:	d2 18       	sub	r13, r2
    30ea:	8f e7       	ldi	r24, 0x7F	; 127
    30ec:	f8 2e       	mov	r15, r24
    30ee:	f1 22       	and	r15, r17
    30f0:	f6 fe       	sbrs	r15, 6
    30f2:	0b c0       	rjmp	.+22     	; 0x310a <vfprintf+0x2cc>
    30f4:	5e ef       	ldi	r21, 0xFE	; 254
    30f6:	f5 22       	and	r15, r21
    30f8:	d9 14       	cp	r13, r9
    30fa:	38 f4       	brcc	.+14     	; 0x310a <vfprintf+0x2cc>
    30fc:	f4 fe       	sbrs	r15, 4
    30fe:	07 c0       	rjmp	.+14     	; 0x310e <vfprintf+0x2d0>
    3100:	f2 fc       	sbrc	r15, 2
    3102:	05 c0       	rjmp	.+10     	; 0x310e <vfprintf+0x2d0>
    3104:	8f ee       	ldi	r24, 0xEF	; 239
    3106:	f8 22       	and	r15, r24
    3108:	02 c0       	rjmp	.+4      	; 0x310e <vfprintf+0x2d0>
    310a:	1d 2d       	mov	r17, r13
    310c:	01 c0       	rjmp	.+2      	; 0x3110 <vfprintf+0x2d2>
    310e:	19 2d       	mov	r17, r9
    3110:	f4 fe       	sbrs	r15, 4
    3112:	0d c0       	rjmp	.+26     	; 0x312e <vfprintf+0x2f0>
    3114:	fe 01       	movw	r30, r28
    3116:	ed 0d       	add	r30, r13
    3118:	f1 1d       	adc	r31, r1
    311a:	80 81       	ld	r24, Z
    311c:	80 33       	cpi	r24, 0x30	; 48
    311e:	19 f4       	brne	.+6      	; 0x3126 <vfprintf+0x2e8>
    3120:	99 ee       	ldi	r25, 0xE9	; 233
    3122:	f9 22       	and	r15, r25
    3124:	08 c0       	rjmp	.+16     	; 0x3136 <vfprintf+0x2f8>
    3126:	1f 5f       	subi	r17, 0xFF	; 255
    3128:	f2 fe       	sbrs	r15, 2
    312a:	05 c0       	rjmp	.+10     	; 0x3136 <vfprintf+0x2f8>
    312c:	03 c0       	rjmp	.+6      	; 0x3134 <vfprintf+0x2f6>
    312e:	8f 2d       	mov	r24, r15
    3130:	86 78       	andi	r24, 0x86	; 134
    3132:	09 f0       	breq	.+2      	; 0x3136 <vfprintf+0x2f8>
    3134:	1f 5f       	subi	r17, 0xFF	; 255
    3136:	0f 2d       	mov	r16, r15
    3138:	f3 fc       	sbrc	r15, 3
    313a:	14 c0       	rjmp	.+40     	; 0x3164 <vfprintf+0x326>
    313c:	f0 fe       	sbrs	r15, 0
    313e:	0f c0       	rjmp	.+30     	; 0x315e <vfprintf+0x320>
    3140:	1e 15       	cp	r17, r14
    3142:	10 f0       	brcs	.+4      	; 0x3148 <vfprintf+0x30a>
    3144:	9d 2c       	mov	r9, r13
    3146:	0b c0       	rjmp	.+22     	; 0x315e <vfprintf+0x320>
    3148:	9d 2c       	mov	r9, r13
    314a:	9e 0c       	add	r9, r14
    314c:	91 1a       	sub	r9, r17
    314e:	1e 2d       	mov	r17, r14
    3150:	06 c0       	rjmp	.+12     	; 0x315e <vfprintf+0x320>
    3152:	80 e2       	ldi	r24, 0x20	; 32
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	b3 01       	movw	r22, r6
    3158:	0e 94 12 19 	call	0x3224	; 0x3224 <fputc>
    315c:	1f 5f       	subi	r17, 0xFF	; 255
    315e:	1e 15       	cp	r17, r14
    3160:	c0 f3       	brcs	.-16     	; 0x3152 <vfprintf+0x314>
    3162:	04 c0       	rjmp	.+8      	; 0x316c <vfprintf+0x32e>
    3164:	1e 15       	cp	r17, r14
    3166:	10 f4       	brcc	.+4      	; 0x316c <vfprintf+0x32e>
    3168:	e1 1a       	sub	r14, r17
    316a:	01 c0       	rjmp	.+2      	; 0x316e <vfprintf+0x330>
    316c:	ee 24       	eor	r14, r14
    316e:	04 ff       	sbrs	r16, 4
    3170:	0f c0       	rjmp	.+30     	; 0x3190 <vfprintf+0x352>
    3172:	80 e3       	ldi	r24, 0x30	; 48
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	b3 01       	movw	r22, r6
    3178:	0e 94 12 19 	call	0x3224	; 0x3224 <fputc>
    317c:	02 ff       	sbrs	r16, 2
    317e:	1d c0       	rjmp	.+58     	; 0x31ba <vfprintf+0x37c>
    3180:	01 fd       	sbrc	r16, 1
    3182:	03 c0       	rjmp	.+6      	; 0x318a <vfprintf+0x34c>
    3184:	88 e7       	ldi	r24, 0x78	; 120
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	0e c0       	rjmp	.+28     	; 0x31a6 <vfprintf+0x368>
    318a:	88 e5       	ldi	r24, 0x58	; 88
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	0b c0       	rjmp	.+22     	; 0x31a6 <vfprintf+0x368>
    3190:	80 2f       	mov	r24, r16
    3192:	86 78       	andi	r24, 0x86	; 134
    3194:	91 f0       	breq	.+36     	; 0x31ba <vfprintf+0x37c>
    3196:	01 ff       	sbrs	r16, 1
    3198:	02 c0       	rjmp	.+4      	; 0x319e <vfprintf+0x360>
    319a:	8b e2       	ldi	r24, 0x2B	; 43
    319c:	01 c0       	rjmp	.+2      	; 0x31a0 <vfprintf+0x362>
    319e:	80 e2       	ldi	r24, 0x20	; 32
    31a0:	f7 fc       	sbrc	r15, 7
    31a2:	8d e2       	ldi	r24, 0x2D	; 45
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	b3 01       	movw	r22, r6
    31a8:	0e 94 12 19 	call	0x3224	; 0x3224 <fputc>
    31ac:	06 c0       	rjmp	.+12     	; 0x31ba <vfprintf+0x37c>
    31ae:	80 e3       	ldi	r24, 0x30	; 48
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	b3 01       	movw	r22, r6
    31b4:	0e 94 12 19 	call	0x3224	; 0x3224 <fputc>
    31b8:	9a 94       	dec	r9
    31ba:	d9 14       	cp	r13, r9
    31bc:	c0 f3       	brcs	.-16     	; 0x31ae <vfprintf+0x370>
    31be:	da 94       	dec	r13
    31c0:	f1 01       	movw	r30, r2
    31c2:	ed 0d       	add	r30, r13
    31c4:	f1 1d       	adc	r31, r1
    31c6:	80 81       	ld	r24, Z
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	b3 01       	movw	r22, r6
    31cc:	0e 94 12 19 	call	0x3224	; 0x3224 <fputc>
    31d0:	dd 20       	and	r13, r13
    31d2:	a9 f7       	brne	.-22     	; 0x31be <vfprintf+0x380>
    31d4:	06 c0       	rjmp	.+12     	; 0x31e2 <vfprintf+0x3a4>
    31d6:	80 e2       	ldi	r24, 0x20	; 32
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	b3 01       	movw	r22, r6
    31dc:	0e 94 12 19 	call	0x3224	; 0x3224 <fputc>
    31e0:	ea 94       	dec	r14
    31e2:	ee 20       	and	r14, r14
    31e4:	c1 f7       	brne	.-16     	; 0x31d6 <vfprintf+0x398>
    31e6:	43 ce       	rjmp	.-890    	; 0x2e6e <vfprintf+0x30>
    31e8:	f3 01       	movw	r30, r6
    31ea:	66 81       	ldd	r22, Z+6	; 0x06
    31ec:	77 81       	ldd	r23, Z+7	; 0x07
    31ee:	cb 01       	movw	r24, r22
    31f0:	2b 96       	adiw	r28, 0x0b	; 11
    31f2:	e2 e1       	ldi	r30, 0x12	; 18
    31f4:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__>

000031f8 <strnlen_P>:
    31f8:	fc 01       	movw	r30, r24
    31fa:	05 90       	lpm	r0, Z+
    31fc:	61 50       	subi	r22, 0x01	; 1
    31fe:	70 40       	sbci	r23, 0x00	; 0
    3200:	01 10       	cpse	r0, r1
    3202:	d8 f7       	brcc	.-10     	; 0x31fa <strnlen_P+0x2>
    3204:	80 95       	com	r24
    3206:	90 95       	com	r25
    3208:	8e 0f       	add	r24, r30
    320a:	9f 1f       	adc	r25, r31
    320c:	08 95       	ret

0000320e <strnlen>:
    320e:	fc 01       	movw	r30, r24
    3210:	61 50       	subi	r22, 0x01	; 1
    3212:	70 40       	sbci	r23, 0x00	; 0
    3214:	01 90       	ld	r0, Z+
    3216:	01 10       	cpse	r0, r1
    3218:	d8 f7       	brcc	.-10     	; 0x3210 <strnlen+0x2>
    321a:	80 95       	com	r24
    321c:	90 95       	com	r25
    321e:	8e 0f       	add	r24, r30
    3220:	9f 1f       	adc	r25, r31
    3222:	08 95       	ret

00003224 <fputc>:
    3224:	0f 93       	push	r16
    3226:	1f 93       	push	r17
    3228:	cf 93       	push	r28
    322a:	df 93       	push	r29
    322c:	8c 01       	movw	r16, r24
    322e:	eb 01       	movw	r28, r22
    3230:	8b 81       	ldd	r24, Y+3	; 0x03
    3232:	81 ff       	sbrs	r24, 1
    3234:	1b c0       	rjmp	.+54     	; 0x326c <fputc+0x48>
    3236:	82 ff       	sbrs	r24, 2
    3238:	0d c0       	rjmp	.+26     	; 0x3254 <fputc+0x30>
    323a:	2e 81       	ldd	r18, Y+6	; 0x06
    323c:	3f 81       	ldd	r19, Y+7	; 0x07
    323e:	8c 81       	ldd	r24, Y+4	; 0x04
    3240:	9d 81       	ldd	r25, Y+5	; 0x05
    3242:	28 17       	cp	r18, r24
    3244:	39 07       	cpc	r19, r25
    3246:	64 f4       	brge	.+24     	; 0x3260 <fputc+0x3c>
    3248:	e8 81       	ld	r30, Y
    324a:	f9 81       	ldd	r31, Y+1	; 0x01
    324c:	01 93       	st	Z+, r16
    324e:	f9 83       	std	Y+1, r31	; 0x01
    3250:	e8 83       	st	Y, r30
    3252:	06 c0       	rjmp	.+12     	; 0x3260 <fputc+0x3c>
    3254:	e8 85       	ldd	r30, Y+8	; 0x08
    3256:	f9 85       	ldd	r31, Y+9	; 0x09
    3258:	80 2f       	mov	r24, r16
    325a:	09 95       	icall
    325c:	89 2b       	or	r24, r25
    325e:	31 f4       	brne	.+12     	; 0x326c <fputc+0x48>
    3260:	8e 81       	ldd	r24, Y+6	; 0x06
    3262:	9f 81       	ldd	r25, Y+7	; 0x07
    3264:	01 96       	adiw	r24, 0x01	; 1
    3266:	9f 83       	std	Y+7, r25	; 0x07
    3268:	8e 83       	std	Y+6, r24	; 0x06
    326a:	02 c0       	rjmp	.+4      	; 0x3270 <fputc+0x4c>
    326c:	0f ef       	ldi	r16, 0xFF	; 255
    326e:	1f ef       	ldi	r17, 0xFF	; 255
    3270:	c8 01       	movw	r24, r16
    3272:	df 91       	pop	r29
    3274:	cf 91       	pop	r28
    3276:	1f 91       	pop	r17
    3278:	0f 91       	pop	r16
    327a:	08 95       	ret

0000327c <__ultoa_invert>:
    327c:	fa 01       	movw	r30, r20
    327e:	aa 27       	eor	r26, r26
    3280:	28 30       	cpi	r18, 0x08	; 8
    3282:	51 f1       	breq	.+84     	; 0x32d8 <__ultoa_invert+0x5c>
    3284:	20 31       	cpi	r18, 0x10	; 16
    3286:	81 f1       	breq	.+96     	; 0x32e8 <__ultoa_invert+0x6c>
    3288:	e8 94       	clt
    328a:	6f 93       	push	r22
    328c:	6e 7f       	andi	r22, 0xFE	; 254
    328e:	6e 5f       	subi	r22, 0xFE	; 254
    3290:	7f 4f       	sbci	r23, 0xFF	; 255
    3292:	8f 4f       	sbci	r24, 0xFF	; 255
    3294:	9f 4f       	sbci	r25, 0xFF	; 255
    3296:	af 4f       	sbci	r26, 0xFF	; 255
    3298:	b1 e0       	ldi	r27, 0x01	; 1
    329a:	3e d0       	rcall	.+124    	; 0x3318 <__ultoa_invert+0x9c>
    329c:	b4 e0       	ldi	r27, 0x04	; 4
    329e:	3c d0       	rcall	.+120    	; 0x3318 <__ultoa_invert+0x9c>
    32a0:	67 0f       	add	r22, r23
    32a2:	78 1f       	adc	r23, r24
    32a4:	89 1f       	adc	r24, r25
    32a6:	9a 1f       	adc	r25, r26
    32a8:	a1 1d       	adc	r26, r1
    32aa:	68 0f       	add	r22, r24
    32ac:	79 1f       	adc	r23, r25
    32ae:	8a 1f       	adc	r24, r26
    32b0:	91 1d       	adc	r25, r1
    32b2:	a1 1d       	adc	r26, r1
    32b4:	6a 0f       	add	r22, r26
    32b6:	71 1d       	adc	r23, r1
    32b8:	81 1d       	adc	r24, r1
    32ba:	91 1d       	adc	r25, r1
    32bc:	a1 1d       	adc	r26, r1
    32be:	20 d0       	rcall	.+64     	; 0x3300 <__ultoa_invert+0x84>
    32c0:	09 f4       	brne	.+2      	; 0x32c4 <__ultoa_invert+0x48>
    32c2:	68 94       	set
    32c4:	3f 91       	pop	r19
    32c6:	2a e0       	ldi	r18, 0x0A	; 10
    32c8:	26 9f       	mul	r18, r22
    32ca:	11 24       	eor	r1, r1
    32cc:	30 19       	sub	r19, r0
    32ce:	30 5d       	subi	r19, 0xD0	; 208
    32d0:	31 93       	st	Z+, r19
    32d2:	de f6       	brtc	.-74     	; 0x328a <__ultoa_invert+0xe>
    32d4:	cf 01       	movw	r24, r30
    32d6:	08 95       	ret
    32d8:	46 2f       	mov	r20, r22
    32da:	47 70       	andi	r20, 0x07	; 7
    32dc:	40 5d       	subi	r20, 0xD0	; 208
    32de:	41 93       	st	Z+, r20
    32e0:	b3 e0       	ldi	r27, 0x03	; 3
    32e2:	0f d0       	rcall	.+30     	; 0x3302 <__ultoa_invert+0x86>
    32e4:	c9 f7       	brne	.-14     	; 0x32d8 <__ultoa_invert+0x5c>
    32e6:	f6 cf       	rjmp	.-20     	; 0x32d4 <__ultoa_invert+0x58>
    32e8:	46 2f       	mov	r20, r22
    32ea:	4f 70       	andi	r20, 0x0F	; 15
    32ec:	40 5d       	subi	r20, 0xD0	; 208
    32ee:	4a 33       	cpi	r20, 0x3A	; 58
    32f0:	18 f0       	brcs	.+6      	; 0x32f8 <__ultoa_invert+0x7c>
    32f2:	49 5d       	subi	r20, 0xD9	; 217
    32f4:	31 fd       	sbrc	r19, 1
    32f6:	40 52       	subi	r20, 0x20	; 32
    32f8:	41 93       	st	Z+, r20
    32fa:	02 d0       	rcall	.+4      	; 0x3300 <__ultoa_invert+0x84>
    32fc:	a9 f7       	brne	.-22     	; 0x32e8 <__ultoa_invert+0x6c>
    32fe:	ea cf       	rjmp	.-44     	; 0x32d4 <__ultoa_invert+0x58>
    3300:	b4 e0       	ldi	r27, 0x04	; 4
    3302:	a6 95       	lsr	r26
    3304:	97 95       	ror	r25
    3306:	87 95       	ror	r24
    3308:	77 95       	ror	r23
    330a:	67 95       	ror	r22
    330c:	ba 95       	dec	r27
    330e:	c9 f7       	brne	.-14     	; 0x3302 <__ultoa_invert+0x86>
    3310:	00 97       	sbiw	r24, 0x00	; 0
    3312:	61 05       	cpc	r22, r1
    3314:	71 05       	cpc	r23, r1
    3316:	08 95       	ret
    3318:	9b 01       	movw	r18, r22
    331a:	ac 01       	movw	r20, r24
    331c:	0a 2e       	mov	r0, r26
    331e:	06 94       	lsr	r0
    3320:	57 95       	ror	r21
    3322:	47 95       	ror	r20
    3324:	37 95       	ror	r19
    3326:	27 95       	ror	r18
    3328:	ba 95       	dec	r27
    332a:	c9 f7       	brne	.-14     	; 0x331e <__ultoa_invert+0xa2>
    332c:	62 0f       	add	r22, r18
    332e:	73 1f       	adc	r23, r19
    3330:	84 1f       	adc	r24, r20
    3332:	95 1f       	adc	r25, r21
    3334:	a0 1d       	adc	r26, r0
    3336:	08 95       	ret

00003338 <_exit>:
    3338:	f8 94       	cli

0000333a <__stop_program>:
    333a:	ff cf       	rjmp	.-2      	; 0x333a <__stop_program>
