
Oct20_Amit_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f0c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00002f0c  00002f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002ce8  00000000  00000000  0000309c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001a27  00000000  00000000  00005d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000077ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  0000794b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00007b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00009f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000b2ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000c4a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000c664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000c95a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__vector_10>
      2c:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__vector_11>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 4e 07 	call	0xe9c	; 0xe9c <main>
      7a:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 e6       	ldi	r22, 0x63	; 99
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e5 59       	subi	r30, 0x95	; 149
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <__vector_11>:
#define TIMER0_OCR0_REG				(*(u8*)0x5C)
#define TIMER0_TIMSK_REG			(*(u8*)0x59)
#define TIMER0_TIFR_REG				(*(u8*)0x58)

ISR(TIMER0_OVF_vect)
{
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	4f 93       	push	r20
     e2e:	5f 93       	push	r21
     e30:	6f 93       	push	r22
     e32:	7f 93       	push	r23
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
     e3c:	ef 93       	push	r30
     e3e:	ff 93       	push	r31
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
	/*	Take Your Action	*/
	SSD_viddisplyNum(12);
     e48:	8c e0       	ldi	r24, 0x0C	; 12
     e4a:	0e 94 92 07 	call	0xf24	; 0xf24 <SSD_viddisplyNum>
	TIMER0_TCNT0_REG = 7;
     e4e:	e2 e5       	ldi	r30, 0x52	; 82
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	87 e0       	ldi	r24, 0x07	; 7
     e54:	80 83       	st	Z, r24
	/* Re Set the preload value */

}
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	ff 91       	pop	r31
     e5c:	ef 91       	pop	r30
     e5e:	bf 91       	pop	r27
     e60:	af 91       	pop	r26
     e62:	9f 91       	pop	r25
     e64:	8f 91       	pop	r24
     e66:	7f 91       	pop	r23
     e68:	6f 91       	pop	r22
     e6a:	5f 91       	pop	r21
     e6c:	4f 91       	pop	r20
     e6e:	3f 91       	pop	r19
     e70:	2f 91       	pop	r18
     e72:	0f 90       	pop	r0
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	0f 90       	pop	r0
     e78:	1f 90       	pop	r1
     e7a:	18 95       	reti

00000e7c <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     e7c:	1f 92       	push	r1
     e7e:	0f 92       	push	r0
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62

}
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	0f 90       	pop	r0
     e98:	1f 90       	pop	r1
     e9a:	18 95       	reti

00000e9c <main>:

int main()
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
	SSD_vidinit();
     ea4:	0e 94 6d 07 	call	0xeda	; 0xeda <SSD_vidinit>
	Led_vidledInit();
     ea8:	0e 94 8d 09 	call	0x131a	; 0x131a <Led_vidledInit>
	Button_vidbuttonInit();
     eac:	0e 94 61 10 	call	0x20c2	; 0x20c2 <Button_vidbuttonInit>
	GINT_vidEnableAllInterrupts();
     eb0:	0e 94 ba 10 	call	0x2174	; 0x2174 <GINT_vidEnableAllInterrupts>
	/*	Enable Overflow interrupt	*/
	SET_BIT(TIMER0_TIMSK_REG,0);
     eb4:	a9 e5       	ldi	r26, 0x59	; 89
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e9 e5       	ldi	r30, 0x59	; 89
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	81 60       	ori	r24, 0x01	; 1
     ec0:	8c 93       	st	X, r24
	/*	set preload	*/
	TIMER0_TCNT0_REG = 7;
     ec2:	e2 e5       	ldi	r30, 0x52	; 82
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	87 e0       	ldi	r24, 0x07	; 7
     ec8:	80 83       	st	Z, r24
	/*	Set Prescaler	*/
	TIMER0_TCCR0_REG|=3;
     eca:	a3 e5       	ldi	r26, 0x53	; 83
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e3 e5       	ldi	r30, 0x53	; 83
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	83 60       	ori	r24, 0x03	; 3
     ed6:	8c 93       	st	X, r24
     ed8:	ff cf       	rjmp	.-2      	; 0xed8 <main+0x3c>

00000eda <SSD_vidinit>:
#include "SSD.h"
#include "Dio.h"
#include <util/delay.h>

void SSD_vidinit(void)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	41 e0       	ldi	r20, 0x01	; 1
     ee8:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	62 e0       	ldi	r22, 0x02	; 2
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>

	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	64 e0       	ldi	r22, 0x04	; 4
     efa:	41 e0       	ldi	r20, 0x01	; 1
     efc:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	65 e0       	ldi	r22, 0x05	; 5
     f04:	41 e0       	ldi	r20, 0x01	; 1
     f06:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	66 e0       	ldi	r22, 0x06	; 6
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	67 e0       	ldi	r22, 0x07	; 7
     f18:	41 e0       	ldi	r20, 0x01	; 1
     f1a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <SSD_viddisplyNum>:

void SSD_viddisplyNum(u8 num)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	e3 97       	sbiw	r28, 0x33	; 51
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	8b ab       	std	Y+51, r24	; 0x33
	u8 loc_secondDigit =  (num%10)<<4;
     f3a:	8b a9       	ldd	r24, Y+51	; 0x33
     f3c:	9a e0       	ldi	r25, 0x0A	; 10
     f3e:	69 2f       	mov	r22, r25
     f40:	0e 94 a0 14 	call	0x2940	; 0x2940 <__udivmodqi4>
     f44:	89 2f       	mov	r24, r25
     f46:	82 95       	swap	r24
     f48:	80 7f       	andi	r24, 0xF0	; 240
     f4a:	8a ab       	std	Y+50, r24	; 0x32
	u8 loc_firstDigit = (num/10)<<4;
     f4c:	8b a9       	ldd	r24, Y+51	; 0x33
     f4e:	9a e0       	ldi	r25, 0x0A	; 10
     f50:	69 2f       	mov	r22, r25
     f52:	0e 94 a0 14 	call	0x2940	; 0x2940 <__udivmodqi4>
     f56:	82 95       	swap	r24
     f58:	80 7f       	andi	r24, 0xF0	; 240
     f5a:	89 ab       	std	Y+49, r24	; 0x31

	/* Enable SSD 1	-> EN1 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_HIGH);
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	62 e0       	ldi	r22, 0x02	; 2
     f60:	41 e0       	ldi	r20, 0x01	; 1
     f62:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
	/* Disable SSD 2 -> EN2 =Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
	/* Write first digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_firstDigit, SSD_MASK);
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	69 a9       	ldd	r22, Y+49	; 0x31
     f74:	4f e0       	ldi	r20, 0x0F	; 15
     f76:	0e 94 a8 12 	call	0x2550	; 0x2550 <Dio_vidWriteChanelGroup>
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a8 ec       	ldi	r26, 0xC8	; 200
     f80:	b2 e4       	ldi	r27, 0x42	; 66
     f82:	8d a7       	std	Y+45, r24	; 0x2d
     f84:	9e a7       	std	Y+46, r25	; 0x2e
     f86:	af a7       	std	Y+47, r26	; 0x2f
     f88:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f8a:	6d a5       	ldd	r22, Y+45	; 0x2d
     f8c:	7e a5       	ldd	r23, Y+46	; 0x2e
     f8e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f90:	98 a9       	ldd	r25, Y+48	; 0x30
     f92:	2b ea       	ldi	r18, 0xAB	; 171
     f94:	3a ea       	ldi	r19, 0xAA	; 170
     f96:	4a ea       	ldi	r20, 0xAA	; 170
     f98:	50 e4       	ldi	r21, 0x40	; 64
     f9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	89 a7       	std	Y+41, r24	; 0x29
     fa4:	9a a7       	std	Y+42, r25	; 0x2a
     fa6:	ab a7       	std	Y+43, r26	; 0x2b
     fa8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     faa:	69 a5       	ldd	r22, Y+41	; 0x29
     fac:	7a a5       	ldd	r23, Y+42	; 0x2a
     fae:	8b a5       	ldd	r24, Y+43	; 0x2b
     fb0:	9c a5       	ldd	r25, Y+44	; 0x2c
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	1c f4       	brge	.+6      	; 0xfc8 <SSD_viddisplyNum+0xa4>
		__ticks = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	88 a7       	std	Y+40, r24	; 0x28
     fc6:	91 c0       	rjmp	.+290    	; 0x10ea <SSD_viddisplyNum+0x1c6>
	else if (__tmp > 255)
     fc8:	69 a5       	ldd	r22, Y+41	; 0x29
     fca:	7a a5       	ldd	r23, Y+42	; 0x2a
     fcc:	8b a5       	ldd	r24, Y+43	; 0x2b
     fce:	9c a5       	ldd	r25, Y+44	; 0x2c
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	4f e7       	ldi	r20, 0x7F	; 127
     fd6:	53 e4       	ldi	r21, 0x43	; 67
     fd8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fdc:	18 16       	cp	r1, r24
     fde:	0c f0       	brlt	.+2      	; 0xfe2 <SSD_viddisplyNum+0xbe>
     fe0:	7b c0       	rjmp	.+246    	; 0x10d8 <SSD_viddisplyNum+0x1b4>
	{
		_delay_ms(__us / 1000.0);
     fe2:	6d a5       	ldd	r22, Y+45	; 0x2d
     fe4:	7e a5       	ldd	r23, Y+46	; 0x2e
     fe6:	8f a5       	ldd	r24, Y+47	; 0x2f
     fe8:	98 a9       	ldd	r25, Y+48	; 0x30
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	4a e7       	ldi	r20, 0x7A	; 122
     ff0:	54 e4       	ldi	r21, 0x44	; 68
     ff2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	8c a3       	std	Y+36, r24	; 0x24
     ffc:	9d a3       	std	Y+37, r25	; 0x25
     ffe:	ae a3       	std	Y+38, r26	; 0x26
    1000:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1002:	6c a1       	ldd	r22, Y+36	; 0x24
    1004:	7d a1       	ldd	r23, Y+37	; 0x25
    1006:	8e a1       	ldd	r24, Y+38	; 0x26
    1008:	9f a1       	ldd	r25, Y+39	; 0x27
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	4a e7       	ldi	r20, 0x7A	; 122
    1010:	55 e4       	ldi	r21, 0x45	; 69
    1012:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	88 a3       	std	Y+32, r24	; 0x20
    101c:	99 a3       	std	Y+33, r25	; 0x21
    101e:	aa a3       	std	Y+34, r26	; 0x22
    1020:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1022:	68 a1       	ldd	r22, Y+32	; 0x20
    1024:	79 a1       	ldd	r23, Y+33	; 0x21
    1026:	8a a1       	ldd	r24, Y+34	; 0x22
    1028:	9b a1       	ldd	r25, Y+35	; 0x23
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e8       	ldi	r20, 0x80	; 128
    1030:	5f e3       	ldi	r21, 0x3F	; 63
    1032:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1036:	88 23       	and	r24, r24
    1038:	2c f4       	brge	.+10     	; 0x1044 <SSD_viddisplyNum+0x120>
		__ticks = 1;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9f 8f       	std	Y+31, r25	; 0x1f
    1040:	8e 8f       	std	Y+30, r24	; 0x1e
    1042:	3f c0       	rjmp	.+126    	; 0x10c2 <SSD_viddisplyNum+0x19e>
	else if (__tmp > 65535)
    1044:	68 a1       	ldd	r22, Y+32	; 0x20
    1046:	79 a1       	ldd	r23, Y+33	; 0x21
    1048:	8a a1       	ldd	r24, Y+34	; 0x22
    104a:	9b a1       	ldd	r25, Y+35	; 0x23
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	3f ef       	ldi	r19, 0xFF	; 255
    1050:	4f e7       	ldi	r20, 0x7F	; 127
    1052:	57 e4       	ldi	r21, 0x47	; 71
    1054:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1058:	18 16       	cp	r1, r24
    105a:	4c f5       	brge	.+82     	; 0x10ae <SSD_viddisplyNum+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105c:	6c a1       	ldd	r22, Y+36	; 0x24
    105e:	7d a1       	ldd	r23, Y+37	; 0x25
    1060:	8e a1       	ldd	r24, Y+38	; 0x26
    1062:	9f a1       	ldd	r25, Y+39	; 0x27
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	40 e2       	ldi	r20, 0x20	; 32
    106a:	51 e4       	ldi	r21, 0x41	; 65
    106c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	9f 8f       	std	Y+31, r25	; 0x1f
    1082:	8e 8f       	std	Y+30, r24	; 0x1e
    1084:	0f c0       	rjmp	.+30     	; 0x10a4 <SSD_viddisplyNum+0x180>
    1086:	80 e9       	ldi	r24, 0x90	; 144
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	9d 8f       	std	Y+29, r25	; 0x1d
    108c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    108e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1090:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <SSD_viddisplyNum+0x16e>
    1096:	9d 8f       	std	Y+29, r25	; 0x1d
    1098:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    109c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	9f 8f       	std	Y+31, r25	; 0x1f
    10a2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	69 f7       	brne	.-38     	; 0x1086 <SSD_viddisplyNum+0x162>
    10ac:	24 c0       	rjmp	.+72     	; 0x10f6 <SSD_viddisplyNum+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ae:	68 a1       	ldd	r22, Y+32	; 0x20
    10b0:	79 a1       	ldd	r23, Y+33	; 0x21
    10b2:	8a a1       	ldd	r24, Y+34	; 0x22
    10b4:	9b a1       	ldd	r25, Y+35	; 0x23
    10b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	9f 8f       	std	Y+31, r25	; 0x1f
    10c0:	8e 8f       	std	Y+30, r24	; 0x1e
    10c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10c6:	9b 8f       	std	Y+27, r25	; 0x1b
    10c8:	8a 8f       	std	Y+26, r24	; 0x1a
    10ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <SSD_viddisplyNum+0x1aa>
    10d2:	9b 8f       	std	Y+27, r25	; 0x1b
    10d4:	8a 8f       	std	Y+26, r24	; 0x1a
    10d6:	0f c0       	rjmp	.+30     	; 0x10f6 <SSD_viddisplyNum+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    10d8:	69 a5       	ldd	r22, Y+41	; 0x29
    10da:	7a a5       	ldd	r23, Y+42	; 0x2a
    10dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    10de:	9c a5       	ldd	r25, Y+44	; 0x2c
    10e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	88 a7       	std	Y+40, r24	; 0x28
    10ea:	88 a5       	ldd	r24, Y+40	; 0x28
    10ec:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10ee:	89 8d       	ldd	r24, Y+25	; 0x19
    10f0:	8a 95       	dec	r24
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <SSD_viddisplyNum+0x1cc>
    10f4:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(100);

	/* Disable SSD 1	-> EN1 = Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	62 e0       	ldi	r22, 0x02	; 2
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
	/* Enable SSD 2 -> EN2 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	41 e0       	ldi	r20, 0x01	; 1
    1106:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
	/* Write second digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_secondDigit, SSD_MASK);
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	6a a9       	ldd	r22, Y+50	; 0x32
    110e:	4f e0       	ldi	r20, 0x0F	; 15
    1110:	0e 94 a8 12 	call	0x2550	; 0x2550 <Dio_vidWriteChanelGroup>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a8 ec       	ldi	r26, 0xC8	; 200
    111a:	b2 e4       	ldi	r27, 0x42	; 66
    111c:	8d 8b       	std	Y+21, r24	; 0x15
    111e:	9e 8b       	std	Y+22, r25	; 0x16
    1120:	af 8b       	std	Y+23, r26	; 0x17
    1122:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1124:	6d 89       	ldd	r22, Y+21	; 0x15
    1126:	7e 89       	ldd	r23, Y+22	; 0x16
    1128:	8f 89       	ldd	r24, Y+23	; 0x17
    112a:	98 8d       	ldd	r25, Y+24	; 0x18
    112c:	2b ea       	ldi	r18, 0xAB	; 171
    112e:	3a ea       	ldi	r19, 0xAA	; 170
    1130:	4a ea       	ldi	r20, 0xAA	; 170
    1132:	50 e4       	ldi	r21, 0x40	; 64
    1134:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	89 8b       	std	Y+17, r24	; 0x11
    113e:	9a 8b       	std	Y+18, r25	; 0x12
    1140:	ab 8b       	std	Y+19, r26	; 0x13
    1142:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1144:	69 89       	ldd	r22, Y+17	; 0x11
    1146:	7a 89       	ldd	r23, Y+18	; 0x12
    1148:	8b 89       	ldd	r24, Y+19	; 0x13
    114a:	9c 89       	ldd	r25, Y+20	; 0x14
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e8       	ldi	r20, 0x80	; 128
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1158:	88 23       	and	r24, r24
    115a:	1c f4       	brge	.+6      	; 0x1162 <SSD_viddisplyNum+0x23e>
		__ticks = 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	88 8b       	std	Y+16, r24	; 0x10
    1160:	91 c0       	rjmp	.+290    	; 0x1284 <SSD_viddisplyNum+0x360>
	else if (__tmp > 255)
    1162:	69 89       	ldd	r22, Y+17	; 0x11
    1164:	7a 89       	ldd	r23, Y+18	; 0x12
    1166:	8b 89       	ldd	r24, Y+19	; 0x13
    1168:	9c 89       	ldd	r25, Y+20	; 0x14
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	4f e7       	ldi	r20, 0x7F	; 127
    1170:	53 e4       	ldi	r21, 0x43	; 67
    1172:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1176:	18 16       	cp	r1, r24
    1178:	0c f0       	brlt	.+2      	; 0x117c <SSD_viddisplyNum+0x258>
    117a:	7b c0       	rjmp	.+246    	; 0x1272 <SSD_viddisplyNum+0x34e>
	{
		_delay_ms(__us / 1000.0);
    117c:	6d 89       	ldd	r22, Y+21	; 0x15
    117e:	7e 89       	ldd	r23, Y+22	; 0x16
    1180:	8f 89       	ldd	r24, Y+23	; 0x17
    1182:	98 8d       	ldd	r25, Y+24	; 0x18
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	4a e7       	ldi	r20, 0x7A	; 122
    118a:	54 e4       	ldi	r21, 0x44	; 68
    118c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	8c 87       	std	Y+12, r24	; 0x0c
    1196:	9d 87       	std	Y+13, r25	; 0x0d
    1198:	ae 87       	std	Y+14, r26	; 0x0e
    119a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    119c:	6c 85       	ldd	r22, Y+12	; 0x0c
    119e:	7d 85       	ldd	r23, Y+13	; 0x0d
    11a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    11a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	4a e7       	ldi	r20, 0x7A	; 122
    11aa:	55 e4       	ldi	r21, 0x45	; 69
    11ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	88 87       	std	Y+8, r24	; 0x08
    11b6:	99 87       	std	Y+9, r25	; 0x09
    11b8:	aa 87       	std	Y+10, r26	; 0x0a
    11ba:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    11bc:	68 85       	ldd	r22, Y+8	; 0x08
    11be:	79 85       	ldd	r23, Y+9	; 0x09
    11c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    11c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e8       	ldi	r20, 0x80	; 128
    11ca:	5f e3       	ldi	r21, 0x3F	; 63
    11cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11d0:	88 23       	and	r24, r24
    11d2:	2c f4       	brge	.+10     	; 0x11de <SSD_viddisplyNum+0x2ba>
		__ticks = 1;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9f 83       	std	Y+7, r25	; 0x07
    11da:	8e 83       	std	Y+6, r24	; 0x06
    11dc:	3f c0       	rjmp	.+126    	; 0x125c <SSD_viddisplyNum+0x338>
	else if (__tmp > 65535)
    11de:	68 85       	ldd	r22, Y+8	; 0x08
    11e0:	79 85       	ldd	r23, Y+9	; 0x09
    11e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    11e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	3f ef       	ldi	r19, 0xFF	; 255
    11ea:	4f e7       	ldi	r20, 0x7F	; 127
    11ec:	57 e4       	ldi	r21, 0x47	; 71
    11ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11f2:	18 16       	cp	r1, r24
    11f4:	4c f5       	brge	.+82     	; 0x1248 <SSD_viddisplyNum+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    11f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    11fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    11fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e2       	ldi	r20, 0x20	; 32
    1204:	51 e4       	ldi	r21, 0x41	; 65
    1206:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	bc 01       	movw	r22, r24
    1210:	cd 01       	movw	r24, r26
    1212:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	9f 83       	std	Y+7, r25	; 0x07
    121c:	8e 83       	std	Y+6, r24	; 0x06
    121e:	0f c0       	rjmp	.+30     	; 0x123e <SSD_viddisplyNum+0x31a>
    1220:	80 e9       	ldi	r24, 0x90	; 144
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	9d 83       	std	Y+5, r25	; 0x05
    1226:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <SSD_viddisplyNum+0x308>
    1230:	9d 83       	std	Y+5, r25	; 0x05
    1232:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1234:	8e 81       	ldd	r24, Y+6	; 0x06
    1236:	9f 81       	ldd	r25, Y+7	; 0x07
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	9f 83       	std	Y+7, r25	; 0x07
    123c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123e:	8e 81       	ldd	r24, Y+6	; 0x06
    1240:	9f 81       	ldd	r25, Y+7	; 0x07
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	69 f7       	brne	.-38     	; 0x1220 <SSD_viddisplyNum+0x2fc>
    1246:	24 c0       	rjmp	.+72     	; 0x1290 <SSD_viddisplyNum+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1248:	68 85       	ldd	r22, Y+8	; 0x08
    124a:	79 85       	ldd	r23, Y+9	; 0x09
    124c:	8a 85       	ldd	r24, Y+10	; 0x0a
    124e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1250:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	9f 83       	std	Y+7, r25	; 0x07
    125a:	8e 83       	std	Y+6, r24	; 0x06
    125c:	8e 81       	ldd	r24, Y+6	; 0x06
    125e:	9f 81       	ldd	r25, Y+7	; 0x07
    1260:	9b 83       	std	Y+3, r25	; 0x03
    1262:	8a 83       	std	Y+2, r24	; 0x02
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	9b 81       	ldd	r25, Y+3	; 0x03
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <SSD_viddisplyNum+0x344>
    126c:	9b 83       	std	Y+3, r25	; 0x03
    126e:	8a 83       	std	Y+2, r24	; 0x02
    1270:	0f c0       	rjmp	.+30     	; 0x1290 <SSD_viddisplyNum+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1272:	69 89       	ldd	r22, Y+17	; 0x11
    1274:	7a 89       	ldd	r23, Y+18	; 0x12
    1276:	8b 89       	ldd	r24, Y+19	; 0x13
    1278:	9c 89       	ldd	r25, Y+20	; 0x14
    127a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	88 8b       	std	Y+16, r24	; 0x10
    1284:	88 89       	ldd	r24, Y+16	; 0x10
    1286:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	8a 95       	dec	r24
    128c:	f1 f7       	brne	.-4      	; 0x128a <SSD_viddisplyNum+0x366>
    128e:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(100);
}
    1290:	e3 96       	adiw	r28, 0x33	; 51
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <SSD_vidDelayWithDisply_ms>:

void SSD_vidDelayWithDisply_ms(u8 num,u32 delay)
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	29 97       	sbiw	r28, 0x09	; 9
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	8d 83       	std	Y+5, r24	; 0x05
    12b8:	4e 83       	std	Y+6, r20	; 0x06
    12ba:	5f 83       	std	Y+7, r21	; 0x07
    12bc:	68 87       	std	Y+8, r22	; 0x08
    12be:	79 87       	std	Y+9, r23	; 0x09
	u32 cnt=0;
    12c0:	19 82       	std	Y+1, r1	; 0x01
    12c2:	1a 82       	std	Y+2, r1	; 0x02
    12c4:	1b 82       	std	Y+3, r1	; 0x03
    12c6:	1c 82       	std	Y+4, r1	; 0x04
	for (cnt=0; cnt<delay; cnt++)
    12c8:	19 82       	std	Y+1, r1	; 0x01
    12ca:	1a 82       	std	Y+2, r1	; 0x02
    12cc:	1b 82       	std	Y+3, r1	; 0x03
    12ce:	1c 82       	std	Y+4, r1	; 0x04
    12d0:	0e c0       	rjmp	.+28     	; 0x12ee <SSD_vidDelayWithDisply_ms+0x4c>
		 {
			 SSD_viddisplyNum(num);
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	0e 94 92 07 	call	0xf24	; 0xf24 <SSD_viddisplyNum>
}

void SSD_vidDelayWithDisply_ms(u8 num,u32 delay)
{
	u32 cnt=0;
	for (cnt=0; cnt<delay; cnt++)
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	9a 81       	ldd	r25, Y+2	; 0x02
    12dc:	ab 81       	ldd	r26, Y+3	; 0x03
    12de:	bc 81       	ldd	r27, Y+4	; 0x04
    12e0:	01 96       	adiw	r24, 0x01	; 1
    12e2:	a1 1d       	adc	r26, r1
    12e4:	b1 1d       	adc	r27, r1
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	9a 83       	std	Y+2, r25	; 0x02
    12ea:	ab 83       	std	Y+3, r26	; 0x03
    12ec:	bc 83       	std	Y+4, r27	; 0x04
    12ee:	29 81       	ldd	r18, Y+1	; 0x01
    12f0:	3a 81       	ldd	r19, Y+2	; 0x02
    12f2:	4b 81       	ldd	r20, Y+3	; 0x03
    12f4:	5c 81       	ldd	r21, Y+4	; 0x04
    12f6:	8e 81       	ldd	r24, Y+6	; 0x06
    12f8:	9f 81       	ldd	r25, Y+7	; 0x07
    12fa:	a8 85       	ldd	r26, Y+8	; 0x08
    12fc:	b9 85       	ldd	r27, Y+9	; 0x09
    12fe:	28 17       	cp	r18, r24
    1300:	39 07       	cpc	r19, r25
    1302:	4a 07       	cpc	r20, r26
    1304:	5b 07       	cpc	r21, r27
    1306:	28 f3       	brcs	.-54     	; 0x12d2 <SSD_vidDelayWithDisply_ms+0x30>
		 {
			 SSD_viddisplyNum(num);
		 }
}
    1308:	29 96       	adiw	r28, 0x09	; 9
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <Led_vidledInit>:
#include "Led.h"
#include "Dio.h"


void Led_vidledInit(void)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_OUTPUT);
    1322:	82 e0       	ldi	r24, 0x02	; 2
    1324:	62 e0       	ldi	r22, 0x02	; 2
    1326:	41 e0       	ldi	r20, 0x01	; 1
    1328:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	67 e0       	ldi	r22, 0x07	; 7
    1330:	41 e0       	ldi	r20, 0x01	; 1
    1332:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN3, DIO_OUTPUT);
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	63 e0       	ldi	r22, 0x03	; 3
    133a:	41 e0       	ldi	r20, 0x01	; 1
    133c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <Led_vidledOn>:

void Led_vidledOn(led_ledId_t led)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <Led_vidledOn+0x6>
    134c:	0f 92       	push	r0
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	3b 83       	std	Y+3, r19	; 0x03
    135c:	2a 83       	std	Y+2, r18	; 0x02
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	9b 81       	ldd	r25, Y+3	; 0x03
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	91 05       	cpc	r25, r1
    1366:	79 f0       	breq	.+30     	; 0x1386 <Led_vidledOn+0x40>
    1368:	2a 81       	ldd	r18, Y+2	; 0x02
    136a:	3b 81       	ldd	r19, Y+3	; 0x03
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	81 f0       	breq	.+32     	; 0x1392 <Led_vidledOn+0x4c>
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	9b 81       	ldd	r25, Y+3	; 0x03
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	89 f4       	brne	.+34     	; 0x139c <Led_vidledOn+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	62 e0       	ldi	r22, 0x02	; 2
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
    1384:	0b c0       	rjmp	.+22     	; 0x139c <Led_vidledOn+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1386:	82 e0       	ldi	r24, 0x02	; 2
    1388:	67 e0       	ldi	r22, 0x07	; 7
    138a:	41 e0       	ldi	r20, 0x01	; 1
    138c:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
    1390:	05 c0       	rjmp	.+10     	; 0x139c <Led_vidledOn+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	63 e0       	ldi	r22, 0x03	; 3
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
		break;
	}
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <Led_vidledOff>:

void Led_vidledOff(led_ledId_t led)
{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <Led_vidledOff+0x6>
    13ae:	0f 92       	push	r0
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	3b 83       	std	Y+3, r19	; 0x03
    13be:	2a 83       	std	Y+2, r18	; 0x02
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	9b 81       	ldd	r25, Y+3	; 0x03
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	91 05       	cpc	r25, r1
    13c8:	79 f0       	breq	.+30     	; 0x13e8 <Led_vidledOff+0x40>
    13ca:	2a 81       	ldd	r18, Y+2	; 0x02
    13cc:	3b 81       	ldd	r19, Y+3	; 0x03
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	81 f0       	breq	.+32     	; 0x13f4 <Led_vidledOff+0x4c>
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	9b 81       	ldd	r25, Y+3	; 0x03
    13d8:	00 97       	sbiw	r24, 0x00	; 0
    13da:	89 f4       	brne	.+34     	; 0x13fe <Led_vidledOff+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	62 e0       	ldi	r22, 0x02	; 2
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
    13e6:	0b c0       	rjmp	.+22     	; 0x13fe <Led_vidledOff+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	67 e0       	ldi	r22, 0x07	; 7
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <Led_vidledOff+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	63 e0       	ldi	r22, 0x03	; 3
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
		break;
	}
}
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <Led_vidledToggle>:

void Led_vidledToggle(led_ledId_t ledId)
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	00 d0       	rcall	.+0      	; 0x1410 <Led_vidledToggle+0x6>
    1410:	0f 92       	push	r0
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	3b 83       	std	Y+3, r19	; 0x03
    1420:	2a 83       	std	Y+2, r18	; 0x02
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	9b 81       	ldd	r25, Y+3	; 0x03
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	91 05       	cpc	r25, r1
    142a:	71 f0       	breq	.+28     	; 0x1448 <Led_vidledToggle+0x3e>
    142c:	2a 81       	ldd	r18, Y+2	; 0x02
    142e:	3b 81       	ldd	r19, Y+3	; 0x03
    1430:	22 30       	cpi	r18, 0x02	; 2
    1432:	31 05       	cpc	r19, r1
    1434:	71 f0       	breq	.+28     	; 0x1452 <Led_vidledToggle+0x48>
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	9b 81       	ldd	r25, Y+3	; 0x03
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	71 f4       	brne	.+28     	; 0x145a <Led_vidledToggle+0x50>
	{
	case LED0:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN2);
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	62 e0       	ldi	r22, 0x02	; 2
    1442:	0e 94 97 13 	call	0x272e	; 0x272e <Dio_vidflipChanel>
    1446:	09 c0       	rjmp	.+18     	; 0x145a <Led_vidledToggle+0x50>
		break;

	case LED1:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN7);
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	67 e0       	ldi	r22, 0x07	; 7
    144c:	0e 94 97 13 	call	0x272e	; 0x272e <Dio_vidflipChanel>
    1450:	04 c0       	rjmp	.+8      	; 0x145a <Led_vidledToggle+0x50>
		break;

	case LED2:
		Dio_vidflipChanel(DIO_PORTD, DIO_PIN3);
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	63 e0       	ldi	r22, 0x03	; 3
    1456:	0e 94 97 13 	call	0x272e	; 0x272e <Dio_vidflipChanel>
		break;
	}
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <Lm35_vidInit>:

#include "Std_Types.h"
#include "Adc.h"

void Lm35_vidInit(void)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	Adc_vidInit();
    146e:	0e 94 14 14 	call	0x2828	; 0x2828 <Adc_vidInit>
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <Lm35_u8TempRead>:
u16 Lm35_u8TempRead(void)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <Lm35_u8TempRead+0x6>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <Lm35_u8TempRead+0x8>
    1480:	00 d0       	rcall	.+0      	; 0x1482 <Lm35_u8TempRead+0xa>
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	f64 loc_adcRead = 0;
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a0 e0       	ldi	r26, 0x00	; 0
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	8b 83       	std	Y+3, r24	; 0x03
    1490:	9c 83       	std	Y+4, r25	; 0x04
    1492:	ad 83       	std	Y+5, r26	; 0x05
    1494:	be 83       	std	Y+6, r27	; 0x06
	u16 loc_temp = 0;
    1496:	1a 82       	std	Y+2, r1	; 0x02
    1498:	19 82       	std	Y+1, r1	; 0x01

	loc_adcRead = Adc_u16AdcRead(ADC_CHANNEL1);
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	0e 94 30 14 	call	0x2860	; 0x2860 <Adc_u16AdcRead>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8b 83       	std	Y+3, r24	; 0x03
    14a6:	9c 83       	std	Y+4, r25	; 0x04
    14a8:	ad 83       	std	Y+5, r26	; 0x05
    14aa:	be 83       	std	Y+6, r27	; 0x06
	loc_temp = loc_adcRead/10;
    14ac:	6b 81       	ldd	r22, Y+3	; 0x03
    14ae:	7c 81       	ldd	r23, Y+4	; 0x04
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e2       	ldi	r20, 0x20	; 32
    14ba:	51 e4       	ldi	r21, 0x41	; 65
    14bc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	89 83       	std	Y+1, r24	; 0x01

	return loc_temp;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    14d8:	26 96       	adiw	r28, 0x06	; 6
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <Lcd_vidinit>:
#include "util/delay.h"
#include <stdio.h>


void Lcd_vidinit(void)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	e4 97       	sbiw	r28, 0x34	; 52
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
	/*	configure control pins as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	41 e0       	ldi	r20, 0x01	; 1
    1504:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	62 e0       	ldi	r22, 0x02	; 2
    150c:	41 e0       	ldi	r20, 0x01	; 1
    150e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	63 e0       	ldi	r22, 0x03	; 3
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>

	/*	configure data pins as output	*/
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	64 e0       	ldi	r22, 0x04	; 4
    1520:	41 e0       	ldi	r20, 0x01	; 1
    1522:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	65 e0       	ldi	r22, 0x05	; 5
    152a:	41 e0       	ldi	r20, 0x01	; 1
    152c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	66 e0       	ldi	r22, 0x06	; 6
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	67 e0       	ldi	r22, 0x07	; 7
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>

	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	62 e0       	ldi	r22, 0x02	; 2
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a0 e7       	ldi	r26, 0x70	; 112
    1554:	b1 e4       	ldi	r27, 0x41	; 65
    1556:	89 ab       	std	Y+49, r24	; 0x31
    1558:	9a ab       	std	Y+50, r25	; 0x32
    155a:	ab ab       	std	Y+51, r26	; 0x33
    155c:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155e:	69 a9       	ldd	r22, Y+49	; 0x31
    1560:	7a a9       	ldd	r23, Y+50	; 0x32
    1562:	8b a9       	ldd	r24, Y+51	; 0x33
    1564:	9c a9       	ldd	r25, Y+52	; 0x34
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	4a e7       	ldi	r20, 0x7A	; 122
    156c:	55 e4       	ldi	r21, 0x45	; 69
    156e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	8d a7       	std	Y+45, r24	; 0x2d
    1578:	9e a7       	std	Y+46, r25	; 0x2e
    157a:	af a7       	std	Y+47, r26	; 0x2f
    157c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    157e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1580:	7e a5       	ldd	r23, Y+46	; 0x2e
    1582:	8f a5       	ldd	r24, Y+47	; 0x2f
    1584:	98 a9       	ldd	r25, Y+48	; 0x30
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e8       	ldi	r20, 0x80	; 128
    158c:	5f e3       	ldi	r21, 0x3F	; 63
    158e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1592:	88 23       	and	r24, r24
    1594:	2c f4       	brge	.+10     	; 0x15a0 <Lcd_vidinit+0xb6>
		__ticks = 1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	9c a7       	std	Y+44, r25	; 0x2c
    159c:	8b a7       	std	Y+43, r24	; 0x2b
    159e:	3f c0       	rjmp	.+126    	; 0x161e <Lcd_vidinit+0x134>
	else if (__tmp > 65535)
    15a0:	6d a5       	ldd	r22, Y+45	; 0x2d
    15a2:	7e a5       	ldd	r23, Y+46	; 0x2e
    15a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a6:	98 a9       	ldd	r25, Y+48	; 0x30
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	3f ef       	ldi	r19, 0xFF	; 255
    15ac:	4f e7       	ldi	r20, 0x7F	; 127
    15ae:	57 e4       	ldi	r21, 0x47	; 71
    15b0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15b4:	18 16       	cp	r1, r24
    15b6:	4c f5       	brge	.+82     	; 0x160a <Lcd_vidinit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b8:	69 a9       	ldd	r22, Y+49	; 0x31
    15ba:	7a a9       	ldd	r23, Y+50	; 0x32
    15bc:	8b a9       	ldd	r24, Y+51	; 0x33
    15be:	9c a9       	ldd	r25, Y+52	; 0x34
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e2       	ldi	r20, 0x20	; 32
    15c6:	51 e4       	ldi	r21, 0x41	; 65
    15c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	bc 01       	movw	r22, r24
    15d2:	cd 01       	movw	r24, r26
    15d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	9c a7       	std	Y+44, r25	; 0x2c
    15de:	8b a7       	std	Y+43, r24	; 0x2b
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <Lcd_vidinit+0x116>
    15e2:	80 e9       	ldi	r24, 0x90	; 144
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	9a a7       	std	Y+42, r25	; 0x2a
    15e8:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15ea:	89 a5       	ldd	r24, Y+41	; 0x29
    15ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <Lcd_vidinit+0x104>
    15f2:	9a a7       	std	Y+42, r25	; 0x2a
    15f4:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    15f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	9c a7       	std	Y+44, r25	; 0x2c
    15fe:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1600:	8b a5       	ldd	r24, Y+43	; 0x2b
    1602:	9c a5       	ldd	r25, Y+44	; 0x2c
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	69 f7       	brne	.-38     	; 0x15e2 <Lcd_vidinit+0xf8>
    1608:	14 c0       	rjmp	.+40     	; 0x1632 <Lcd_vidinit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160a:	6d a5       	ldd	r22, Y+45	; 0x2d
    160c:	7e a5       	ldd	r23, Y+46	; 0x2e
    160e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1610:	98 a9       	ldd	r25, Y+48	; 0x30
    1612:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	9c a7       	std	Y+44, r25	; 0x2c
    161c:	8b a7       	std	Y+43, r24	; 0x2b
    161e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1620:	9c a5       	ldd	r25, Y+44	; 0x2c
    1622:	98 a7       	std	Y+40, r25	; 0x28
    1624:	8f a3       	std	Y+39, r24	; 0x27
    1626:	8f a1       	ldd	r24, Y+39	; 0x27
    1628:	98 a5       	ldd	r25, Y+40	; 0x28
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <Lcd_vidinit+0x140>
    162e:	98 a7       	std	Y+40, r25	; 0x28
    1630:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_vidCmd(0x03);
    1632:	83 e0       	ldi	r24, 0x03	; 3
    1634:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <Lcd_vidCmd>
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	a0 ea       	ldi	r26, 0xA0	; 160
    163e:	b0 e4       	ldi	r27, 0x40	; 64
    1640:	8b a3       	std	Y+35, r24	; 0x23
    1642:	9c a3       	std	Y+36, r25	; 0x24
    1644:	ad a3       	std	Y+37, r26	; 0x25
    1646:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1648:	6b a1       	ldd	r22, Y+35	; 0x23
    164a:	7c a1       	ldd	r23, Y+36	; 0x24
    164c:	8d a1       	ldd	r24, Y+37	; 0x25
    164e:	9e a1       	ldd	r25, Y+38	; 0x26
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	4a e7       	ldi	r20, 0x7A	; 122
    1656:	55 e4       	ldi	r21, 0x45	; 69
    1658:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	8f 8f       	std	Y+31, r24	; 0x1f
    1662:	98 a3       	std	Y+32, r25	; 0x20
    1664:	a9 a3       	std	Y+33, r26	; 0x21
    1666:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1668:	6f 8d       	ldd	r22, Y+31	; 0x1f
    166a:	78 a1       	ldd	r23, Y+32	; 0x20
    166c:	89 a1       	ldd	r24, Y+33	; 0x21
    166e:	9a a1       	ldd	r25, Y+34	; 0x22
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e8       	ldi	r20, 0x80	; 128
    1676:	5f e3       	ldi	r21, 0x3F	; 63
    1678:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    167c:	88 23       	and	r24, r24
    167e:	2c f4       	brge	.+10     	; 0x168a <Lcd_vidinit+0x1a0>
		__ticks = 1;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	9e 8f       	std	Y+30, r25	; 0x1e
    1686:	8d 8f       	std	Y+29, r24	; 0x1d
    1688:	3f c0       	rjmp	.+126    	; 0x1708 <Lcd_vidinit+0x21e>
	else if (__tmp > 65535)
    168a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    168c:	78 a1       	ldd	r23, Y+32	; 0x20
    168e:	89 a1       	ldd	r24, Y+33	; 0x21
    1690:	9a a1       	ldd	r25, Y+34	; 0x22
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	3f ef       	ldi	r19, 0xFF	; 255
    1696:	4f e7       	ldi	r20, 0x7F	; 127
    1698:	57 e4       	ldi	r21, 0x47	; 71
    169a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    169e:	18 16       	cp	r1, r24
    16a0:	4c f5       	brge	.+82     	; 0x16f4 <Lcd_vidinit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a2:	6b a1       	ldd	r22, Y+35	; 0x23
    16a4:	7c a1       	ldd	r23, Y+36	; 0x24
    16a6:	8d a1       	ldd	r24, Y+37	; 0x25
    16a8:	9e a1       	ldd	r25, Y+38	; 0x26
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e2       	ldi	r20, 0x20	; 32
    16b0:	51 e4       	ldi	r21, 0x41	; 65
    16b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	bc 01       	movw	r22, r24
    16bc:	cd 01       	movw	r24, r26
    16be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	9e 8f       	std	Y+30, r25	; 0x1e
    16c8:	8d 8f       	std	Y+29, r24	; 0x1d
    16ca:	0f c0       	rjmp	.+30     	; 0x16ea <Lcd_vidinit+0x200>
    16cc:	80 e9       	ldi	r24, 0x90	; 144
    16ce:	91 e0       	ldi	r25, 0x01	; 1
    16d0:	9c 8f       	std	Y+28, r25	; 0x1c
    16d2:	8b 8f       	std	Y+27, r24	; 0x1b
    16d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <Lcd_vidinit+0x1ee>
    16dc:	9c 8f       	std	Y+28, r25	; 0x1c
    16de:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	9e 8f       	std	Y+30, r25	; 0x1e
    16e8:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	69 f7       	brne	.-38     	; 0x16cc <Lcd_vidinit+0x1e2>
    16f2:	14 c0       	rjmp	.+40     	; 0x171c <Lcd_vidinit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16f6:	78 a1       	ldd	r23, Y+32	; 0x20
    16f8:	89 a1       	ldd	r24, Y+33	; 0x21
    16fa:	9a a1       	ldd	r25, Y+34	; 0x22
    16fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9e 8f       	std	Y+30, r25	; 0x1e
    1706:	8d 8f       	std	Y+29, r24	; 0x1d
    1708:	8d 8d       	ldd	r24, Y+29	; 0x1d
    170a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    170c:	9a 8f       	std	Y+26, r25	; 0x1a
    170e:	89 8f       	std	Y+25, r24	; 0x19
    1710:	89 8d       	ldd	r24, Y+25	; 0x19
    1712:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <Lcd_vidinit+0x22a>
    1718:	9a 8f       	std	Y+26, r25	; 0x1a
    171a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_vidCmd(0x03);
    171c:	83 e0       	ldi	r24, 0x03	; 3
    171e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <Lcd_vidCmd>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	a8 ec       	ldi	r26, 0xC8	; 200
    1728:	b2 e4       	ldi	r27, 0x42	; 66
    172a:	8d 8b       	std	Y+21, r24	; 0x15
    172c:	9e 8b       	std	Y+22, r25	; 0x16
    172e:	af 8b       	std	Y+23, r26	; 0x17
    1730:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1732:	6d 89       	ldd	r22, Y+21	; 0x15
    1734:	7e 89       	ldd	r23, Y+22	; 0x16
    1736:	8f 89       	ldd	r24, Y+23	; 0x17
    1738:	98 8d       	ldd	r25, Y+24	; 0x18
    173a:	2b ea       	ldi	r18, 0xAB	; 171
    173c:	3a ea       	ldi	r19, 0xAA	; 170
    173e:	4a ea       	ldi	r20, 0xAA	; 170
    1740:	50 e4       	ldi	r21, 0x40	; 64
    1742:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	89 8b       	std	Y+17, r24	; 0x11
    174c:	9a 8b       	std	Y+18, r25	; 0x12
    174e:	ab 8b       	std	Y+19, r26	; 0x13
    1750:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1752:	69 89       	ldd	r22, Y+17	; 0x11
    1754:	7a 89       	ldd	r23, Y+18	; 0x12
    1756:	8b 89       	ldd	r24, Y+19	; 0x13
    1758:	9c 89       	ldd	r25, Y+20	; 0x14
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e8       	ldi	r20, 0x80	; 128
    1760:	5f e3       	ldi	r21, 0x3F	; 63
    1762:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1766:	88 23       	and	r24, r24
    1768:	1c f4       	brge	.+6      	; 0x1770 <Lcd_vidinit+0x286>
		__ticks = 1;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	88 8b       	std	Y+16, r24	; 0x10
    176e:	91 c0       	rjmp	.+290    	; 0x1892 <Lcd_vidinit+0x3a8>
	else if (__tmp > 255)
    1770:	69 89       	ldd	r22, Y+17	; 0x11
    1772:	7a 89       	ldd	r23, Y+18	; 0x12
    1774:	8b 89       	ldd	r24, Y+19	; 0x13
    1776:	9c 89       	ldd	r25, Y+20	; 0x14
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	53 e4       	ldi	r21, 0x43	; 67
    1780:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1784:	18 16       	cp	r1, r24
    1786:	0c f0       	brlt	.+2      	; 0x178a <Lcd_vidinit+0x2a0>
    1788:	7b c0       	rjmp	.+246    	; 0x1880 <Lcd_vidinit+0x396>
	{
		_delay_ms(__us / 1000.0);
    178a:	6d 89       	ldd	r22, Y+21	; 0x15
    178c:	7e 89       	ldd	r23, Y+22	; 0x16
    178e:	8f 89       	ldd	r24, Y+23	; 0x17
    1790:	98 8d       	ldd	r25, Y+24	; 0x18
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	4a e7       	ldi	r20, 0x7A	; 122
    1798:	54 e4       	ldi	r21, 0x44	; 68
    179a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	8c 87       	std	Y+12, r24	; 0x0c
    17a4:	9d 87       	std	Y+13, r25	; 0x0d
    17a6:	ae 87       	std	Y+14, r26	; 0x0e
    17a8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17aa:	6c 85       	ldd	r22, Y+12	; 0x0c
    17ac:	7d 85       	ldd	r23, Y+13	; 0x0d
    17ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    17b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	4a e7       	ldi	r20, 0x7A	; 122
    17b8:	55 e4       	ldi	r21, 0x45	; 69
    17ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	88 87       	std	Y+8, r24	; 0x08
    17c4:	99 87       	std	Y+9, r25	; 0x09
    17c6:	aa 87       	std	Y+10, r26	; 0x0a
    17c8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    17ca:	68 85       	ldd	r22, Y+8	; 0x08
    17cc:	79 85       	ldd	r23, Y+9	; 0x09
    17ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    17d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	40 e8       	ldi	r20, 0x80	; 128
    17d8:	5f e3       	ldi	r21, 0x3F	; 63
    17da:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17de:	88 23       	and	r24, r24
    17e0:	2c f4       	brge	.+10     	; 0x17ec <Lcd_vidinit+0x302>
		__ticks = 1;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	9f 83       	std	Y+7, r25	; 0x07
    17e8:	8e 83       	std	Y+6, r24	; 0x06
    17ea:	3f c0       	rjmp	.+126    	; 0x186a <Lcd_vidinit+0x380>
	else if (__tmp > 65535)
    17ec:	68 85       	ldd	r22, Y+8	; 0x08
    17ee:	79 85       	ldd	r23, Y+9	; 0x09
    17f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	3f ef       	ldi	r19, 0xFF	; 255
    17f8:	4f e7       	ldi	r20, 0x7F	; 127
    17fa:	57 e4       	ldi	r21, 0x47	; 71
    17fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1800:	18 16       	cp	r1, r24
    1802:	4c f5       	brge	.+82     	; 0x1856 <Lcd_vidinit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1804:	6c 85       	ldd	r22, Y+12	; 0x0c
    1806:	7d 85       	ldd	r23, Y+13	; 0x0d
    1808:	8e 85       	ldd	r24, Y+14	; 0x0e
    180a:	9f 85       	ldd	r25, Y+15	; 0x0f
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e2       	ldi	r20, 0x20	; 32
    1812:	51 e4       	ldi	r21, 0x41	; 65
    1814:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	9f 83       	std	Y+7, r25	; 0x07
    182a:	8e 83       	std	Y+6, r24	; 0x06
    182c:	0f c0       	rjmp	.+30     	; 0x184c <Lcd_vidinit+0x362>
    182e:	80 e9       	ldi	r24, 0x90	; 144
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	9d 83       	std	Y+5, r25	; 0x05
    1834:	8c 83       	std	Y+4, r24	; 0x04
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	9d 81       	ldd	r25, Y+5	; 0x05
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <Lcd_vidinit+0x350>
    183e:	9d 83       	std	Y+5, r25	; 0x05
    1840:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	8e 81       	ldd	r24, Y+6	; 0x06
    1844:	9f 81       	ldd	r25, Y+7	; 0x07
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	9f 83       	std	Y+7, r25	; 0x07
    184a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184c:	8e 81       	ldd	r24, Y+6	; 0x06
    184e:	9f 81       	ldd	r25, Y+7	; 0x07
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	69 f7       	brne	.-38     	; 0x182e <Lcd_vidinit+0x344>
    1854:	24 c0       	rjmp	.+72     	; 0x189e <Lcd_vidinit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1856:	68 85       	ldd	r22, Y+8	; 0x08
    1858:	79 85       	ldd	r23, Y+9	; 0x09
    185a:	8a 85       	ldd	r24, Y+10	; 0x0a
    185c:	9b 85       	ldd	r25, Y+11	; 0x0b
    185e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9f 83       	std	Y+7, r25	; 0x07
    1868:	8e 83       	std	Y+6, r24	; 0x06
    186a:	8e 81       	ldd	r24, Y+6	; 0x06
    186c:	9f 81       	ldd	r25, Y+7	; 0x07
    186e:	9b 83       	std	Y+3, r25	; 0x03
    1870:	8a 83       	std	Y+2, r24	; 0x02
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	9b 81       	ldd	r25, Y+3	; 0x03
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <Lcd_vidinit+0x38c>
    187a:	9b 83       	std	Y+3, r25	; 0x03
    187c:	8a 83       	std	Y+2, r24	; 0x02
    187e:	0f c0       	rjmp	.+30     	; 0x189e <Lcd_vidinit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1880:	69 89       	ldd	r22, Y+17	; 0x11
    1882:	7a 89       	ldd	r23, Y+18	; 0x12
    1884:	8b 89       	ldd	r24, Y+19	; 0x13
    1886:	9c 89       	ldd	r25, Y+20	; 0x14
    1888:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	88 8b       	std	Y+16, r24	; 0x10
    1892:	88 89       	ldd	r24, Y+16	; 0x10
    1894:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	8a 95       	dec	r24
    189a:	f1 f7       	brne	.-4      	; 0x1898 <Lcd_vidinit+0x3ae>
    189c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_vidCmd(0x03);
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <Lcd_vidCmd>
	Lcd_vidCmd(0x02);
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <Lcd_vidCmd>
	Lcd_vidCmd(_LCD_4BIT_MODE);
    18aa:	88 e2       	ldi	r24, 0x28	; 40
    18ac:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <Lcd_vidCmd>
}
    18b0:	e4 96       	adiw	r28, 0x34	; 52
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <Lcd_videnablePulse>:

static void Lcd_videnablePulse(void)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	a6 97       	sbiw	r28, 0x26	; 38
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
	//send Enable pulse
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	63 e0       	ldi	r22, 0x03	; 3
    18da:	41 e0       	ldi	r20, 0x01	; 1
    18dc:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a0 e8       	ldi	r26, 0x80	; 128
    18e6:	bf e3       	ldi	r27, 0x3F	; 63
    18e8:	8b a3       	std	Y+35, r24	; 0x23
    18ea:	9c a3       	std	Y+36, r25	; 0x24
    18ec:	ad a3       	std	Y+37, r26	; 0x25
    18ee:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18f0:	6b a1       	ldd	r22, Y+35	; 0x23
    18f2:	7c a1       	ldd	r23, Y+36	; 0x24
    18f4:	8d a1       	ldd	r24, Y+37	; 0x25
    18f6:	9e a1       	ldd	r25, Y+38	; 0x26
    18f8:	2b ea       	ldi	r18, 0xAB	; 171
    18fa:	3a ea       	ldi	r19, 0xAA	; 170
    18fc:	4a ea       	ldi	r20, 0xAA	; 170
    18fe:	50 e4       	ldi	r21, 0x40	; 64
    1900:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	8f 8f       	std	Y+31, r24	; 0x1f
    190a:	98 a3       	std	Y+32, r25	; 0x20
    190c:	a9 a3       	std	Y+33, r26	; 0x21
    190e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1910:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1912:	78 a1       	ldd	r23, Y+32	; 0x20
    1914:	89 a1       	ldd	r24, Y+33	; 0x21
    1916:	9a a1       	ldd	r25, Y+34	; 0x22
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e8       	ldi	r20, 0x80	; 128
    191e:	5f e3       	ldi	r21, 0x3F	; 63
    1920:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1924:	88 23       	and	r24, r24
    1926:	1c f4       	brge	.+6      	; 0x192e <Lcd_videnablePulse+0x6c>
		__ticks = 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	8e 8f       	std	Y+30, r24	; 0x1e
    192c:	91 c0       	rjmp	.+290    	; 0x1a50 <Lcd_videnablePulse+0x18e>
	else if (__tmp > 255)
    192e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1930:	78 a1       	ldd	r23, Y+32	; 0x20
    1932:	89 a1       	ldd	r24, Y+33	; 0x21
    1934:	9a a1       	ldd	r25, Y+34	; 0x22
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	4f e7       	ldi	r20, 0x7F	; 127
    193c:	53 e4       	ldi	r21, 0x43	; 67
    193e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1942:	18 16       	cp	r1, r24
    1944:	0c f0       	brlt	.+2      	; 0x1948 <Lcd_videnablePulse+0x86>
    1946:	7b c0       	rjmp	.+246    	; 0x1a3e <Lcd_videnablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1948:	6b a1       	ldd	r22, Y+35	; 0x23
    194a:	7c a1       	ldd	r23, Y+36	; 0x24
    194c:	8d a1       	ldd	r24, Y+37	; 0x25
    194e:	9e a1       	ldd	r25, Y+38	; 0x26
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	4a e7       	ldi	r20, 0x7A	; 122
    1956:	54 e4       	ldi	r21, 0x44	; 68
    1958:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	8a 8f       	std	Y+26, r24	; 0x1a
    1962:	9b 8f       	std	Y+27, r25	; 0x1b
    1964:	ac 8f       	std	Y+28, r26	; 0x1c
    1966:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1968:	6a 8d       	ldd	r22, Y+26	; 0x1a
    196a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    196c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    196e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4a e7       	ldi	r20, 0x7A	; 122
    1976:	55 e4       	ldi	r21, 0x45	; 69
    1978:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	8e 8b       	std	Y+22, r24	; 0x16
    1982:	9f 8b       	std	Y+23, r25	; 0x17
    1984:	a8 8f       	std	Y+24, r26	; 0x18
    1986:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1988:	6e 89       	ldd	r22, Y+22	; 0x16
    198a:	7f 89       	ldd	r23, Y+23	; 0x17
    198c:	88 8d       	ldd	r24, Y+24	; 0x18
    198e:	99 8d       	ldd	r25, Y+25	; 0x19
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    199c:	88 23       	and	r24, r24
    199e:	2c f4       	brge	.+10     	; 0x19aa <Lcd_videnablePulse+0xe8>
		__ticks = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9d 8b       	std	Y+21, r25	; 0x15
    19a6:	8c 8b       	std	Y+20, r24	; 0x14
    19a8:	3f c0       	rjmp	.+126    	; 0x1a28 <Lcd_videnablePulse+0x166>
	else if (__tmp > 65535)
    19aa:	6e 89       	ldd	r22, Y+22	; 0x16
    19ac:	7f 89       	ldd	r23, Y+23	; 0x17
    19ae:	88 8d       	ldd	r24, Y+24	; 0x18
    19b0:	99 8d       	ldd	r25, Y+25	; 0x19
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	3f ef       	ldi	r19, 0xFF	; 255
    19b6:	4f e7       	ldi	r20, 0x7F	; 127
    19b8:	57 e4       	ldi	r21, 0x47	; 71
    19ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19be:	18 16       	cp	r1, r24
    19c0:	4c f5       	brge	.+82     	; 0x1a14 <Lcd_videnablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19c4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e2       	ldi	r20, 0x20	; 32
    19d0:	51 e4       	ldi	r21, 0x41	; 65
    19d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9d 8b       	std	Y+21, r25	; 0x15
    19e8:	8c 8b       	std	Y+20, r24	; 0x14
    19ea:	0f c0       	rjmp	.+30     	; 0x1a0a <Lcd_videnablePulse+0x148>
    19ec:	80 e9       	ldi	r24, 0x90	; 144
    19ee:	91 e0       	ldi	r25, 0x01	; 1
    19f0:	9b 8b       	std	Y+19, r25	; 0x13
    19f2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19f4:	8a 89       	ldd	r24, Y+18	; 0x12
    19f6:	9b 89       	ldd	r25, Y+19	; 0x13
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <Lcd_videnablePulse+0x136>
    19fc:	9b 8b       	std	Y+19, r25	; 0x13
    19fe:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a00:	8c 89       	ldd	r24, Y+20	; 0x14
    1a02:	9d 89       	ldd	r25, Y+21	; 0x15
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	9d 8b       	std	Y+21, r25	; 0x15
    1a08:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0a:	8c 89       	ldd	r24, Y+20	; 0x14
    1a0c:	9d 89       	ldd	r25, Y+21	; 0x15
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	69 f7       	brne	.-38     	; 0x19ec <Lcd_videnablePulse+0x12a>
    1a12:	24 c0       	rjmp	.+72     	; 0x1a5c <Lcd_videnablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a14:	6e 89       	ldd	r22, Y+22	; 0x16
    1a16:	7f 89       	ldd	r23, Y+23	; 0x17
    1a18:	88 8d       	ldd	r24, Y+24	; 0x18
    1a1a:	99 8d       	ldd	r25, Y+25	; 0x19
    1a1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	9d 8b       	std	Y+21, r25	; 0x15
    1a26:	8c 8b       	std	Y+20, r24	; 0x14
    1a28:	8c 89       	ldd	r24, Y+20	; 0x14
    1a2a:	9d 89       	ldd	r25, Y+21	; 0x15
    1a2c:	99 8b       	std	Y+17, r25	; 0x11
    1a2e:	88 8b       	std	Y+16, r24	; 0x10
    1a30:	88 89       	ldd	r24, Y+16	; 0x10
    1a32:	99 89       	ldd	r25, Y+17	; 0x11
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <Lcd_videnablePulse+0x172>
    1a38:	99 8b       	std	Y+17, r25	; 0x11
    1a3a:	88 8b       	std	Y+16, r24	; 0x10
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <Lcd_videnablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a3e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a40:	78 a1       	ldd	r23, Y+32	; 0x20
    1a42:	89 a1       	ldd	r24, Y+33	; 0x21
    1a44:	9a a1       	ldd	r25, Y+34	; 0x22
    1a46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	8e 8f       	std	Y+30, r24	; 0x1e
    1a50:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a52:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a56:	8a 95       	dec	r24
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <Lcd_videnablePulse+0x194>
    1a5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	63 e0       	ldi	r22, 0x03	; 3
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a0 e0       	ldi	r26, 0x00	; 0
    1a6c:	b0 e4       	ldi	r27, 0x40	; 64
    1a6e:	8b 87       	std	Y+11, r24	; 0x0b
    1a70:	9c 87       	std	Y+12, r25	; 0x0c
    1a72:	ad 87       	std	Y+13, r26	; 0x0d
    1a74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a e7       	ldi	r20, 0x7A	; 122
    1a84:	55 e4       	ldi	r21, 0x45	; 69
    1a86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8f 83       	std	Y+7, r24	; 0x07
    1a90:	98 87       	std	Y+8, r25	; 0x08
    1a92:	a9 87       	std	Y+9, r26	; 0x09
    1a94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a96:	6f 81       	ldd	r22, Y+7	; 0x07
    1a98:	78 85       	ldd	r23, Y+8	; 0x08
    1a9a:	89 85       	ldd	r24, Y+9	; 0x09
    1a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <Lcd_videnablePulse+0x1f6>
		__ticks = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <Lcd_videnablePulse+0x274>
	else if (__tmp > 65535)
    1ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aba:	78 85       	ldd	r23, Y+8	; 0x08
    1abc:	89 85       	ldd	r24, Y+9	; 0x09
    1abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	57 e4       	ldi	r21, 0x47	; 71
    1ac8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1acc:	18 16       	cp	r1, r24
    1ace:	4c f5       	brge	.+82     	; 0x1b22 <Lcd_videnablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9e 83       	std	Y+6, r25	; 0x06
    1af6:	8d 83       	std	Y+5, r24	; 0x05
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <Lcd_videnablePulse+0x256>
    1afa:	80 e9       	ldi	r24, 0x90	; 144
    1afc:	91 e0       	ldi	r25, 0x01	; 1
    1afe:	9c 83       	std	Y+4, r25	; 0x04
    1b00:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <Lcd_videnablePulse+0x244>
    1b0a:	9c 83       	std	Y+4, r25	; 0x04
    1b0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b10:	9e 81       	ldd	r25, Y+6	; 0x06
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b18:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <Lcd_videnablePulse+0x238>
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <Lcd_videnablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	6f 81       	ldd	r22, Y+7	; 0x07
    1b24:	78 85       	ldd	r23, Y+8	; 0x08
    1b26:	89 85       	ldd	r24, Y+9	; 0x09
    1b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	9a 81       	ldd	r25, Y+2	; 0x02
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <Lcd_videnablePulse+0x280>
    1b46:	9a 83       	std	Y+2, r25	; 0x02
    1b48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1b4a:	a6 96       	adiw	r28, 0x26	; 38
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <Lcd_vidDisplayChar>:
void Lcd_vidDisplayChar(u8 chr)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <Lcd_vidDisplayChar+0x6>
    1b62:	0f 92       	push	r0
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	8b 83       	std	Y+3, r24	; 0x03
	0b1101  1001

	1101   0000
	1001   0000
*/
	u8 loc_MSB = (chr & ~LCD_MASK);
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	80 7f       	andi	r24, 0xF0	; 240
    1b6e:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = (chr<<4);
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	82 95       	swap	r24
    1b74:	80 7f       	andi	r24, 0xF0	; 240
    1b76:	89 83       	std	Y+1, r24	; 0x01
	//RS->1
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	6a 81       	ldd	r22, Y+2	; 0x02
    1b86:	4f e0       	ldi	r20, 0x0F	; 15
    1b88:	0e 94 a8 12 	call	0x2550	; 0x2550 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1b8c:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	69 81       	ldd	r22, Y+1	; 0x01
    1b94:	4f e0       	ldi	r20, 0x0F	; 15
    1b96:	0e 94 a8 12 	call	0x2550	; 0x2550 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1b9a:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <Lcd_videnablePulse>
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <Lcd_vidCmd>:
void Lcd_vidCmd(lcd_Cmd_t cmd)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <Lcd_vidCmd+0x6>
    1bb0:	0f 92       	push	r0
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_MSB = cmd & ~LCD_MASK;
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	80 7f       	andi	r24, 0xF0	; 240
    1bbc:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = cmd<<4;
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	82 95       	swap	r24
    1bc2:	80 7f       	andi	r24, 0xF0	; 240
    1bc4:	89 83       	std	Y+1, r24	; 0x01
	//RS->0
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	6a 81       	ldd	r22, Y+2	; 0x02
    1bd4:	4f e0       	ldi	r20, 0x0F	; 15
    1bd6:	0e 94 a8 12 	call	0x2550	; 0x2550 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1bda:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	69 81       	ldd	r22, Y+1	; 0x01
    1be2:	4f e0       	ldi	r20, 0x0F	; 15
    1be4:	0e 94 a8 12 	call	0x2550	; 0x2550 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1be8:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <Lcd_videnablePulse>
}
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <Lcd_vidRowColumn>:

void Lcd_vidRowColumn(u8 row, u8 col)
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <Lcd_vidRowColumn+0x6>
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <Lcd_vidRowColumn+0x8>
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	89 83       	std	Y+1, r24	; 0x01
    1c06:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	3c 83       	std	Y+4, r19	; 0x04
    1c10:	2b 83       	std	Y+3, r18	; 0x03
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	9c 81       	ldd	r25, Y+4	; 0x04
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	31 f0       	breq	.+12     	; 0x1c26 <Lcd_vidRowColumn+0x2e>
    1c1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1e:	21 30       	cpi	r18, 0x01	; 1
    1c20:	31 05       	cpc	r19, r1
    1c22:	31 f0       	breq	.+12     	; 0x1c30 <Lcd_vidRowColumn+0x38>
    1c24:	09 c0       	rjmp	.+18     	; 0x1c38 <Lcd_vidRowColumn+0x40>
	{
	case 0:
		Lcd_vidCmd(0x80 + col);
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	80 58       	subi	r24, 0x80	; 128
    1c2a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <Lcd_vidCmd>
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <Lcd_vidRowColumn+0x40>
		break;

	case 1:
		Lcd_vidCmd(0xC0 + col);
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	80 54       	subi	r24, 0x40	; 64
    1c34:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <Lcd_vidCmd>
		break;
	}
}
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <Lcd_vidDisplyStr>:
void Lcd_vidDisplyStr(u8* str)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <Lcd_vidDisplyStr+0x6>
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	9a 83       	std	Y+2, r25	; 0x02
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	0a c0       	rjmp	.+20     	; 0x1c6a <Lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		Lcd_vidDisplayChar(*str);
    1c56:	e9 81       	ldd	r30, Y+1	; 0x01
    1c58:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5a:	80 81       	ld	r24, Z
    1c5c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd_vidDisplayChar>
		str++;
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	9a 81       	ldd	r25, Y+2	; 0x02
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
}
void Lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    1c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6e:	80 81       	ld	r24, Z
    1c70:	88 23       	and	r24, r24
    1c72:	89 f7       	brne	.-30     	; 0x1c56 <Lcd_vidDisplyStr+0x10>
	{
		Lcd_vidDisplayChar(*str);
		str++;
	}
}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <Lcd_vidDisplyInt>:

void Lcd_vidDisplyInt(u32 num)
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	29 97       	sbiw	r28, 0x09	; 9
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	6e 83       	std	Y+6, r22	; 0x06
    1c94:	7f 83       	std	Y+7, r23	; 0x07
    1c96:	88 87       	std	Y+8, r24	; 0x08
    1c98:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer[5];
	sprintf(buffer,"%d",num);
    1c9a:	8d b7       	in	r24, 0x3d	; 61
    1c9c:	9e b7       	in	r25, 0x3e	; 62
    1c9e:	08 97       	sbiw	r24, 0x08	; 8
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	9e bf       	out	0x3e, r25	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	8d bf       	out	0x3d, r24	; 61
    1caa:	ed b7       	in	r30, 0x3d	; 61
    1cac:	fe b7       	in	r31, 0x3e	; 62
    1cae:	31 96       	adiw	r30, 0x01	; 1
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	80 83       	st	Z, r24
    1cb8:	80 e6       	ldi	r24, 0x60	; 96
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	93 83       	std	Z+3, r25	; 0x03
    1cbe:	82 83       	std	Z+2, r24	; 0x02
    1cc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc4:	a8 85       	ldd	r26, Y+8	; 0x08
    1cc6:	b9 85       	ldd	r27, Y+9	; 0x09
    1cc8:	84 83       	std	Z+4, r24	; 0x04
    1cca:	95 83       	std	Z+5, r25	; 0x05
    1ccc:	a6 83       	std	Z+6, r26	; 0x06
    1cce:	b7 83       	std	Z+7, r27	; 0x07
    1cd0:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <sprintf>
    1cd4:	8d b7       	in	r24, 0x3d	; 61
    1cd6:	9e b7       	in	r25, 0x3e	; 62
    1cd8:	08 96       	adiw	r24, 0x08	; 8
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	9e bf       	out	0x3e, r25	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1ce4:	ce 01       	movw	r24, r28
    1ce6:	01 96       	adiw	r24, 0x01	; 1
    1ce8:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <Lcd_vidDisplyStr>
}
    1cec:	29 96       	adiw	r28, 0x09	; 9
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <Keypad_vidinit>:
		{'7','8','9','C'},
		{'*','0','#','D'}
};

void Keypad_vidinit(void)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Rows Pins as input	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN0, DIO_INPUT);
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	40 e0       	ldi	r20, 0x00	; 0
    1d0c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN1, DIO_INPUT);
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	61 e0       	ldi	r22, 0x01	; 1
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_INPUT);
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
    1d1c:	62 e0       	ldi	r22, 0x02	; 2
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN3, DIO_INPUT);
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	63 e0       	ldi	r22, 0x03	; 3
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>

	/*	Configure Columns Pins as output	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	64 e0       	ldi	r22, 0x04	; 4
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	65 e0       	ldi	r22, 0x05	; 5
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	66 e0       	ldi	r22, 0x06	; 6
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	67 e0       	ldi	r22, 0x07	; 7
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>

	/*	initialize output columns with high	*/
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	64 e0       	ldi	r22, 0x04	; 4
    1d5a:	41 e0       	ldi	r20, 0x01	; 1
    1d5c:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1d60:	82 e0       	ldi	r24, 0x02	; 2
    1d62:	65 e0       	ldi	r22, 0x05	; 5
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1d6a:	82 e0       	ldi	r24, 0x02	; 2
    1d6c:	66 e0       	ldi	r22, 0x06	; 6
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	67 e0       	ldi	r22, 0x07	; 7
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
}
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <Keypad_udtIsPressed>:

boolean Keypad_udtIsPressed()
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	0f 92       	push	r0
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
	if (
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	0e 94 04 13 	call	0x2608	; 0x2608 <Dio_udtreadChanel>
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	91 f0       	breq	.+36     	; 0x1dbe <Keypad_udtIsPressed+0x3a>
    1d9a:	82 e0       	ldi	r24, 0x02	; 2
    1d9c:	61 e0       	ldi	r22, 0x01	; 1
    1d9e:	0e 94 04 13 	call	0x2608	; 0x2608 <Dio_udtreadChanel>
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	61 f0       	breq	.+24     	; 0x1dbe <Keypad_udtIsPressed+0x3a>
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	62 e0       	ldi	r22, 0x02	; 2
    1daa:	0e 94 04 13 	call	0x2608	; 0x2608 <Dio_udtreadChanel>
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	31 f0       	breq	.+12     	; 0x1dbe <Keypad_udtIsPressed+0x3a>
    1db2:	82 e0       	ldi	r24, 0x02	; 2
    1db4:	63 e0       	ldi	r22, 0x03	; 3
    1db6:	0e 94 04 13 	call	0x2608	; 0x2608 <Dio_udtreadChanel>
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	19 f4       	brne	.+6      	; 0x1dc4 <Keypad_udtIsPressed+0x40>
			(Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_HIGH)||
			(Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_HIGH)||
			(Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_HIGH)
	)
	{
		return TRUE;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <Keypad_udtIsPressed+0x42>
	}
	else
	{
		return FALSE;
    1dc4:	19 82       	std	Y+1, r1	; 0x01
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1dc8:	0f 90       	pop	r0
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <Keypad_udtgetRow>:

kp_row_t Keypad_udtgetRow(void)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	0f 92       	push	r0
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_row = KP_NOROW;
    1dda:	84 e0       	ldi	r24, 0x04	; 4
    1ddc:	89 83       	std	Y+1, r24	; 0x01

	if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN0) == DIO_HIGH)
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	0e 94 04 13 	call	0x2608	; 0x2608 <Dio_udtreadChanel>
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	11 f4       	brne	.+4      	; 0x1dee <Keypad_udtgetRow+0x1e>
	{
		loc_row=KP_ROW0;
    1dea:	19 82       	std	Y+1, r1	; 0x01
    1dec:	1d c0       	rjmp	.+58     	; 0x1e28 <Keypad_udtgetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_HIGH)
    1dee:	82 e0       	ldi	r24, 0x02	; 2
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	0e 94 04 13 	call	0x2608	; 0x2608 <Dio_udtreadChanel>
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	19 f4       	brne	.+6      	; 0x1e00 <Keypad_udtgetRow+0x30>
	{
		loc_row=KP_ROW1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <Keypad_udtgetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_HIGH)
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	62 e0       	ldi	r22, 0x02	; 2
    1e04:	0e 94 04 13 	call	0x2608	; 0x2608 <Dio_udtreadChanel>
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	19 f4       	brne	.+6      	; 0x1e12 <Keypad_udtgetRow+0x42>
	{
		loc_row=KP_ROW2;
    1e0c:	82 e0       	ldi	r24, 0x02	; 2
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	0b c0       	rjmp	.+22     	; 0x1e28 <Keypad_udtgetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_HIGH)
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	63 e0       	ldi	r22, 0x03	; 3
    1e16:	0e 94 04 13 	call	0x2608	; 0x2608 <Dio_udtreadChanel>
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	19 f4       	brne	.+6      	; 0x1e24 <Keypad_udtgetRow+0x54>
	{
		loc_row=KP_ROW3;
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <Keypad_udtgetRow+0x58>
	}
	else
	{
		loc_row = KP_NOROW;
    1e24:	84 e0       	ldi	r24, 0x04	; 4
    1e26:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_row;
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <Keypad_udtgetCol>:

kp_col_t Keypad_udtgetCol(kp_row_t current_row)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <Keypad_udtgetCol+0x6>
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
	kp_col_t loc_column = KP_NOCOL;
    1e3e:	84 e0       	ldi	r24, 0x04	; 4
    1e40:	89 83       	std	Y+1, r24	; 0x01

	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1e42:	82 e0       	ldi	r24, 0x02	; 2
    1e44:	64 e0       	ldi	r22, 0x04	; 4
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1e4c:	82 e0       	ldi	r24, 0x02	; 2
    1e4e:	65 e0       	ldi	r22, 0x05	; 5
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	66 e0       	ldi	r22, 0x06	; 6
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	67 e0       	ldi	r22, 0x07	; 7
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>

	if (Keypad_udtgetRow() == current_row)
    1e6a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <Keypad_udtgetRow>
    1e6e:	98 2f       	mov	r25, r24
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	98 17       	cp	r25, r24
    1e74:	11 f4       	brne	.+4      	; 0x1e7a <Keypad_udtgetCol+0x48>
	{
		loc_column = KP_COL0;
    1e76:	19 82       	std	Y+1, r1	; 0x01
    1e78:	56 c0       	rjmp	.+172    	; 0x1f26 <Keypad_udtgetCol+0xf4>
	}
	else
	{
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	64 e0       	ldi	r22, 0x04	; 4
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	65 e0       	ldi	r22, 0x05	; 5
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1e8e:	82 e0       	ldi	r24, 0x02	; 2
    1e90:	66 e0       	ldi	r22, 0x06	; 6
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1e98:	82 e0       	ldi	r24, 0x02	; 2
    1e9a:	67 e0       	ldi	r22, 0x07	; 7
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>

		if (Keypad_udtgetRow() == current_row)
    1ea2:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <Keypad_udtgetRow>
    1ea6:	98 2f       	mov	r25, r24
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	98 17       	cp	r25, r24
    1eac:	19 f4       	brne	.+6      	; 0x1eb4 <Keypad_udtgetCol+0x82>
		{
			loc_column = KP_COL1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	39 c0       	rjmp	.+114    	; 0x1f26 <Keypad_udtgetCol+0xf4>
		}
		else
		{
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
    1eb6:	64 e0       	ldi	r22, 0x04	; 4
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	65 e0       	ldi	r22, 0x05	; 5
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	66 e0       	ldi	r22, 0x06	; 6
    1ecc:	41 e0       	ldi	r20, 0x01	; 1
    1ece:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	67 e0       	ldi	r22, 0x07	; 7
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>

			if (Keypad_udtgetRow() == current_row)
    1edc:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <Keypad_udtgetRow>
    1ee0:	98 2f       	mov	r25, r24
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	98 17       	cp	r25, r24
    1ee6:	19 f4       	brne	.+6      	; 0x1eee <Keypad_udtgetCol+0xbc>
			{
				loc_column = KP_COL2;
    1ee8:	82 e0       	ldi	r24, 0x02	; 2
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	1c c0       	rjmp	.+56     	; 0x1f26 <Keypad_udtgetCol+0xf4>
			}
			else
			{
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	64 e0       	ldi	r22, 0x04	; 4
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	65 e0       	ldi	r22, 0x05	; 5
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1f02:	82 e0       	ldi	r24, 0x02	; 2
    1f04:	66 e0       	ldi	r22, 0x06	; 6
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	67 e0       	ldi	r22, 0x07	; 7
    1f10:	41 e0       	ldi	r20, 0x01	; 1
    1f12:	0e 94 c5 11 	call	0x238a	; 0x238a <Dio_vidwriteChanel>

				if (Keypad_udtgetRow() == current_row)
    1f16:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <Keypad_udtgetRow>
    1f1a:	98 2f       	mov	r25, r24
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	98 17       	cp	r25, r24
    1f20:	11 f4       	brne	.+4      	; 0x1f26 <Keypad_udtgetCol+0xf4>
				{
					loc_column = KP_COL3;
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	89 83       	std	Y+1, r24	; 0x01

				}
			}
		}
	}
	return loc_column;
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <Keypad_u8GetButton>:

u8 Keypad_u8GetButton(void)
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <Keypad_u8GetButton+0x6>
    1f38:	0f 92       	push	r0
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_row = KP_NOROW;
    1f3e:	84 e0       	ldi	r24, 0x04	; 4
    1f40:	8b 83       	std	Y+3, r24	; 0x03
	kp_col_t loc_col = KP_NOCOL;
    1f42:	84 e0       	ldi	r24, 0x04	; 4
    1f44:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_button = 0xFF;
    1f46:	8f ef       	ldi	r24, 0xFF	; 255
    1f48:	89 83       	std	Y+1, r24	; 0x01

	Keypad_vidinit();
    1f4a:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <Keypad_vidinit>

	if (Keypad_udtIsPressed() == TRUE)
    1f4e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <Keypad_udtIsPressed>
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	c9 f4       	brne	.+50     	; 0x1f88 <Keypad_u8GetButton+0x56>
	{
		loc_row = Keypad_udtgetRow();
    1f56:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <Keypad_udtgetRow>
    1f5a:	8b 83       	std	Y+3, r24	; 0x03
		loc_col = Keypad_udtgetCol(loc_row);
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <Keypad_udtgetCol>
    1f62:	8a 83       	std	Y+2, r24	; 0x02
		loc_button = Keypad_Layout[loc_row][loc_col];
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	48 2f       	mov	r20, r24
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	ca 01       	movw	r24, r20
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	82 0f       	add	r24, r18
    1f7c:	93 1f       	adc	r25, r19
    1f7e:	fc 01       	movw	r30, r24
    1f80:	e5 59       	subi	r30, 0x95	; 149
    1f82:	fe 4f       	sbci	r31, 0xFE	; 254
    1f84:	80 81       	ld	r24, Z
    1f86:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return loc_button;
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <DcMotor_vidInit>:
 */
#include "Dc_Motor_Types.h"
#include <util/delay.h>

void DcMotor_vidInit(void)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Pins Directions	*/

	/*	Make Sure Motor Stopped	*/

}
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <DcMotor_vidStart>:

void DcMotor_vidStart(dcMotor_dir_t dir)
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	89 83       	std	Y+1, r24	; 0x01
	{
		/*	Clear IN1	*/

		/*	Set IN2	*/
	}
}
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <Dc_Motor_vidStop>:

void Dc_Motor_vidStop(void)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	2e 97       	sbiw	r28, 0x0e	; 14
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e8       	ldi	r25, 0x80	; 128
    1fd0:	ab e3       	ldi	r26, 0x3B	; 59
    1fd2:	b5 e4       	ldi	r27, 0x45	; 69
    1fd4:	8b 87       	std	Y+11, r24	; 0x0b
    1fd6:	9c 87       	std	Y+12, r25	; 0x0c
    1fd8:	ad 87       	std	Y+13, r26	; 0x0d
    1fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a e7       	ldi	r20, 0x7A	; 122
    1fea:	55 e4       	ldi	r21, 0x45	; 69
    1fec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8f 83       	std	Y+7, r24	; 0x07
    1ff6:	98 87       	std	Y+8, r25	; 0x08
    1ff8:	a9 87       	std	Y+9, r26	; 0x09
    1ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffe:	78 85       	ldd	r23, Y+8	; 0x08
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	9a 85       	ldd	r25, Y+10	; 0x0a
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <Dc_Motor_vidStop+0x66>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	3f c0       	rjmp	.+126    	; 0x209c <Dc_Motor_vidStop+0xe4>
	else if (__tmp > 65535)
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <Dc_Motor_vidStop+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	6b 85       	ldd	r22, Y+11	; 0x0b
    2038:	7c 85       	ldd	r23, Y+12	; 0x0c
    203a:	8d 85       	ldd	r24, Y+13	; 0x0d
    203c:	9e 85       	ldd	r25, Y+14	; 0x0e
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	0f c0       	rjmp	.+30     	; 0x207e <Dc_Motor_vidStop+0xc6>
    2060:	80 e9       	ldi	r24, 0x90	; 144
    2062:	91 e0       	ldi	r25, 0x01	; 1
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <Dc_Motor_vidStop+0xb4>
    2070:	9c 83       	std	Y+4, r25	; 0x04
    2072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <Dc_Motor_vidStop+0xa8>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <Dc_Motor_vidStop+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <Dc_Motor_vidStop+0xf0>
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	89 83       	std	Y+1, r24	; 0x01
	/*	Clear En Pin	*/

	_delay_ms(3000);
}
    20b0:	2e 96       	adiw	r28, 0x0e	; 14
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <Button_vidbuttonInit>:
 *      Author: Eng_Fawzi
 */
#include "Button.h"
#include "Dio.h"
void Button_vidbuttonInit(void)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB,DIO_PIN0,DIO_INPUT);
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	60 e0       	ldi	r22, 0x00	; 0
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB,DIO_PIN4,DIO_INPUT);
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	64 e0       	ldi	r22, 0x04	; 4
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD,DIO_PIN2,DIO_INPUT);
    20de:	83 e0       	ldi	r24, 0x03	; 3
    20e0:	62 e0       	ldi	r22, 0x02	; 2
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <Dio_vidconfigChanel>
}
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <Button_udtbuttonStatus>:

button_butStatus_t Button_udtbuttonStatus(button_buttonId_t butnId)
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <Button_udtbuttonStatus+0x6>
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <Button_udtbuttonStatus+0x8>
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t loc_btnStatus = RELEASED;
    20fc:	19 82       	std	Y+1, r1	; 0x01

	switch (butnId)
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	3c 83       	std	Y+4, r19	; 0x04
    2106:	2b 83       	std	Y+3, r18	; 0x03
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	81 30       	cpi	r24, 0x01	; 1
    210e:	91 05       	cpc	r25, r1
    2110:	a1 f0       	breq	.+40     	; 0x213a <Button_udtbuttonStatus+0x4c>
    2112:	2b 81       	ldd	r18, Y+3	; 0x03
    2114:	3c 81       	ldd	r19, Y+4	; 0x04
    2116:	22 30       	cpi	r18, 0x02	; 2
    2118:	31 05       	cpc	r19, r1
    211a:	d1 f0       	breq	.+52     	; 0x2150 <Button_udtbuttonStatus+0x62>
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	01 f5       	brne	.+64     	; 0x2164 <Button_udtbuttonStatus+0x76>
	{
	case BUTTON0:
		if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	0e 94 04 13 	call	0x2608	; 0x2608 <Dio_udtreadChanel>
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	19 f4       	brne	.+6      	; 0x2136 <Button_udtbuttonStatus+0x48>
		{
			loc_btnStatus = PRESSED;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	17 c0       	rjmp	.+46     	; 0x2164 <Button_udtbuttonStatus+0x76>
		}
		else
		{
			loc_btnStatus = RELEASED;
    2136:	19 82       	std	Y+1, r1	; 0x01
    2138:	15 c0       	rjmp	.+42     	; 0x2164 <Button_udtbuttonStatus+0x76>
		}
		break;

	case BUTTON1:
		if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN4) == DIO_HIGH)
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	64 e0       	ldi	r22, 0x04	; 4
    213e:	0e 94 04 13 	call	0x2608	; 0x2608 <Dio_udtreadChanel>
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	19 f4       	brne	.+6      	; 0x214c <Button_udtbuttonStatus+0x5e>
		{
			loc_btnStatus = PRESSED;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	0c c0       	rjmp	.+24     	; 0x2164 <Button_udtbuttonStatus+0x76>
		}
		else
		{
			loc_btnStatus = RELEASED;
    214c:	19 82       	std	Y+1, r1	; 0x01
    214e:	0a c0       	rjmp	.+20     	; 0x2164 <Button_udtbuttonStatus+0x76>
		}
		break;

	case BUTTON2:
		if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
    2150:	83 e0       	ldi	r24, 0x03	; 3
    2152:	62 e0       	ldi	r22, 0x02	; 2
    2154:	0e 94 04 13 	call	0x2608	; 0x2608 <Dio_udtreadChanel>
    2158:	81 30       	cpi	r24, 0x01	; 1
    215a:	19 f4       	brne	.+6      	; 0x2162 <Button_udtbuttonStatus+0x74>
		{
			loc_btnStatus = PRESSED;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	01 c0       	rjmp	.+2      	; 0x2164 <Button_udtbuttonStatus+0x76>
		}
		else
		{
			loc_btnStatus = RELEASED;
    2162:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_btnStatus;
    2164:	89 81       	ldd	r24, Y+1	; 0x01
}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <GINT_vidEnableAllInterrupts>:
 */
#include "GINT_Reg.h"
#include "Bit_Math.h"

void GINT_vidEnableAllInterrupts(void)
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG,7);
    217c:	af e5       	ldi	r26, 0x5F	; 95
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	ef e5       	ldi	r30, 0x5F	; 95
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	80 68       	ori	r24, 0x80	; 128
    2188:	8c 93       	st	X, r24
}
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <GINT_vidDisableAllInterrupts>:
void GINT_vidDisableAllInterrupts(void)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG,7);
    2198:	af e5       	ldi	r26, 0x5F	; 95
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	ef e5       	ldi	r30, 0x5F	; 95
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	8f 77       	andi	r24, 0x7F	; 127
    21a4:	8c 93       	st	X, r24
}
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <EXTINT_vidEnableExtInt>:
#include "EXTINT_Types.h"
#include "EXTINT_Reg.h"
#include "Bit_Math.h"

void EXTINT_vidEnableExtInt(extint_intId_t intId, extint_sensId_t snensId)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <EXTINT_vidEnableExtInt+0x6>
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	6a 83       	std	Y+2, r22	; 0x02

}
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <Dio_vidconfigChanel>:
 */
#include "Dio.h"
#include "Bit_Math.h"

void Dio_vidconfigChanel(dio_port_t port, dio_pin_t pin,dio_dir_t dir)
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <Dio_vidconfigChanel+0x6>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <Dio_vidconfigChanel+0x8>
    21cc:	0f 92       	push	r0
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	6a 83       	std	Y+2, r22	; 0x02
    21d6:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	3d 83       	std	Y+5, r19	; 0x05
    21e0:	2c 83       	std	Y+4, r18	; 0x04
    21e2:	8c 81       	ldd	r24, Y+4	; 0x04
    21e4:	9d 81       	ldd	r25, Y+5	; 0x05
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	91 05       	cpc	r25, r1
    21ea:	09 f4       	brne	.+2      	; 0x21ee <Dio_vidconfigChanel+0x2a>
    21ec:	43 c0       	rjmp	.+134    	; 0x2274 <Dio_vidconfigChanel+0xb0>
    21ee:	2c 81       	ldd	r18, Y+4	; 0x04
    21f0:	3d 81       	ldd	r19, Y+5	; 0x05
    21f2:	22 30       	cpi	r18, 0x02	; 2
    21f4:	31 05       	cpc	r19, r1
    21f6:	2c f4       	brge	.+10     	; 0x2202 <Dio_vidconfigChanel+0x3e>
    21f8:	8c 81       	ldd	r24, Y+4	; 0x04
    21fa:	9d 81       	ldd	r25, Y+5	; 0x05
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	71 f0       	breq	.+28     	; 0x221c <Dio_vidconfigChanel+0x58>
    2200:	bc c0       	rjmp	.+376    	; 0x237a <Dio_vidconfigChanel+0x1b6>
    2202:	2c 81       	ldd	r18, Y+4	; 0x04
    2204:	3d 81       	ldd	r19, Y+5	; 0x05
    2206:	22 30       	cpi	r18, 0x02	; 2
    2208:	31 05       	cpc	r19, r1
    220a:	09 f4       	brne	.+2      	; 0x220e <Dio_vidconfigChanel+0x4a>
    220c:	5f c0       	rjmp	.+190    	; 0x22cc <Dio_vidconfigChanel+0x108>
    220e:	8c 81       	ldd	r24, Y+4	; 0x04
    2210:	9d 81       	ldd	r25, Y+5	; 0x05
    2212:	83 30       	cpi	r24, 0x03	; 3
    2214:	91 05       	cpc	r25, r1
    2216:	09 f4       	brne	.+2      	; 0x221a <Dio_vidconfigChanel+0x56>
    2218:	85 c0       	rjmp	.+266    	; 0x2324 <Dio_vidconfigChanel+0x160>
    221a:	af c0       	rjmp	.+350    	; 0x237a <Dio_vidconfigChanel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	88 23       	and	r24, r24
    2220:	a9 f4       	brne	.+42     	; 0x224c <Dio_vidconfigChanel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    2222:	aa e3       	ldi	r26, 0x3A	; 58
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	ea e3       	ldi	r30, 0x3A	; 58
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	48 2f       	mov	r20, r24
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	02 2e       	mov	r0, r18
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <Dio_vidconfigChanel+0x7c>
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	0a 94       	dec	r0
    2242:	e2 f7       	brpl	.-8      	; 0x223c <Dio_vidconfigChanel+0x78>
    2244:	80 95       	com	r24
    2246:	84 23       	and	r24, r20
    2248:	8c 93       	st	X, r24
    224a:	97 c0       	rjmp	.+302    	; 0x237a <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    224c:	aa e3       	ldi	r26, 0x3A	; 58
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	ea e3       	ldi	r30, 0x3A	; 58
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	48 2f       	mov	r20, r24
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	02 2e       	mov	r0, r18
    2264:	02 c0       	rjmp	.+4      	; 0x226a <Dio_vidconfigChanel+0xa6>
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	0a 94       	dec	r0
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <Dio_vidconfigChanel+0xa2>
    226e:	84 2b       	or	r24, r20
    2270:	8c 93       	st	X, r24
    2272:	83 c0       	rjmp	.+262    	; 0x237a <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	88 23       	and	r24, r24
    2278:	a9 f4       	brne	.+42     	; 0x22a4 <Dio_vidconfigChanel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    227a:	a7 e3       	ldi	r26, 0x37	; 55
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e7 e3       	ldi	r30, 0x37	; 55
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	48 2f       	mov	r20, r24
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	02 2e       	mov	r0, r18
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <Dio_vidconfigChanel+0xd4>
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	0a 94       	dec	r0
    229a:	e2 f7       	brpl	.-8      	; 0x2294 <Dio_vidconfigChanel+0xd0>
    229c:	80 95       	com	r24
    229e:	84 23       	and	r24, r20
    22a0:	8c 93       	st	X, r24
    22a2:	6b c0       	rjmp	.+214    	; 0x237a <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    22a4:	a7 e3       	ldi	r26, 0x37	; 55
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e7 e3       	ldi	r30, 0x37	; 55
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	48 2f       	mov	r20, r24
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	02 2e       	mov	r0, r18
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <Dio_vidconfigChanel+0xfe>
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	0a 94       	dec	r0
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <Dio_vidconfigChanel+0xfa>
    22c6:	84 2b       	or	r24, r20
    22c8:	8c 93       	st	X, r24
    22ca:	57 c0       	rjmp	.+174    	; 0x237a <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	88 23       	and	r24, r24
    22d0:	a9 f4       	brne	.+42     	; 0x22fc <Dio_vidconfigChanel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    22d2:	a4 e3       	ldi	r26, 0x34	; 52
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e4 e3       	ldi	r30, 0x34	; 52
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	48 2f       	mov	r20, r24
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	02 2e       	mov	r0, r18
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <Dio_vidconfigChanel+0x12c>
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	0a 94       	dec	r0
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <Dio_vidconfigChanel+0x128>
    22f4:	80 95       	com	r24
    22f6:	84 23       	and	r24, r20
    22f8:	8c 93       	st	X, r24
    22fa:	3f c0       	rjmp	.+126    	; 0x237a <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    22fc:	a4 e3       	ldi	r26, 0x34	; 52
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e4 e3       	ldi	r30, 0x34	; 52
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	48 2f       	mov	r20, r24
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	02 2e       	mov	r0, r18
    2314:	02 c0       	rjmp	.+4      	; 0x231a <Dio_vidconfigChanel+0x156>
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	0a 94       	dec	r0
    231c:	e2 f7       	brpl	.-8      	; 0x2316 <Dio_vidconfigChanel+0x152>
    231e:	84 2b       	or	r24, r20
    2320:	8c 93       	st	X, r24
    2322:	2b c0       	rjmp	.+86     	; 0x237a <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	88 23       	and	r24, r24
    2328:	a9 f4       	brne	.+42     	; 0x2354 <Dio_vidconfigChanel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    232a:	a1 e3       	ldi	r26, 0x31	; 49
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e1 e3       	ldi	r30, 0x31	; 49
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	48 2f       	mov	r20, r24
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	02 2e       	mov	r0, r18
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <Dio_vidconfigChanel+0x184>
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	0a 94       	dec	r0
    234a:	e2 f7       	brpl	.-8      	; 0x2344 <Dio_vidconfigChanel+0x180>
    234c:	80 95       	com	r24
    234e:	84 23       	and	r24, r20
    2350:	8c 93       	st	X, r24
    2352:	13 c0       	rjmp	.+38     	; 0x237a <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    2354:	a1 e3       	ldi	r26, 0x31	; 49
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e1 e3       	ldi	r30, 0x31	; 49
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	48 2f       	mov	r20, r24
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	02 2e       	mov	r0, r18
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <Dio_vidconfigChanel+0x1ae>
    236e:	88 0f       	add	r24, r24
    2370:	99 1f       	adc	r25, r25
    2372:	0a 94       	dec	r0
    2374:	e2 f7       	brpl	.-8      	; 0x236e <Dio_vidconfigChanel+0x1aa>
    2376:	84 2b       	or	r24, r20
    2378:	8c 93       	st	X, r24
		}
		break;
	}
}
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	cf 91       	pop	r28
    2386:	df 91       	pop	r29
    2388:	08 95       	ret

0000238a <Dio_vidwriteChanel>:

void Dio_vidwriteChanel(dio_port_t port, dio_pin_t pin,dio_level_t level)
{
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	00 d0       	rcall	.+0      	; 0x2390 <Dio_vidwriteChanel+0x6>
    2390:	00 d0       	rcall	.+0      	; 0x2392 <Dio_vidwriteChanel+0x8>
    2392:	0f 92       	push	r0
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	6a 83       	std	Y+2, r22	; 0x02
    239c:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	3d 83       	std	Y+5, r19	; 0x05
    23a6:	2c 83       	std	Y+4, r18	; 0x04
    23a8:	8c 81       	ldd	r24, Y+4	; 0x04
    23aa:	9d 81       	ldd	r25, Y+5	; 0x05
    23ac:	81 30       	cpi	r24, 0x01	; 1
    23ae:	91 05       	cpc	r25, r1
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <Dio_vidwriteChanel+0x2a>
    23b2:	43 c0       	rjmp	.+134    	; 0x243a <Dio_vidwriteChanel+0xb0>
    23b4:	2c 81       	ldd	r18, Y+4	; 0x04
    23b6:	3d 81       	ldd	r19, Y+5	; 0x05
    23b8:	22 30       	cpi	r18, 0x02	; 2
    23ba:	31 05       	cpc	r19, r1
    23bc:	2c f4       	brge	.+10     	; 0x23c8 <Dio_vidwriteChanel+0x3e>
    23be:	8c 81       	ldd	r24, Y+4	; 0x04
    23c0:	9d 81       	ldd	r25, Y+5	; 0x05
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	71 f0       	breq	.+28     	; 0x23e2 <Dio_vidwriteChanel+0x58>
    23c6:	bc c0       	rjmp	.+376    	; 0x2540 <Dio_vidwriteChanel+0x1b6>
    23c8:	2c 81       	ldd	r18, Y+4	; 0x04
    23ca:	3d 81       	ldd	r19, Y+5	; 0x05
    23cc:	22 30       	cpi	r18, 0x02	; 2
    23ce:	31 05       	cpc	r19, r1
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <Dio_vidwriteChanel+0x4a>
    23d2:	5f c0       	rjmp	.+190    	; 0x2492 <Dio_vidwriteChanel+0x108>
    23d4:	8c 81       	ldd	r24, Y+4	; 0x04
    23d6:	9d 81       	ldd	r25, Y+5	; 0x05
    23d8:	83 30       	cpi	r24, 0x03	; 3
    23da:	91 05       	cpc	r25, r1
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <Dio_vidwriteChanel+0x56>
    23de:	85 c0       	rjmp	.+266    	; 0x24ea <Dio_vidwriteChanel+0x160>
    23e0:	af c0       	rjmp	.+350    	; 0x2540 <Dio_vidwriteChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	81 30       	cpi	r24, 0x01	; 1
    23e6:	a1 f4       	brne	.+40     	; 0x2410 <Dio_vidwriteChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    23e8:	ab e3       	ldi	r26, 0x3B	; 59
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	eb e3       	ldi	r30, 0x3B	; 59
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	48 2f       	mov	r20, r24
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	02 2e       	mov	r0, r18
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <Dio_vidwriteChanel+0x7c>
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	0a 94       	dec	r0
    2408:	e2 f7       	brpl	.-8      	; 0x2402 <Dio_vidwriteChanel+0x78>
    240a:	84 2b       	or	r24, r20
    240c:	8c 93       	st	X, r24
    240e:	98 c0       	rjmp	.+304    	; 0x2540 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    2410:	ab e3       	ldi	r26, 0x3B	; 59
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	eb e3       	ldi	r30, 0x3B	; 59
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	48 2f       	mov	r20, r24
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	02 2e       	mov	r0, r18
    2428:	02 c0       	rjmp	.+4      	; 0x242e <Dio_vidwriteChanel+0xa4>
    242a:	88 0f       	add	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	0a 94       	dec	r0
    2430:	e2 f7       	brpl	.-8      	; 0x242a <Dio_vidwriteChanel+0xa0>
    2432:	80 95       	com	r24
    2434:	84 23       	and	r24, r20
    2436:	8c 93       	st	X, r24
    2438:	83 c0       	rjmp	.+262    	; 0x2540 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	a1 f4       	brne	.+40     	; 0x2468 <Dio_vidwriteChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    2440:	a8 e3       	ldi	r26, 0x38	; 56
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e8 e3       	ldi	r30, 0x38	; 56
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	48 2f       	mov	r20, r24
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	28 2f       	mov	r18, r24
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	02 2e       	mov	r0, r18
    2458:	02 c0       	rjmp	.+4      	; 0x245e <Dio_vidwriteChanel+0xd4>
    245a:	88 0f       	add	r24, r24
    245c:	99 1f       	adc	r25, r25
    245e:	0a 94       	dec	r0
    2460:	e2 f7       	brpl	.-8      	; 0x245a <Dio_vidwriteChanel+0xd0>
    2462:	84 2b       	or	r24, r20
    2464:	8c 93       	st	X, r24
    2466:	6c c0       	rjmp	.+216    	; 0x2540 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    2468:	a8 e3       	ldi	r26, 0x38	; 56
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	e8 e3       	ldi	r30, 0x38	; 56
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	48 2f       	mov	r20, r24
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	02 2e       	mov	r0, r18
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <Dio_vidwriteChanel+0xfc>
    2482:	88 0f       	add	r24, r24
    2484:	99 1f       	adc	r25, r25
    2486:	0a 94       	dec	r0
    2488:	e2 f7       	brpl	.-8      	; 0x2482 <Dio_vidwriteChanel+0xf8>
    248a:	80 95       	com	r24
    248c:	84 23       	and	r24, r20
    248e:	8c 93       	st	X, r24
    2490:	57 c0       	rjmp	.+174    	; 0x2540 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	81 30       	cpi	r24, 0x01	; 1
    2496:	a1 f4       	brne	.+40     	; 0x24c0 <Dio_vidwriteChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    2498:	a5 e3       	ldi	r26, 0x35	; 53
    249a:	b0 e0       	ldi	r27, 0x00	; 0
    249c:	e5 e3       	ldi	r30, 0x35	; 53
    249e:	f0 e0       	ldi	r31, 0x00	; 0
    24a0:	80 81       	ld	r24, Z
    24a2:	48 2f       	mov	r20, r24
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	02 2e       	mov	r0, r18
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <Dio_vidwriteChanel+0x12c>
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	0a 94       	dec	r0
    24b8:	e2 f7       	brpl	.-8      	; 0x24b2 <Dio_vidwriteChanel+0x128>
    24ba:	84 2b       	or	r24, r20
    24bc:	8c 93       	st	X, r24
    24be:	40 c0       	rjmp	.+128    	; 0x2540 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    24c0:	a5 e3       	ldi	r26, 0x35	; 53
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e5 e3       	ldi	r30, 0x35	; 53
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	48 2f       	mov	r20, r24
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	02 2e       	mov	r0, r18
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <Dio_vidwriteChanel+0x154>
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	0a 94       	dec	r0
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <Dio_vidwriteChanel+0x150>
    24e2:	80 95       	com	r24
    24e4:	84 23       	and	r24, r20
    24e6:	8c 93       	st	X, r24
    24e8:	2b c0       	rjmp	.+86     	; 0x2540 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	81 30       	cpi	r24, 0x01	; 1
    24ee:	a1 f4       	brne	.+40     	; 0x2518 <Dio_vidwriteChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    24f0:	a2 e3       	ldi	r26, 0x32	; 50
    24f2:	b0 e0       	ldi	r27, 0x00	; 0
    24f4:	e2 e3       	ldi	r30, 0x32	; 50
    24f6:	f0 e0       	ldi	r31, 0x00	; 0
    24f8:	80 81       	ld	r24, Z
    24fa:	48 2f       	mov	r20, r24
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	02 2e       	mov	r0, r18
    2508:	02 c0       	rjmp	.+4      	; 0x250e <Dio_vidwriteChanel+0x184>
    250a:	88 0f       	add	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	0a 94       	dec	r0
    2510:	e2 f7       	brpl	.-8      	; 0x250a <Dio_vidwriteChanel+0x180>
    2512:	84 2b       	or	r24, r20
    2514:	8c 93       	st	X, r24
    2516:	14 c0       	rjmp	.+40     	; 0x2540 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    2518:	a2 e3       	ldi	r26, 0x32	; 50
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e2 e3       	ldi	r30, 0x32	; 50
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	48 2f       	mov	r20, r24
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	02 2e       	mov	r0, r18
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <Dio_vidwriteChanel+0x1ac>
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	0a 94       	dec	r0
    2538:	e2 f7       	brpl	.-8      	; 0x2532 <Dio_vidwriteChanel+0x1a8>
    253a:	80 95       	com	r24
    253c:	84 23       	and	r24, r20
    253e:	8c 93       	st	X, r24
		}
		break;
	}
}
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <Dio_vidWriteChanelGroup>:

void Dio_vidWriteChanelGroup(dio_port_t port, u8 data, u8 mask)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	00 d0       	rcall	.+0      	; 0x2556 <Dio_vidWriteChanelGroup+0x6>
    2556:	00 d0       	rcall	.+0      	; 0x2558 <Dio_vidWriteChanelGroup+0x8>
    2558:	0f 92       	push	r0
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	6a 83       	std	Y+2, r22	; 0x02
    2562:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	3d 83       	std	Y+5, r19	; 0x05
    256c:	2c 83       	std	Y+4, r18	; 0x04
    256e:	8c 81       	ldd	r24, Y+4	; 0x04
    2570:	9d 81       	ldd	r25, Y+5	; 0x05
    2572:	81 30       	cpi	r24, 0x01	; 1
    2574:	91 05       	cpc	r25, r1
    2576:	01 f1       	breq	.+64     	; 0x25b8 <Dio_vidWriteChanelGroup+0x68>
    2578:	2c 81       	ldd	r18, Y+4	; 0x04
    257a:	3d 81       	ldd	r19, Y+5	; 0x05
    257c:	22 30       	cpi	r18, 0x02	; 2
    257e:	31 05       	cpc	r19, r1
    2580:	2c f4       	brge	.+10     	; 0x258c <Dio_vidWriteChanelGroup+0x3c>
    2582:	8c 81       	ldd	r24, Y+4	; 0x04
    2584:	9d 81       	ldd	r25, Y+5	; 0x05
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	61 f0       	breq	.+24     	; 0x25a2 <Dio_vidWriteChanelGroup+0x52>
    258a:	36 c0       	rjmp	.+108    	; 0x25f8 <Dio_vidWriteChanelGroup+0xa8>
    258c:	2c 81       	ldd	r18, Y+4	; 0x04
    258e:	3d 81       	ldd	r19, Y+5	; 0x05
    2590:	22 30       	cpi	r18, 0x02	; 2
    2592:	31 05       	cpc	r19, r1
    2594:	e1 f0       	breq	.+56     	; 0x25ce <Dio_vidWriteChanelGroup+0x7e>
    2596:	8c 81       	ldd	r24, Y+4	; 0x04
    2598:	9d 81       	ldd	r25, Y+5	; 0x05
    259a:	83 30       	cpi	r24, 0x03	; 3
    259c:	91 05       	cpc	r25, r1
    259e:	11 f1       	breq	.+68     	; 0x25e4 <Dio_vidWriteChanelGroup+0x94>
    25a0:	2b c0       	rjmp	.+86     	; 0x25f8 <Dio_vidWriteChanelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data);
    25a2:	ab e3       	ldi	r26, 0x3B	; 59
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	eb e3       	ldi	r30, 0x3B	; 59
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	90 81       	ld	r25, Z
    25ac:	8b 81       	ldd	r24, Y+3	; 0x03
    25ae:	98 23       	and	r25, r24
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	89 2b       	or	r24, r25
    25b4:	8c 93       	st	X, r24
    25b6:	20 c0       	rjmp	.+64     	; 0x25f8 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    25b8:	a8 e3       	ldi	r26, 0x38	; 56
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e8 e3       	ldi	r30, 0x38	; 56
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	90 81       	ld	r25, Z
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	98 23       	and	r25, r24
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	89 2b       	or	r24, r25
    25ca:	8c 93       	st	X, r24
    25cc:	15 c0       	rjmp	.+42     	; 0x25f8 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    25ce:	a5 e3       	ldi	r26, 0x35	; 53
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e5 e3       	ldi	r30, 0x35	; 53
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	90 81       	ld	r25, Z
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	98 23       	and	r25, r24
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	89 2b       	or	r24, r25
    25e0:	8c 93       	st	X, r24
    25e2:	0a c0       	rjmp	.+20     	; 0x25f8 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    25e4:	a2 e3       	ldi	r26, 0x32	; 50
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e2 e3       	ldi	r30, 0x32	; 50
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	90 81       	ld	r25, Z
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	98 23       	and	r25, r24
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	89 2b       	or	r24, r25
    25f6:	8c 93       	st	X, r24
		break;
	}
}
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	00 d0       	rcall	.+0      	; 0x260e <Dio_udtreadChanel+0x6>
    260e:	00 d0       	rcall	.+0      	; 0x2610 <Dio_udtreadChanel+0x8>
    2610:	0f 92       	push	r0
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	8a 83       	std	Y+2, r24	; 0x02
    2618:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    261a:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	3d 83       	std	Y+5, r19	; 0x05
    2624:	2c 83       	std	Y+4, r18	; 0x04
    2626:	4c 81       	ldd	r20, Y+4	; 0x04
    2628:	5d 81       	ldd	r21, Y+5	; 0x05
    262a:	41 30       	cpi	r20, 0x01	; 1
    262c:	51 05       	cpc	r21, r1
    262e:	79 f1       	breq	.+94     	; 0x268e <Dio_udtreadChanel+0x86>
    2630:	8c 81       	ldd	r24, Y+4	; 0x04
    2632:	9d 81       	ldd	r25, Y+5	; 0x05
    2634:	82 30       	cpi	r24, 0x02	; 2
    2636:	91 05       	cpc	r25, r1
    2638:	34 f4       	brge	.+12     	; 0x2646 <Dio_udtreadChanel+0x3e>
    263a:	2c 81       	ldd	r18, Y+4	; 0x04
    263c:	3d 81       	ldd	r19, Y+5	; 0x05
    263e:	21 15       	cp	r18, r1
    2640:	31 05       	cpc	r19, r1
    2642:	69 f0       	breq	.+26     	; 0x265e <Dio_udtreadChanel+0x56>
    2644:	6b c0       	rjmp	.+214    	; 0x271c <Dio_udtreadChanel+0x114>
    2646:	4c 81       	ldd	r20, Y+4	; 0x04
    2648:	5d 81       	ldd	r21, Y+5	; 0x05
    264a:	42 30       	cpi	r20, 0x02	; 2
    264c:	51 05       	cpc	r21, r1
    264e:	b9 f1       	breq	.+110    	; 0x26be <Dio_udtreadChanel+0xb6>
    2650:	8c 81       	ldd	r24, Y+4	; 0x04
    2652:	9d 81       	ldd	r25, Y+5	; 0x05
    2654:	83 30       	cpi	r24, 0x03	; 3
    2656:	91 05       	cpc	r25, r1
    2658:	09 f4       	brne	.+2      	; 0x265c <Dio_udtreadChanel+0x54>
    265a:	49 c0       	rjmp	.+146    	; 0x26ee <Dio_udtreadChanel+0xe6>
    265c:	5f c0       	rjmp	.+190    	; 0x271c <Dio_udtreadChanel+0x114>
	{
	case DIO_PORTA:
		if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    265e:	e9 e3       	ldi	r30, 0x39	; 57
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	28 2f       	mov	r18, r24
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	88 2f       	mov	r24, r24
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a9 01       	movw	r20, r18
    2670:	02 c0       	rjmp	.+4      	; 0x2676 <Dio_udtreadChanel+0x6e>
    2672:	55 95       	asr	r21
    2674:	47 95       	ror	r20
    2676:	8a 95       	dec	r24
    2678:	e2 f7       	brpl	.-8      	; 0x2672 <Dio_udtreadChanel+0x6a>
    267a:	ca 01       	movw	r24, r20
    267c:	81 70       	andi	r24, 0x01	; 1
    267e:	90 70       	andi	r25, 0x00	; 0
    2680:	88 23       	and	r24, r24
    2682:	19 f0       	breq	.+6      	; 0x268a <Dio_udtreadChanel+0x82>
		{
			loc_result = DIO_HIGH;
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	49 c0       	rjmp	.+146    	; 0x271c <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    268a:	19 82       	std	Y+1, r1	; 0x01
    268c:	47 c0       	rjmp	.+142    	; 0x271c <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    268e:	e6 e3       	ldi	r30, 0x36	; 54
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	88 2f       	mov	r24, r24
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	a9 01       	movw	r20, r18
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <Dio_udtreadChanel+0x9e>
    26a2:	55 95       	asr	r21
    26a4:	47 95       	ror	r20
    26a6:	8a 95       	dec	r24
    26a8:	e2 f7       	brpl	.-8      	; 0x26a2 <Dio_udtreadChanel+0x9a>
    26aa:	ca 01       	movw	r24, r20
    26ac:	81 70       	andi	r24, 0x01	; 1
    26ae:	90 70       	andi	r25, 0x00	; 0
    26b0:	88 23       	and	r24, r24
    26b2:	19 f0       	breq	.+6      	; 0x26ba <Dio_udtreadChanel+0xb2>
		{
			loc_result = DIO_HIGH;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	31 c0       	rjmp	.+98     	; 0x271c <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    26ba:	19 82       	std	Y+1, r1	; 0x01
    26bc:	2f c0       	rjmp	.+94     	; 0x271c <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    26be:	e3 e3       	ldi	r30, 0x33	; 51
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	28 2f       	mov	r18, r24
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	a9 01       	movw	r20, r18
    26d0:	02 c0       	rjmp	.+4      	; 0x26d6 <Dio_udtreadChanel+0xce>
    26d2:	55 95       	asr	r21
    26d4:	47 95       	ror	r20
    26d6:	8a 95       	dec	r24
    26d8:	e2 f7       	brpl	.-8      	; 0x26d2 <Dio_udtreadChanel+0xca>
    26da:	ca 01       	movw	r24, r20
    26dc:	81 70       	andi	r24, 0x01	; 1
    26de:	90 70       	andi	r25, 0x00	; 0
    26e0:	88 23       	and	r24, r24
    26e2:	19 f0       	breq	.+6      	; 0x26ea <Dio_udtreadChanel+0xe2>
		{
			loc_result = DIO_HIGH;
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	19 c0       	rjmp	.+50     	; 0x271c <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    26ea:	19 82       	std	Y+1, r1	; 0x01
    26ec:	17 c0       	rjmp	.+46     	; 0x271c <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    26ee:	e0 e3       	ldi	r30, 0x30	; 48
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	28 2f       	mov	r18, r24
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	88 2f       	mov	r24, r24
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	a9 01       	movw	r20, r18
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <Dio_udtreadChanel+0xfe>
    2702:	55 95       	asr	r21
    2704:	47 95       	ror	r20
    2706:	8a 95       	dec	r24
    2708:	e2 f7       	brpl	.-8      	; 0x2702 <Dio_udtreadChanel+0xfa>
    270a:	ca 01       	movw	r24, r20
    270c:	81 70       	andi	r24, 0x01	; 1
    270e:	90 70       	andi	r25, 0x00	; 0
    2710:	88 23       	and	r24, r24
    2712:	19 f0       	breq	.+6      	; 0x271a <Dio_udtreadChanel+0x112>
		{
			loc_result = DIO_HIGH;
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	01 c0       	rjmp	.+2      	; 0x271c <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    271a:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    271c:	89 81       	ldd	r24, Y+1	; 0x01
}
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <Dio_vidflipChanel>:

void Dio_vidflipChanel(dio_port_t port, dio_pin_t pin)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	00 d0       	rcall	.+0      	; 0x2734 <Dio_vidflipChanel+0x6>
    2734:	00 d0       	rcall	.+0      	; 0x2736 <Dio_vidflipChanel+0x8>
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	89 83       	std	Y+1, r24	; 0x01
    273c:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	3c 83       	std	Y+4, r19	; 0x04
    2746:	2b 83       	std	Y+3, r18	; 0x03
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	9c 81       	ldd	r25, Y+4	; 0x04
    274c:	81 30       	cpi	r24, 0x01	; 1
    274e:	91 05       	cpc	r25, r1
    2750:	49 f1       	breq	.+82     	; 0x27a4 <Dio_vidflipChanel+0x76>
    2752:	2b 81       	ldd	r18, Y+3	; 0x03
    2754:	3c 81       	ldd	r19, Y+4	; 0x04
    2756:	22 30       	cpi	r18, 0x02	; 2
    2758:	31 05       	cpc	r19, r1
    275a:	2c f4       	brge	.+10     	; 0x2766 <Dio_vidflipChanel+0x38>
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	61 f0       	breq	.+24     	; 0x277c <Dio_vidflipChanel+0x4e>
    2764:	5a c0       	rjmp	.+180    	; 0x281a <Dio_vidflipChanel+0xec>
    2766:	2b 81       	ldd	r18, Y+3	; 0x03
    2768:	3c 81       	ldd	r19, Y+4	; 0x04
    276a:	22 30       	cpi	r18, 0x02	; 2
    276c:	31 05       	cpc	r19, r1
    276e:	71 f1       	breq	.+92     	; 0x27cc <Dio_vidflipChanel+0x9e>
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	9c 81       	ldd	r25, Y+4	; 0x04
    2774:	83 30       	cpi	r24, 0x03	; 3
    2776:	91 05       	cpc	r25, r1
    2778:	e9 f1       	breq	.+122    	; 0x27f4 <Dio_vidflipChanel+0xc6>
    277a:	4f c0       	rjmp	.+158    	; 0x281a <Dio_vidflipChanel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    277c:	ab e3       	ldi	r26, 0x3B	; 59
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	eb e3       	ldi	r30, 0x3B	; 59
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	48 2f       	mov	r20, r24
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	02 2e       	mov	r0, r18
    2794:	02 c0       	rjmp	.+4      	; 0x279a <Dio_vidflipChanel+0x6c>
    2796:	88 0f       	add	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	0a 94       	dec	r0
    279c:	e2 f7       	brpl	.-8      	; 0x2796 <Dio_vidflipChanel+0x68>
    279e:	84 27       	eor	r24, r20
    27a0:	8c 93       	st	X, r24
    27a2:	3b c0       	rjmp	.+118    	; 0x281a <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    27a4:	a8 e3       	ldi	r26, 0x38	; 56
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e8 e3       	ldi	r30, 0x38	; 56
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	48 2f       	mov	r20, r24
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	02 2e       	mov	r0, r18
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <Dio_vidflipChanel+0x94>
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	0a 94       	dec	r0
    27c4:	e2 f7       	brpl	.-8      	; 0x27be <Dio_vidflipChanel+0x90>
    27c6:	84 27       	eor	r24, r20
    27c8:	8c 93       	st	X, r24
    27ca:	27 c0       	rjmp	.+78     	; 0x281a <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    27cc:	a5 e3       	ldi	r26, 0x35	; 53
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e5 e3       	ldi	r30, 0x35	; 53
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	48 2f       	mov	r20, r24
    27d8:	8a 81       	ldd	r24, Y+2	; 0x02
    27da:	28 2f       	mov	r18, r24
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	02 2e       	mov	r0, r18
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <Dio_vidflipChanel+0xbc>
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	0a 94       	dec	r0
    27ec:	e2 f7       	brpl	.-8      	; 0x27e6 <Dio_vidflipChanel+0xb8>
    27ee:	84 27       	eor	r24, r20
    27f0:	8c 93       	st	X, r24
    27f2:	13 c0       	rjmp	.+38     	; 0x281a <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    27f4:	a2 e3       	ldi	r26, 0x32	; 50
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e2 e3       	ldi	r30, 0x32	; 50
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	48 2f       	mov	r20, r24
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	28 2f       	mov	r18, r24
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	02 2e       	mov	r0, r18
    280c:	02 c0       	rjmp	.+4      	; 0x2812 <Dio_vidflipChanel+0xe4>
    280e:	88 0f       	add	r24, r24
    2810:	99 1f       	adc	r25, r25
    2812:	0a 94       	dec	r0
    2814:	e2 f7       	brpl	.-8      	; 0x280e <Dio_vidflipChanel+0xe0>
    2816:	84 27       	eor	r24, r20
    2818:	8c 93       	st	X, r24
		break;
	}
}
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	08 95       	ret

00002828 <Adc_vidInit>:
#include "Adc_Reg.h"
#include "Adc_Types.h"
#include "Bit_Math.h"

void Adc_vidInit(void)
{
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62

	/*	Enable ADC	*/
	SET_BIT(ADC_ADCSRA_REG, 7);
    2830:	a6 e2       	ldi	r26, 0x26	; 38
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	e6 e2       	ldi	r30, 0x26	; 38
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	80 68       	ori	r24, 0x80	; 128
    283c:	8c 93       	st	X, r24
	/*	Configure ADC prescaler	 /128	*/
	ADC_ADCSRA_REG |= 7 /*0000 0111*/;
    283e:	a6 e2       	ldi	r26, 0x26	; 38
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	e6 e2       	ldi	r30, 0x26	; 38
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	87 60       	ori	r24, 0x07	; 7
    284a:	8c 93       	st	X, r24
	/*	Select Vref +	AVCC	*/
	SET_BIT(ADC_ADMUX_REG,6);
    284c:	a7 e2       	ldi	r26, 0x27	; 39
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e7 e2       	ldi	r30, 0x27	; 39
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	80 64       	ori	r24, 0x40	; 64
    2858:	8c 93       	st	X, r24
}
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <Adc_u16AdcRead>:

f64 Adc_u16AdcRead(adc_channlId_t channel)
{
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    2868:	27 97       	sbiw	r28, 0x07	; 7
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	8f 83       	std	Y+7, r24	; 0x07
	u16 loc_adcResult = 0;
    2876:	1e 82       	std	Y+6, r1	; 0x06
    2878:	1d 82       	std	Y+5, r1	; 0x05
	f64 loc_volt =0;
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	a0 e0       	ldi	r26, 0x00	; 0
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	9a 83       	std	Y+2, r25	; 0x02
    2886:	ab 83       	std	Y+3, r26	; 0x03
    2888:	bc 83       	std	Y+4, r27	; 0x04
	/*	select ADC channel	*/
	ADC_ADMUX_REG =  (ADC_ADMUX_REG & 0xF8)| channel;
    288a:	a7 e2       	ldi	r26, 0x27	; 39
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e7 e2       	ldi	r30, 0x27	; 39
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	98 2f       	mov	r25, r24
    2896:	98 7f       	andi	r25, 0xF8	; 248
    2898:	8f 81       	ldd	r24, Y+7	; 0x07
    289a:	89 2b       	or	r24, r25
    289c:	8c 93       	st	X, r24
	/*	Start ADC conversion	*/
	SET_BIT(ADC_ADCSRA_REG,6);
    289e:	a6 e2       	ldi	r26, 0x26	; 38
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e6 e2       	ldi	r30, 0x26	; 38
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	80 64       	ori	r24, 0x40	; 64
    28aa:	8c 93       	st	X, r24

	/*	wait until ADIF flag become 1 */
	while(CHECK_BIT(ADC_ADCSRA_REG,4) !=1)
    28ac:	e6 e2       	ldi	r30, 0x26	; 38
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	82 95       	swap	r24
    28b4:	8f 70       	andi	r24, 0x0F	; 15
    28b6:	88 2f       	mov	r24, r24
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	81 70       	andi	r24, 0x01	; 1
    28bc:	90 70       	andi	r25, 0x00	; 0
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	a9 f3       	breq	.-22     	; 0x28ac <Adc_u16AdcRead+0x4c>
	{
		/*	Do Nothing	*/
	}

	/*	clear ADIF by writing 1 	*/
	SET_BIT(ADC_ADCSRA_REG,4);
    28c2:	a6 e2       	ldi	r26, 0x26	; 38
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e6 e2       	ldi	r30, 0x26	; 38
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	80 61       	ori	r24, 0x10	; 16
    28ce:	8c 93       	st	X, r24

	/*	read ADC result form ADCL, ADCH	*/
	loc_adcResult=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    28d0:	e4 e2       	ldi	r30, 0x24	; 36
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	28 2f       	mov	r18, r24
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	e5 e2       	ldi	r30, 0x25	; 37
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	88 2f       	mov	r24, r24
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	98 2f       	mov	r25, r24
    28e6:	88 27       	eor	r24, r24
    28e8:	82 2b       	or	r24, r18
    28ea:	93 2b       	or	r25, r19
    28ec:	9e 83       	std	Y+6, r25	; 0x06
    28ee:	8d 83       	std	Y+5, r24	; 0x05

	loc_volt = loc_adcResult * ADC_STEP;
    28f0:	8d 81       	ldd	r24, Y+5	; 0x05
    28f2:	9e 81       	ldd	r25, Y+6	; 0x06
    28f4:	cc 01       	movw	r24, r24
    28f6:	a0 e0       	ldi	r26, 0x00	; 0
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	bc 01       	movw	r22, r24
    2908:	cd 01       	movw	r24, r26
    290a:	2a e9       	ldi	r18, 0x9A	; 154
    290c:	39 e9       	ldi	r19, 0x99	; 153
    290e:	49 e9       	ldi	r20, 0x99	; 153
    2910:	50 e4       	ldi	r21, 0x40	; 64
    2912:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	89 83       	std	Y+1, r24	; 0x01
    291c:	9a 83       	std	Y+2, r25	; 0x02
    291e:	ab 83       	std	Y+3, r26	; 0x03
    2920:	bc 83       	std	Y+4, r27	; 0x04
	return loc_volt;
    2922:	89 81       	ldd	r24, Y+1	; 0x01
    2924:	9a 81       	ldd	r25, Y+2	; 0x02
    2926:	ab 81       	ldd	r26, Y+3	; 0x03
    2928:	bc 81       	ldd	r27, Y+4	; 0x04
}
    292a:	bc 01       	movw	r22, r24
    292c:	cd 01       	movw	r24, r26
    292e:	27 96       	adiw	r28, 0x07	; 7
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	cf 91       	pop	r28
    293c:	df 91       	pop	r29
    293e:	08 95       	ret

00002940 <__udivmodqi4>:
    2940:	99 1b       	sub	r25, r25
    2942:	79 e0       	ldi	r23, 0x09	; 9
    2944:	04 c0       	rjmp	.+8      	; 0x294e <__udivmodqi4_ep>

00002946 <__udivmodqi4_loop>:
    2946:	99 1f       	adc	r25, r25
    2948:	96 17       	cp	r25, r22
    294a:	08 f0       	brcs	.+2      	; 0x294e <__udivmodqi4_ep>
    294c:	96 1b       	sub	r25, r22

0000294e <__udivmodqi4_ep>:
    294e:	88 1f       	adc	r24, r24
    2950:	7a 95       	dec	r23
    2952:	c9 f7       	brne	.-14     	; 0x2946 <__udivmodqi4_loop>
    2954:	80 95       	com	r24
    2956:	08 95       	ret

00002958 <__prologue_saves__>:
    2958:	2f 92       	push	r2
    295a:	3f 92       	push	r3
    295c:	4f 92       	push	r4
    295e:	5f 92       	push	r5
    2960:	6f 92       	push	r6
    2962:	7f 92       	push	r7
    2964:	8f 92       	push	r8
    2966:	9f 92       	push	r9
    2968:	af 92       	push	r10
    296a:	bf 92       	push	r11
    296c:	cf 92       	push	r12
    296e:	df 92       	push	r13
    2970:	ef 92       	push	r14
    2972:	ff 92       	push	r15
    2974:	0f 93       	push	r16
    2976:	1f 93       	push	r17
    2978:	cf 93       	push	r28
    297a:	df 93       	push	r29
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	ca 1b       	sub	r28, r26
    2982:	db 0b       	sbc	r29, r27
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	09 94       	ijmp

00002990 <__epilogue_restores__>:
    2990:	2a 88       	ldd	r2, Y+18	; 0x12
    2992:	39 88       	ldd	r3, Y+17	; 0x11
    2994:	48 88       	ldd	r4, Y+16	; 0x10
    2996:	5f 84       	ldd	r5, Y+15	; 0x0f
    2998:	6e 84       	ldd	r6, Y+14	; 0x0e
    299a:	7d 84       	ldd	r7, Y+13	; 0x0d
    299c:	8c 84       	ldd	r8, Y+12	; 0x0c
    299e:	9b 84       	ldd	r9, Y+11	; 0x0b
    29a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    29a2:	b9 84       	ldd	r11, Y+9	; 0x09
    29a4:	c8 84       	ldd	r12, Y+8	; 0x08
    29a6:	df 80       	ldd	r13, Y+7	; 0x07
    29a8:	ee 80       	ldd	r14, Y+6	; 0x06
    29aa:	fd 80       	ldd	r15, Y+5	; 0x05
    29ac:	0c 81       	ldd	r16, Y+4	; 0x04
    29ae:	1b 81       	ldd	r17, Y+3	; 0x03
    29b0:	aa 81       	ldd	r26, Y+2	; 0x02
    29b2:	b9 81       	ldd	r27, Y+1	; 0x01
    29b4:	ce 0f       	add	r28, r30
    29b6:	d1 1d       	adc	r29, r1
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	de bf       	out	0x3e, r29	; 62
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	ed 01       	movw	r28, r26
    29c4:	08 95       	ret

000029c6 <sprintf>:
    29c6:	ae e0       	ldi	r26, 0x0E	; 14
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	e9 ee       	ldi	r30, 0xE9	; 233
    29cc:	f4 e1       	ldi	r31, 0x14	; 20
    29ce:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__prologue_saves__+0x1c>
    29d2:	0d 89       	ldd	r16, Y+21	; 0x15
    29d4:	1e 89       	ldd	r17, Y+22	; 0x16
    29d6:	86 e0       	ldi	r24, 0x06	; 6
    29d8:	8c 83       	std	Y+4, r24	; 0x04
    29da:	1a 83       	std	Y+2, r17	; 0x02
    29dc:	09 83       	std	Y+1, r16	; 0x01
    29de:	8f ef       	ldi	r24, 0xFF	; 255
    29e0:	9f e7       	ldi	r25, 0x7F	; 127
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	8d 83       	std	Y+5, r24	; 0x05
    29e6:	9e 01       	movw	r18, r28
    29e8:	27 5e       	subi	r18, 0xE7	; 231
    29ea:	3f 4f       	sbci	r19, 0xFF	; 255
    29ec:	ce 01       	movw	r24, r28
    29ee:	01 96       	adiw	r24, 0x01	; 1
    29f0:	6f 89       	ldd	r22, Y+23	; 0x17
    29f2:	78 8d       	ldd	r23, Y+24	; 0x18
    29f4:	a9 01       	movw	r20, r18
    29f6:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <vfprintf>
    29fa:	2f 81       	ldd	r18, Y+7	; 0x07
    29fc:	38 85       	ldd	r19, Y+8	; 0x08
    29fe:	02 0f       	add	r16, r18
    2a00:	13 1f       	adc	r17, r19
    2a02:	f8 01       	movw	r30, r16
    2a04:	10 82       	st	Z, r1
    2a06:	2e 96       	adiw	r28, 0x0e	; 14
    2a08:	e4 e0       	ldi	r30, 0x04	; 4
    2a0a:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__epilogue_restores__+0x1c>

00002a0e <vfprintf>:
    2a0e:	ab e0       	ldi	r26, 0x0B	; 11
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	ed e0       	ldi	r30, 0x0D	; 13
    2a14:	f5 e1       	ldi	r31, 0x15	; 21
    2a16:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__>
    2a1a:	3c 01       	movw	r6, r24
    2a1c:	2b 01       	movw	r4, r22
    2a1e:	5a 01       	movw	r10, r20
    2a20:	fc 01       	movw	r30, r24
    2a22:	17 82       	std	Z+7, r1	; 0x07
    2a24:	16 82       	std	Z+6, r1	; 0x06
    2a26:	83 81       	ldd	r24, Z+3	; 0x03
    2a28:	81 fd       	sbrc	r24, 1
    2a2a:	03 c0       	rjmp	.+6      	; 0x2a32 <vfprintf+0x24>
    2a2c:	6f ef       	ldi	r22, 0xFF	; 255
    2a2e:	7f ef       	ldi	r23, 0xFF	; 255
    2a30:	c6 c1       	rjmp	.+908    	; 0x2dbe <vfprintf+0x3b0>
    2a32:	9a e0       	ldi	r25, 0x0A	; 10
    2a34:	89 2e       	mov	r8, r25
    2a36:	1e 01       	movw	r2, r28
    2a38:	08 94       	sec
    2a3a:	21 1c       	adc	r2, r1
    2a3c:	31 1c       	adc	r3, r1
    2a3e:	f3 01       	movw	r30, r6
    2a40:	23 81       	ldd	r18, Z+3	; 0x03
    2a42:	f2 01       	movw	r30, r4
    2a44:	23 fd       	sbrc	r18, 3
    2a46:	85 91       	lpm	r24, Z+
    2a48:	23 ff       	sbrs	r18, 3
    2a4a:	81 91       	ld	r24, Z+
    2a4c:	2f 01       	movw	r4, r30
    2a4e:	88 23       	and	r24, r24
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <vfprintf+0x46>
    2a52:	b2 c1       	rjmp	.+868    	; 0x2db8 <vfprintf+0x3aa>
    2a54:	85 32       	cpi	r24, 0x25	; 37
    2a56:	39 f4       	brne	.+14     	; 0x2a66 <vfprintf+0x58>
    2a58:	23 fd       	sbrc	r18, 3
    2a5a:	85 91       	lpm	r24, Z+
    2a5c:	23 ff       	sbrs	r18, 3
    2a5e:	81 91       	ld	r24, Z+
    2a60:	2f 01       	movw	r4, r30
    2a62:	85 32       	cpi	r24, 0x25	; 37
    2a64:	29 f4       	brne	.+10     	; 0x2a70 <vfprintf+0x62>
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	b3 01       	movw	r22, r6
    2a6a:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <fputc>
    2a6e:	e7 cf       	rjmp	.-50     	; 0x2a3e <vfprintf+0x30>
    2a70:	98 2f       	mov	r25, r24
    2a72:	ff 24       	eor	r15, r15
    2a74:	ee 24       	eor	r14, r14
    2a76:	99 24       	eor	r9, r9
    2a78:	ff e1       	ldi	r31, 0x1F	; 31
    2a7a:	ff 15       	cp	r31, r15
    2a7c:	d0 f0       	brcs	.+52     	; 0x2ab2 <vfprintf+0xa4>
    2a7e:	9b 32       	cpi	r25, 0x2B	; 43
    2a80:	69 f0       	breq	.+26     	; 0x2a9c <vfprintf+0x8e>
    2a82:	9c 32       	cpi	r25, 0x2C	; 44
    2a84:	28 f4       	brcc	.+10     	; 0x2a90 <vfprintf+0x82>
    2a86:	90 32       	cpi	r25, 0x20	; 32
    2a88:	59 f0       	breq	.+22     	; 0x2aa0 <vfprintf+0x92>
    2a8a:	93 32       	cpi	r25, 0x23	; 35
    2a8c:	91 f4       	brne	.+36     	; 0x2ab2 <vfprintf+0xa4>
    2a8e:	0e c0       	rjmp	.+28     	; 0x2aac <vfprintf+0x9e>
    2a90:	9d 32       	cpi	r25, 0x2D	; 45
    2a92:	49 f0       	breq	.+18     	; 0x2aa6 <vfprintf+0x98>
    2a94:	90 33       	cpi	r25, 0x30	; 48
    2a96:	69 f4       	brne	.+26     	; 0x2ab2 <vfprintf+0xa4>
    2a98:	41 e0       	ldi	r20, 0x01	; 1
    2a9a:	24 c0       	rjmp	.+72     	; 0x2ae4 <vfprintf+0xd6>
    2a9c:	52 e0       	ldi	r21, 0x02	; 2
    2a9e:	f5 2a       	or	r15, r21
    2aa0:	84 e0       	ldi	r24, 0x04	; 4
    2aa2:	f8 2a       	or	r15, r24
    2aa4:	28 c0       	rjmp	.+80     	; 0x2af6 <vfprintf+0xe8>
    2aa6:	98 e0       	ldi	r25, 0x08	; 8
    2aa8:	f9 2a       	or	r15, r25
    2aaa:	25 c0       	rjmp	.+74     	; 0x2af6 <vfprintf+0xe8>
    2aac:	e0 e1       	ldi	r30, 0x10	; 16
    2aae:	fe 2a       	or	r15, r30
    2ab0:	22 c0       	rjmp	.+68     	; 0x2af6 <vfprintf+0xe8>
    2ab2:	f7 fc       	sbrc	r15, 7
    2ab4:	29 c0       	rjmp	.+82     	; 0x2b08 <vfprintf+0xfa>
    2ab6:	89 2f       	mov	r24, r25
    2ab8:	80 53       	subi	r24, 0x30	; 48
    2aba:	8a 30       	cpi	r24, 0x0A	; 10
    2abc:	70 f4       	brcc	.+28     	; 0x2ada <vfprintf+0xcc>
    2abe:	f6 fe       	sbrs	r15, 6
    2ac0:	05 c0       	rjmp	.+10     	; 0x2acc <vfprintf+0xbe>
    2ac2:	98 9c       	mul	r9, r8
    2ac4:	90 2c       	mov	r9, r0
    2ac6:	11 24       	eor	r1, r1
    2ac8:	98 0e       	add	r9, r24
    2aca:	15 c0       	rjmp	.+42     	; 0x2af6 <vfprintf+0xe8>
    2acc:	e8 9c       	mul	r14, r8
    2ace:	e0 2c       	mov	r14, r0
    2ad0:	11 24       	eor	r1, r1
    2ad2:	e8 0e       	add	r14, r24
    2ad4:	f0 e2       	ldi	r31, 0x20	; 32
    2ad6:	ff 2a       	or	r15, r31
    2ad8:	0e c0       	rjmp	.+28     	; 0x2af6 <vfprintf+0xe8>
    2ada:	9e 32       	cpi	r25, 0x2E	; 46
    2adc:	29 f4       	brne	.+10     	; 0x2ae8 <vfprintf+0xda>
    2ade:	f6 fc       	sbrc	r15, 6
    2ae0:	6b c1       	rjmp	.+726    	; 0x2db8 <vfprintf+0x3aa>
    2ae2:	40 e4       	ldi	r20, 0x40	; 64
    2ae4:	f4 2a       	or	r15, r20
    2ae6:	07 c0       	rjmp	.+14     	; 0x2af6 <vfprintf+0xe8>
    2ae8:	9c 36       	cpi	r25, 0x6C	; 108
    2aea:	19 f4       	brne	.+6      	; 0x2af2 <vfprintf+0xe4>
    2aec:	50 e8       	ldi	r21, 0x80	; 128
    2aee:	f5 2a       	or	r15, r21
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <vfprintf+0xe8>
    2af2:	98 36       	cpi	r25, 0x68	; 104
    2af4:	49 f4       	brne	.+18     	; 0x2b08 <vfprintf+0xfa>
    2af6:	f2 01       	movw	r30, r4
    2af8:	23 fd       	sbrc	r18, 3
    2afa:	95 91       	lpm	r25, Z+
    2afc:	23 ff       	sbrs	r18, 3
    2afe:	91 91       	ld	r25, Z+
    2b00:	2f 01       	movw	r4, r30
    2b02:	99 23       	and	r25, r25
    2b04:	09 f0       	breq	.+2      	; 0x2b08 <vfprintf+0xfa>
    2b06:	b8 cf       	rjmp	.-144    	; 0x2a78 <vfprintf+0x6a>
    2b08:	89 2f       	mov	r24, r25
    2b0a:	85 54       	subi	r24, 0x45	; 69
    2b0c:	83 30       	cpi	r24, 0x03	; 3
    2b0e:	18 f0       	brcs	.+6      	; 0x2b16 <vfprintf+0x108>
    2b10:	80 52       	subi	r24, 0x20	; 32
    2b12:	83 30       	cpi	r24, 0x03	; 3
    2b14:	38 f4       	brcc	.+14     	; 0x2b24 <vfprintf+0x116>
    2b16:	44 e0       	ldi	r20, 0x04	; 4
    2b18:	50 e0       	ldi	r21, 0x00	; 0
    2b1a:	a4 0e       	add	r10, r20
    2b1c:	b5 1e       	adc	r11, r21
    2b1e:	5f e3       	ldi	r21, 0x3F	; 63
    2b20:	59 83       	std	Y+1, r21	; 0x01
    2b22:	0f c0       	rjmp	.+30     	; 0x2b42 <vfprintf+0x134>
    2b24:	93 36       	cpi	r25, 0x63	; 99
    2b26:	31 f0       	breq	.+12     	; 0x2b34 <vfprintf+0x126>
    2b28:	93 37       	cpi	r25, 0x73	; 115
    2b2a:	79 f0       	breq	.+30     	; 0x2b4a <vfprintf+0x13c>
    2b2c:	93 35       	cpi	r25, 0x53	; 83
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <vfprintf+0x124>
    2b30:	56 c0       	rjmp	.+172    	; 0x2bde <vfprintf+0x1d0>
    2b32:	20 c0       	rjmp	.+64     	; 0x2b74 <vfprintf+0x166>
    2b34:	f5 01       	movw	r30, r10
    2b36:	80 81       	ld	r24, Z
    2b38:	89 83       	std	Y+1, r24	; 0x01
    2b3a:	42 e0       	ldi	r20, 0x02	; 2
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	a4 0e       	add	r10, r20
    2b40:	b5 1e       	adc	r11, r21
    2b42:	61 01       	movw	r12, r2
    2b44:	01 e0       	ldi	r16, 0x01	; 1
    2b46:	10 e0       	ldi	r17, 0x00	; 0
    2b48:	12 c0       	rjmp	.+36     	; 0x2b6e <vfprintf+0x160>
    2b4a:	f5 01       	movw	r30, r10
    2b4c:	c0 80       	ld	r12, Z
    2b4e:	d1 80       	ldd	r13, Z+1	; 0x01
    2b50:	f6 fc       	sbrc	r15, 6
    2b52:	03 c0       	rjmp	.+6      	; 0x2b5a <vfprintf+0x14c>
    2b54:	6f ef       	ldi	r22, 0xFF	; 255
    2b56:	7f ef       	ldi	r23, 0xFF	; 255
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <vfprintf+0x150>
    2b5a:	69 2d       	mov	r22, r9
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	42 e0       	ldi	r20, 0x02	; 2
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	a4 0e       	add	r10, r20
    2b64:	b5 1e       	adc	r11, r21
    2b66:	c6 01       	movw	r24, r12
    2b68:	0e 94 ef 16 	call	0x2dde	; 0x2dde <strnlen>
    2b6c:	8c 01       	movw	r16, r24
    2b6e:	5f e7       	ldi	r21, 0x7F	; 127
    2b70:	f5 22       	and	r15, r21
    2b72:	14 c0       	rjmp	.+40     	; 0x2b9c <vfprintf+0x18e>
    2b74:	f5 01       	movw	r30, r10
    2b76:	c0 80       	ld	r12, Z
    2b78:	d1 80       	ldd	r13, Z+1	; 0x01
    2b7a:	f6 fc       	sbrc	r15, 6
    2b7c:	03 c0       	rjmp	.+6      	; 0x2b84 <vfprintf+0x176>
    2b7e:	6f ef       	ldi	r22, 0xFF	; 255
    2b80:	7f ef       	ldi	r23, 0xFF	; 255
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <vfprintf+0x17a>
    2b84:	69 2d       	mov	r22, r9
    2b86:	70 e0       	ldi	r23, 0x00	; 0
    2b88:	42 e0       	ldi	r20, 0x02	; 2
    2b8a:	50 e0       	ldi	r21, 0x00	; 0
    2b8c:	a4 0e       	add	r10, r20
    2b8e:	b5 1e       	adc	r11, r21
    2b90:	c6 01       	movw	r24, r12
    2b92:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <strnlen_P>
    2b96:	8c 01       	movw	r16, r24
    2b98:	50 e8       	ldi	r21, 0x80	; 128
    2b9a:	f5 2a       	or	r15, r21
    2b9c:	f3 fe       	sbrs	r15, 3
    2b9e:	07 c0       	rjmp	.+14     	; 0x2bae <vfprintf+0x1a0>
    2ba0:	1a c0       	rjmp	.+52     	; 0x2bd6 <vfprintf+0x1c8>
    2ba2:	80 e2       	ldi	r24, 0x20	; 32
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	b3 01       	movw	r22, r6
    2ba8:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <fputc>
    2bac:	ea 94       	dec	r14
    2bae:	8e 2d       	mov	r24, r14
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	08 17       	cp	r16, r24
    2bb4:	19 07       	cpc	r17, r25
    2bb6:	a8 f3       	brcs	.-22     	; 0x2ba2 <vfprintf+0x194>
    2bb8:	0e c0       	rjmp	.+28     	; 0x2bd6 <vfprintf+0x1c8>
    2bba:	f6 01       	movw	r30, r12
    2bbc:	f7 fc       	sbrc	r15, 7
    2bbe:	85 91       	lpm	r24, Z+
    2bc0:	f7 fe       	sbrs	r15, 7
    2bc2:	81 91       	ld	r24, Z+
    2bc4:	6f 01       	movw	r12, r30
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	b3 01       	movw	r22, r6
    2bca:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <fputc>
    2bce:	e1 10       	cpse	r14, r1
    2bd0:	ea 94       	dec	r14
    2bd2:	01 50       	subi	r16, 0x01	; 1
    2bd4:	10 40       	sbci	r17, 0x00	; 0
    2bd6:	01 15       	cp	r16, r1
    2bd8:	11 05       	cpc	r17, r1
    2bda:	79 f7       	brne	.-34     	; 0x2bba <vfprintf+0x1ac>
    2bdc:	ea c0       	rjmp	.+468    	; 0x2db2 <vfprintf+0x3a4>
    2bde:	94 36       	cpi	r25, 0x64	; 100
    2be0:	11 f0       	breq	.+4      	; 0x2be6 <vfprintf+0x1d8>
    2be2:	99 36       	cpi	r25, 0x69	; 105
    2be4:	69 f5       	brne	.+90     	; 0x2c40 <vfprintf+0x232>
    2be6:	f7 fe       	sbrs	r15, 7
    2be8:	08 c0       	rjmp	.+16     	; 0x2bfa <vfprintf+0x1ec>
    2bea:	f5 01       	movw	r30, r10
    2bec:	20 81       	ld	r18, Z
    2bee:	31 81       	ldd	r19, Z+1	; 0x01
    2bf0:	42 81       	ldd	r20, Z+2	; 0x02
    2bf2:	53 81       	ldd	r21, Z+3	; 0x03
    2bf4:	84 e0       	ldi	r24, 0x04	; 4
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0a c0       	rjmp	.+20     	; 0x2c0e <vfprintf+0x200>
    2bfa:	f5 01       	movw	r30, r10
    2bfc:	80 81       	ld	r24, Z
    2bfe:	91 81       	ldd	r25, Z+1	; 0x01
    2c00:	9c 01       	movw	r18, r24
    2c02:	44 27       	eor	r20, r20
    2c04:	37 fd       	sbrc	r19, 7
    2c06:	40 95       	com	r20
    2c08:	54 2f       	mov	r21, r20
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	a8 0e       	add	r10, r24
    2c10:	b9 1e       	adc	r11, r25
    2c12:	9f e6       	ldi	r25, 0x6F	; 111
    2c14:	f9 22       	and	r15, r25
    2c16:	57 ff       	sbrs	r21, 7
    2c18:	09 c0       	rjmp	.+18     	; 0x2c2c <vfprintf+0x21e>
    2c1a:	50 95       	com	r21
    2c1c:	40 95       	com	r20
    2c1e:	30 95       	com	r19
    2c20:	21 95       	neg	r18
    2c22:	3f 4f       	sbci	r19, 0xFF	; 255
    2c24:	4f 4f       	sbci	r20, 0xFF	; 255
    2c26:	5f 4f       	sbci	r21, 0xFF	; 255
    2c28:	e0 e8       	ldi	r30, 0x80	; 128
    2c2a:	fe 2a       	or	r15, r30
    2c2c:	ca 01       	movw	r24, r20
    2c2e:	b9 01       	movw	r22, r18
    2c30:	a1 01       	movw	r20, r2
    2c32:	2a e0       	ldi	r18, 0x0A	; 10
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <__ultoa_invert>
    2c3a:	d8 2e       	mov	r13, r24
    2c3c:	d2 18       	sub	r13, r2
    2c3e:	40 c0       	rjmp	.+128    	; 0x2cc0 <vfprintf+0x2b2>
    2c40:	95 37       	cpi	r25, 0x75	; 117
    2c42:	29 f4       	brne	.+10     	; 0x2c4e <vfprintf+0x240>
    2c44:	1f 2d       	mov	r17, r15
    2c46:	1f 7e       	andi	r17, 0xEF	; 239
    2c48:	2a e0       	ldi	r18, 0x0A	; 10
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	1d c0       	rjmp	.+58     	; 0x2c88 <vfprintf+0x27a>
    2c4e:	1f 2d       	mov	r17, r15
    2c50:	19 7f       	andi	r17, 0xF9	; 249
    2c52:	9f 36       	cpi	r25, 0x6F	; 111
    2c54:	61 f0       	breq	.+24     	; 0x2c6e <vfprintf+0x260>
    2c56:	90 37       	cpi	r25, 0x70	; 112
    2c58:	20 f4       	brcc	.+8      	; 0x2c62 <vfprintf+0x254>
    2c5a:	98 35       	cpi	r25, 0x58	; 88
    2c5c:	09 f0       	breq	.+2      	; 0x2c60 <vfprintf+0x252>
    2c5e:	ac c0       	rjmp	.+344    	; 0x2db8 <vfprintf+0x3aa>
    2c60:	0f c0       	rjmp	.+30     	; 0x2c80 <vfprintf+0x272>
    2c62:	90 37       	cpi	r25, 0x70	; 112
    2c64:	39 f0       	breq	.+14     	; 0x2c74 <vfprintf+0x266>
    2c66:	98 37       	cpi	r25, 0x78	; 120
    2c68:	09 f0       	breq	.+2      	; 0x2c6c <vfprintf+0x25e>
    2c6a:	a6 c0       	rjmp	.+332    	; 0x2db8 <vfprintf+0x3aa>
    2c6c:	04 c0       	rjmp	.+8      	; 0x2c76 <vfprintf+0x268>
    2c6e:	28 e0       	ldi	r18, 0x08	; 8
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	0a c0       	rjmp	.+20     	; 0x2c88 <vfprintf+0x27a>
    2c74:	10 61       	ori	r17, 0x10	; 16
    2c76:	14 fd       	sbrc	r17, 4
    2c78:	14 60       	ori	r17, 0x04	; 4
    2c7a:	20 e1       	ldi	r18, 0x10	; 16
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	04 c0       	rjmp	.+8      	; 0x2c88 <vfprintf+0x27a>
    2c80:	14 fd       	sbrc	r17, 4
    2c82:	16 60       	ori	r17, 0x06	; 6
    2c84:	20 e1       	ldi	r18, 0x10	; 16
    2c86:	32 e0       	ldi	r19, 0x02	; 2
    2c88:	17 ff       	sbrs	r17, 7
    2c8a:	08 c0       	rjmp	.+16     	; 0x2c9c <vfprintf+0x28e>
    2c8c:	f5 01       	movw	r30, r10
    2c8e:	60 81       	ld	r22, Z
    2c90:	71 81       	ldd	r23, Z+1	; 0x01
    2c92:	82 81       	ldd	r24, Z+2	; 0x02
    2c94:	93 81       	ldd	r25, Z+3	; 0x03
    2c96:	44 e0       	ldi	r20, 0x04	; 4
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	08 c0       	rjmp	.+16     	; 0x2cac <vfprintf+0x29e>
    2c9c:	f5 01       	movw	r30, r10
    2c9e:	80 81       	ld	r24, Z
    2ca0:	91 81       	ldd	r25, Z+1	; 0x01
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	42 e0       	ldi	r20, 0x02	; 2
    2caa:	50 e0       	ldi	r21, 0x00	; 0
    2cac:	a4 0e       	add	r10, r20
    2cae:	b5 1e       	adc	r11, r21
    2cb0:	a1 01       	movw	r20, r2
    2cb2:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <__ultoa_invert>
    2cb6:	d8 2e       	mov	r13, r24
    2cb8:	d2 18       	sub	r13, r2
    2cba:	8f e7       	ldi	r24, 0x7F	; 127
    2cbc:	f8 2e       	mov	r15, r24
    2cbe:	f1 22       	and	r15, r17
    2cc0:	f6 fe       	sbrs	r15, 6
    2cc2:	0b c0       	rjmp	.+22     	; 0x2cda <vfprintf+0x2cc>
    2cc4:	5e ef       	ldi	r21, 0xFE	; 254
    2cc6:	f5 22       	and	r15, r21
    2cc8:	d9 14       	cp	r13, r9
    2cca:	38 f4       	brcc	.+14     	; 0x2cda <vfprintf+0x2cc>
    2ccc:	f4 fe       	sbrs	r15, 4
    2cce:	07 c0       	rjmp	.+14     	; 0x2cde <vfprintf+0x2d0>
    2cd0:	f2 fc       	sbrc	r15, 2
    2cd2:	05 c0       	rjmp	.+10     	; 0x2cde <vfprintf+0x2d0>
    2cd4:	8f ee       	ldi	r24, 0xEF	; 239
    2cd6:	f8 22       	and	r15, r24
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <vfprintf+0x2d0>
    2cda:	1d 2d       	mov	r17, r13
    2cdc:	01 c0       	rjmp	.+2      	; 0x2ce0 <vfprintf+0x2d2>
    2cde:	19 2d       	mov	r17, r9
    2ce0:	f4 fe       	sbrs	r15, 4
    2ce2:	0d c0       	rjmp	.+26     	; 0x2cfe <vfprintf+0x2f0>
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ed 0d       	add	r30, r13
    2ce8:	f1 1d       	adc	r31, r1
    2cea:	80 81       	ld	r24, Z
    2cec:	80 33       	cpi	r24, 0x30	; 48
    2cee:	19 f4       	brne	.+6      	; 0x2cf6 <vfprintf+0x2e8>
    2cf0:	99 ee       	ldi	r25, 0xE9	; 233
    2cf2:	f9 22       	and	r15, r25
    2cf4:	08 c0       	rjmp	.+16     	; 0x2d06 <vfprintf+0x2f8>
    2cf6:	1f 5f       	subi	r17, 0xFF	; 255
    2cf8:	f2 fe       	sbrs	r15, 2
    2cfa:	05 c0       	rjmp	.+10     	; 0x2d06 <vfprintf+0x2f8>
    2cfc:	03 c0       	rjmp	.+6      	; 0x2d04 <vfprintf+0x2f6>
    2cfe:	8f 2d       	mov	r24, r15
    2d00:	86 78       	andi	r24, 0x86	; 134
    2d02:	09 f0       	breq	.+2      	; 0x2d06 <vfprintf+0x2f8>
    2d04:	1f 5f       	subi	r17, 0xFF	; 255
    2d06:	0f 2d       	mov	r16, r15
    2d08:	f3 fc       	sbrc	r15, 3
    2d0a:	14 c0       	rjmp	.+40     	; 0x2d34 <vfprintf+0x326>
    2d0c:	f0 fe       	sbrs	r15, 0
    2d0e:	0f c0       	rjmp	.+30     	; 0x2d2e <vfprintf+0x320>
    2d10:	1e 15       	cp	r17, r14
    2d12:	10 f0       	brcs	.+4      	; 0x2d18 <vfprintf+0x30a>
    2d14:	9d 2c       	mov	r9, r13
    2d16:	0b c0       	rjmp	.+22     	; 0x2d2e <vfprintf+0x320>
    2d18:	9d 2c       	mov	r9, r13
    2d1a:	9e 0c       	add	r9, r14
    2d1c:	91 1a       	sub	r9, r17
    2d1e:	1e 2d       	mov	r17, r14
    2d20:	06 c0       	rjmp	.+12     	; 0x2d2e <vfprintf+0x320>
    2d22:	80 e2       	ldi	r24, 0x20	; 32
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	b3 01       	movw	r22, r6
    2d28:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <fputc>
    2d2c:	1f 5f       	subi	r17, 0xFF	; 255
    2d2e:	1e 15       	cp	r17, r14
    2d30:	c0 f3       	brcs	.-16     	; 0x2d22 <vfprintf+0x314>
    2d32:	04 c0       	rjmp	.+8      	; 0x2d3c <vfprintf+0x32e>
    2d34:	1e 15       	cp	r17, r14
    2d36:	10 f4       	brcc	.+4      	; 0x2d3c <vfprintf+0x32e>
    2d38:	e1 1a       	sub	r14, r17
    2d3a:	01 c0       	rjmp	.+2      	; 0x2d3e <vfprintf+0x330>
    2d3c:	ee 24       	eor	r14, r14
    2d3e:	04 ff       	sbrs	r16, 4
    2d40:	0f c0       	rjmp	.+30     	; 0x2d60 <vfprintf+0x352>
    2d42:	80 e3       	ldi	r24, 0x30	; 48
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	b3 01       	movw	r22, r6
    2d48:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <fputc>
    2d4c:	02 ff       	sbrs	r16, 2
    2d4e:	1d c0       	rjmp	.+58     	; 0x2d8a <vfprintf+0x37c>
    2d50:	01 fd       	sbrc	r16, 1
    2d52:	03 c0       	rjmp	.+6      	; 0x2d5a <vfprintf+0x34c>
    2d54:	88 e7       	ldi	r24, 0x78	; 120
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	0e c0       	rjmp	.+28     	; 0x2d76 <vfprintf+0x368>
    2d5a:	88 e5       	ldi	r24, 0x58	; 88
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	0b c0       	rjmp	.+22     	; 0x2d76 <vfprintf+0x368>
    2d60:	80 2f       	mov	r24, r16
    2d62:	86 78       	andi	r24, 0x86	; 134
    2d64:	91 f0       	breq	.+36     	; 0x2d8a <vfprintf+0x37c>
    2d66:	01 ff       	sbrs	r16, 1
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <vfprintf+0x360>
    2d6a:	8b e2       	ldi	r24, 0x2B	; 43
    2d6c:	01 c0       	rjmp	.+2      	; 0x2d70 <vfprintf+0x362>
    2d6e:	80 e2       	ldi	r24, 0x20	; 32
    2d70:	f7 fc       	sbrc	r15, 7
    2d72:	8d e2       	ldi	r24, 0x2D	; 45
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	b3 01       	movw	r22, r6
    2d78:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <fputc>
    2d7c:	06 c0       	rjmp	.+12     	; 0x2d8a <vfprintf+0x37c>
    2d7e:	80 e3       	ldi	r24, 0x30	; 48
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	b3 01       	movw	r22, r6
    2d84:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <fputc>
    2d88:	9a 94       	dec	r9
    2d8a:	d9 14       	cp	r13, r9
    2d8c:	c0 f3       	brcs	.-16     	; 0x2d7e <vfprintf+0x370>
    2d8e:	da 94       	dec	r13
    2d90:	f1 01       	movw	r30, r2
    2d92:	ed 0d       	add	r30, r13
    2d94:	f1 1d       	adc	r31, r1
    2d96:	80 81       	ld	r24, Z
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	b3 01       	movw	r22, r6
    2d9c:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <fputc>
    2da0:	dd 20       	and	r13, r13
    2da2:	a9 f7       	brne	.-22     	; 0x2d8e <vfprintf+0x380>
    2da4:	06 c0       	rjmp	.+12     	; 0x2db2 <vfprintf+0x3a4>
    2da6:	80 e2       	ldi	r24, 0x20	; 32
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	b3 01       	movw	r22, r6
    2dac:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <fputc>
    2db0:	ea 94       	dec	r14
    2db2:	ee 20       	and	r14, r14
    2db4:	c1 f7       	brne	.-16     	; 0x2da6 <vfprintf+0x398>
    2db6:	43 ce       	rjmp	.-890    	; 0x2a3e <vfprintf+0x30>
    2db8:	f3 01       	movw	r30, r6
    2dba:	66 81       	ldd	r22, Z+6	; 0x06
    2dbc:	77 81       	ldd	r23, Z+7	; 0x07
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	2b 96       	adiw	r28, 0x0b	; 11
    2dc2:	e2 e1       	ldi	r30, 0x12	; 18
    2dc4:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__>

00002dc8 <strnlen_P>:
    2dc8:	fc 01       	movw	r30, r24
    2dca:	05 90       	lpm	r0, Z+
    2dcc:	61 50       	subi	r22, 0x01	; 1
    2dce:	70 40       	sbci	r23, 0x00	; 0
    2dd0:	01 10       	cpse	r0, r1
    2dd2:	d8 f7       	brcc	.-10     	; 0x2dca <strnlen_P+0x2>
    2dd4:	80 95       	com	r24
    2dd6:	90 95       	com	r25
    2dd8:	8e 0f       	add	r24, r30
    2dda:	9f 1f       	adc	r25, r31
    2ddc:	08 95       	ret

00002dde <strnlen>:
    2dde:	fc 01       	movw	r30, r24
    2de0:	61 50       	subi	r22, 0x01	; 1
    2de2:	70 40       	sbci	r23, 0x00	; 0
    2de4:	01 90       	ld	r0, Z+
    2de6:	01 10       	cpse	r0, r1
    2de8:	d8 f7       	brcc	.-10     	; 0x2de0 <strnlen+0x2>
    2dea:	80 95       	com	r24
    2dec:	90 95       	com	r25
    2dee:	8e 0f       	add	r24, r30
    2df0:	9f 1f       	adc	r25, r31
    2df2:	08 95       	ret

00002df4 <fputc>:
    2df4:	0f 93       	push	r16
    2df6:	1f 93       	push	r17
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	8c 01       	movw	r16, r24
    2dfe:	eb 01       	movw	r28, r22
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	81 ff       	sbrs	r24, 1
    2e04:	1b c0       	rjmp	.+54     	; 0x2e3c <fputc+0x48>
    2e06:	82 ff       	sbrs	r24, 2
    2e08:	0d c0       	rjmp	.+26     	; 0x2e24 <fputc+0x30>
    2e0a:	2e 81       	ldd	r18, Y+6	; 0x06
    2e0c:	3f 81       	ldd	r19, Y+7	; 0x07
    2e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e10:	9d 81       	ldd	r25, Y+5	; 0x05
    2e12:	28 17       	cp	r18, r24
    2e14:	39 07       	cpc	r19, r25
    2e16:	64 f4       	brge	.+24     	; 0x2e30 <fputc+0x3c>
    2e18:	e8 81       	ld	r30, Y
    2e1a:	f9 81       	ldd	r31, Y+1	; 0x01
    2e1c:	01 93       	st	Z+, r16
    2e1e:	f9 83       	std	Y+1, r31	; 0x01
    2e20:	e8 83       	st	Y, r30
    2e22:	06 c0       	rjmp	.+12     	; 0x2e30 <fputc+0x3c>
    2e24:	e8 85       	ldd	r30, Y+8	; 0x08
    2e26:	f9 85       	ldd	r31, Y+9	; 0x09
    2e28:	80 2f       	mov	r24, r16
    2e2a:	09 95       	icall
    2e2c:	89 2b       	or	r24, r25
    2e2e:	31 f4       	brne	.+12     	; 0x2e3c <fputc+0x48>
    2e30:	8e 81       	ldd	r24, Y+6	; 0x06
    2e32:	9f 81       	ldd	r25, Y+7	; 0x07
    2e34:	01 96       	adiw	r24, 0x01	; 1
    2e36:	9f 83       	std	Y+7, r25	; 0x07
    2e38:	8e 83       	std	Y+6, r24	; 0x06
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <fputc+0x4c>
    2e3c:	0f ef       	ldi	r16, 0xFF	; 255
    2e3e:	1f ef       	ldi	r17, 0xFF	; 255
    2e40:	c8 01       	movw	r24, r16
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	1f 91       	pop	r17
    2e48:	0f 91       	pop	r16
    2e4a:	08 95       	ret

00002e4c <__ultoa_invert>:
    2e4c:	fa 01       	movw	r30, r20
    2e4e:	aa 27       	eor	r26, r26
    2e50:	28 30       	cpi	r18, 0x08	; 8
    2e52:	51 f1       	breq	.+84     	; 0x2ea8 <__ultoa_invert+0x5c>
    2e54:	20 31       	cpi	r18, 0x10	; 16
    2e56:	81 f1       	breq	.+96     	; 0x2eb8 <__ultoa_invert+0x6c>
    2e58:	e8 94       	clt
    2e5a:	6f 93       	push	r22
    2e5c:	6e 7f       	andi	r22, 0xFE	; 254
    2e5e:	6e 5f       	subi	r22, 0xFE	; 254
    2e60:	7f 4f       	sbci	r23, 0xFF	; 255
    2e62:	8f 4f       	sbci	r24, 0xFF	; 255
    2e64:	9f 4f       	sbci	r25, 0xFF	; 255
    2e66:	af 4f       	sbci	r26, 0xFF	; 255
    2e68:	b1 e0       	ldi	r27, 0x01	; 1
    2e6a:	3e d0       	rcall	.+124    	; 0x2ee8 <__ultoa_invert+0x9c>
    2e6c:	b4 e0       	ldi	r27, 0x04	; 4
    2e6e:	3c d0       	rcall	.+120    	; 0x2ee8 <__ultoa_invert+0x9c>
    2e70:	67 0f       	add	r22, r23
    2e72:	78 1f       	adc	r23, r24
    2e74:	89 1f       	adc	r24, r25
    2e76:	9a 1f       	adc	r25, r26
    2e78:	a1 1d       	adc	r26, r1
    2e7a:	68 0f       	add	r22, r24
    2e7c:	79 1f       	adc	r23, r25
    2e7e:	8a 1f       	adc	r24, r26
    2e80:	91 1d       	adc	r25, r1
    2e82:	a1 1d       	adc	r26, r1
    2e84:	6a 0f       	add	r22, r26
    2e86:	71 1d       	adc	r23, r1
    2e88:	81 1d       	adc	r24, r1
    2e8a:	91 1d       	adc	r25, r1
    2e8c:	a1 1d       	adc	r26, r1
    2e8e:	20 d0       	rcall	.+64     	; 0x2ed0 <__ultoa_invert+0x84>
    2e90:	09 f4       	brne	.+2      	; 0x2e94 <__ultoa_invert+0x48>
    2e92:	68 94       	set
    2e94:	3f 91       	pop	r19
    2e96:	2a e0       	ldi	r18, 0x0A	; 10
    2e98:	26 9f       	mul	r18, r22
    2e9a:	11 24       	eor	r1, r1
    2e9c:	30 19       	sub	r19, r0
    2e9e:	30 5d       	subi	r19, 0xD0	; 208
    2ea0:	31 93       	st	Z+, r19
    2ea2:	de f6       	brtc	.-74     	; 0x2e5a <__ultoa_invert+0xe>
    2ea4:	cf 01       	movw	r24, r30
    2ea6:	08 95       	ret
    2ea8:	46 2f       	mov	r20, r22
    2eaa:	47 70       	andi	r20, 0x07	; 7
    2eac:	40 5d       	subi	r20, 0xD0	; 208
    2eae:	41 93       	st	Z+, r20
    2eb0:	b3 e0       	ldi	r27, 0x03	; 3
    2eb2:	0f d0       	rcall	.+30     	; 0x2ed2 <__ultoa_invert+0x86>
    2eb4:	c9 f7       	brne	.-14     	; 0x2ea8 <__ultoa_invert+0x5c>
    2eb6:	f6 cf       	rjmp	.-20     	; 0x2ea4 <__ultoa_invert+0x58>
    2eb8:	46 2f       	mov	r20, r22
    2eba:	4f 70       	andi	r20, 0x0F	; 15
    2ebc:	40 5d       	subi	r20, 0xD0	; 208
    2ebe:	4a 33       	cpi	r20, 0x3A	; 58
    2ec0:	18 f0       	brcs	.+6      	; 0x2ec8 <__ultoa_invert+0x7c>
    2ec2:	49 5d       	subi	r20, 0xD9	; 217
    2ec4:	31 fd       	sbrc	r19, 1
    2ec6:	40 52       	subi	r20, 0x20	; 32
    2ec8:	41 93       	st	Z+, r20
    2eca:	02 d0       	rcall	.+4      	; 0x2ed0 <__ultoa_invert+0x84>
    2ecc:	a9 f7       	brne	.-22     	; 0x2eb8 <__ultoa_invert+0x6c>
    2ece:	ea cf       	rjmp	.-44     	; 0x2ea4 <__ultoa_invert+0x58>
    2ed0:	b4 e0       	ldi	r27, 0x04	; 4
    2ed2:	a6 95       	lsr	r26
    2ed4:	97 95       	ror	r25
    2ed6:	87 95       	ror	r24
    2ed8:	77 95       	ror	r23
    2eda:	67 95       	ror	r22
    2edc:	ba 95       	dec	r27
    2ede:	c9 f7       	brne	.-14     	; 0x2ed2 <__ultoa_invert+0x86>
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	61 05       	cpc	r22, r1
    2ee4:	71 05       	cpc	r23, r1
    2ee6:	08 95       	ret
    2ee8:	9b 01       	movw	r18, r22
    2eea:	ac 01       	movw	r20, r24
    2eec:	0a 2e       	mov	r0, r26
    2eee:	06 94       	lsr	r0
    2ef0:	57 95       	ror	r21
    2ef2:	47 95       	ror	r20
    2ef4:	37 95       	ror	r19
    2ef6:	27 95       	ror	r18
    2ef8:	ba 95       	dec	r27
    2efa:	c9 f7       	brne	.-14     	; 0x2eee <__ultoa_invert+0xa2>
    2efc:	62 0f       	add	r22, r18
    2efe:	73 1f       	adc	r23, r19
    2f00:	84 1f       	adc	r24, r20
    2f02:	95 1f       	adc	r25, r21
    2f04:	a0 1d       	adc	r26, r0
    2f06:	08 95       	ret

00002f08 <_exit>:
    2f08:	f8 94       	cli

00002f0a <__stop_program>:
    2f0a:	ff cf       	rjmp	.-2      	; 0x2f0a <__stop_program>
