
Oct20_Amit_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003574  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00003574  000035e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003d50  00000000  00000000  00003704  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001f9c  00000000  00000000  00007454  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000093f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00009590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00009782  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000bb8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000cf13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000e0ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000e2ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000e5a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ef10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 07 	call	0xe1e	; 0xe1e <main>
      7a:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 e6       	ldi	r22, 0x63	; 99
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e5 59       	subi	r30, 0x95	; 149
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <main>:
#include "Uart.h"
#include "Eeprom24C16.h"

/*	Slave Code*/
int main()
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	0f 92       	push	r0
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	u8 loc_eepromReturn =0;
     e28:	19 82       	std	Y+1, r1	; 0x01
	Lcd_vidinit();
     e2a:	0e 94 33 0a 	call	0x1466	; 0x1466 <Lcd_vidinit>
	Eeprom24C16_Init();
     e2e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Eeprom24C16_Init>
	Eeprom24C16_WriteByte(0, 'A');
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	61 e4       	ldi	r22, 0x41	; 65
     e38:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <Eeprom24C16_WriteByte>
	loc_eepromReturn = Eeprom24C16_ReadByte(0);
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 2f 10 	call	0x205e	; 0x205e <Eeprom24C16_ReadByte>
     e44:	89 83       	std	Y+1, r24	; 0x01
	Lcd_vidRowColumn(0, 0);
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <Lcd_vidRowColumn>
	Lcd_vidDisplayChar(loc_eepromReturn);
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <Lcd_vidDisplayChar>
     e54:	ff cf       	rjmp	.-2      	; 0xe54 <main+0x36>

00000e56 <SSD_vidinit>:
#include "SSD.h"
#include "Dio.h"
#include <util/delay.h>

void SSD_vidinit(void)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	41 e0       	ldi	r20, 0x01	; 1
     e64:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	62 e0       	ldi	r22, 0x02	; 2
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>

	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	64 e0       	ldi	r22, 0x04	; 4
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	65 e0       	ldi	r22, 0x05	; 5
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	66 e0       	ldi	r22, 0x06	; 6
     e8a:	41 e0       	ldi	r20, 0x01	; 1
     e8c:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	67 e0       	ldi	r22, 0x07	; 7
     e94:	41 e0       	ldi	r20, 0x01	; 1
     e96:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
}
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <SSD_viddisplyNum>:

void SSD_viddisplyNum(u8 num)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	e3 97       	sbiw	r28, 0x33	; 51
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	8b ab       	std	Y+51, r24	; 0x33
	u8 loc_secondDigit =  (num%10)<<4;
     eb6:	8b a9       	ldd	r24, Y+51	; 0x33
     eb8:	9a e0       	ldi	r25, 0x0A	; 10
     eba:	69 2f       	mov	r22, r25
     ebc:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__udivmodqi4>
     ec0:	89 2f       	mov	r24, r25
     ec2:	82 95       	swap	r24
     ec4:	80 7f       	andi	r24, 0xF0	; 240
     ec6:	8a ab       	std	Y+50, r24	; 0x32
	u8 loc_firstDigit = (num/10)<<4;
     ec8:	8b a9       	ldd	r24, Y+51	; 0x33
     eca:	9a e0       	ldi	r25, 0x0A	; 10
     ecc:	69 2f       	mov	r22, r25
     ece:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <__udivmodqi4>
     ed2:	82 95       	swap	r24
     ed4:	80 7f       	andi	r24, 0xF0	; 240
     ed6:	89 ab       	std	Y+49, r24	; 0x31

	/* Enable SSD 1	-> EN1 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_HIGH);
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	62 e0       	ldi	r22, 0x02	; 2
     edc:	41 e0       	ldi	r20, 0x01	; 1
     ede:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
	/* Disable SSD 2 -> EN2 =Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	40 e0       	ldi	r20, 0x00	; 0
     ee8:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
	/* Write first digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_firstDigit, SSD_MASK);
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	69 a9       	ldd	r22, Y+49	; 0x31
     ef0:	4f e0       	ldi	r20, 0x0F	; 15
     ef2:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <Dio_vidWriteChanelGroup>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a8 ec       	ldi	r26, 0xC8	; 200
     efc:	b2 e4       	ldi	r27, 0x42	; 66
     efe:	8d a7       	std	Y+45, r24	; 0x2d
     f00:	9e a7       	std	Y+46, r25	; 0x2e
     f02:	af a7       	std	Y+47, r26	; 0x2f
     f04:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f06:	6d a5       	ldd	r22, Y+45	; 0x2d
     f08:	7e a5       	ldd	r23, Y+46	; 0x2e
     f0a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f0c:	98 a9       	ldd	r25, Y+48	; 0x30
     f0e:	2b ea       	ldi	r18, 0xAB	; 171
     f10:	3a ea       	ldi	r19, 0xAA	; 170
     f12:	4a ea       	ldi	r20, 0xAA	; 170
     f14:	50 e4       	ldi	r21, 0x40	; 64
     f16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	89 a7       	std	Y+41, r24	; 0x29
     f20:	9a a7       	std	Y+42, r25	; 0x2a
     f22:	ab a7       	std	Y+43, r26	; 0x2b
     f24:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     f26:	69 a5       	ldd	r22, Y+41	; 0x29
     f28:	7a a5       	ldd	r23, Y+42	; 0x2a
     f2a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f2c:	9c a5       	ldd	r25, Y+44	; 0x2c
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e8       	ldi	r20, 0x80	; 128
     f34:	5f e3       	ldi	r21, 0x3F	; 63
     f36:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f3a:	88 23       	and	r24, r24
     f3c:	1c f4       	brge	.+6      	; 0xf44 <SSD_viddisplyNum+0xa4>
		__ticks = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	88 a7       	std	Y+40, r24	; 0x28
     f42:	91 c0       	rjmp	.+290    	; 0x1066 <SSD_viddisplyNum+0x1c6>
	else if (__tmp > 255)
     f44:	69 a5       	ldd	r22, Y+41	; 0x29
     f46:	7a a5       	ldd	r23, Y+42	; 0x2a
     f48:	8b a5       	ldd	r24, Y+43	; 0x2b
     f4a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	4f e7       	ldi	r20, 0x7F	; 127
     f52:	53 e4       	ldi	r21, 0x43	; 67
     f54:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f58:	18 16       	cp	r1, r24
     f5a:	0c f0       	brlt	.+2      	; 0xf5e <SSD_viddisplyNum+0xbe>
     f5c:	7b c0       	rjmp	.+246    	; 0x1054 <SSD_viddisplyNum+0x1b4>
	{
		_delay_ms(__us / 1000.0);
     f5e:	6d a5       	ldd	r22, Y+45	; 0x2d
     f60:	7e a5       	ldd	r23, Y+46	; 0x2e
     f62:	8f a5       	ldd	r24, Y+47	; 0x2f
     f64:	98 a9       	ldd	r25, Y+48	; 0x30
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	4a e7       	ldi	r20, 0x7A	; 122
     f6c:	54 e4       	ldi	r21, 0x44	; 68
     f6e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	8c a3       	std	Y+36, r24	; 0x24
     f78:	9d a3       	std	Y+37, r25	; 0x25
     f7a:	ae a3       	std	Y+38, r26	; 0x26
     f7c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7e:	6c a1       	ldd	r22, Y+36	; 0x24
     f80:	7d a1       	ldd	r23, Y+37	; 0x25
     f82:	8e a1       	ldd	r24, Y+38	; 0x26
     f84:	9f a1       	ldd	r25, Y+39	; 0x27
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	4a e7       	ldi	r20, 0x7A	; 122
     f8c:	55 e4       	ldi	r21, 0x45	; 69
     f8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	88 a3       	std	Y+32, r24	; 0x20
     f98:	99 a3       	std	Y+33, r25	; 0x21
     f9a:	aa a3       	std	Y+34, r26	; 0x22
     f9c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f9e:	68 a1       	ldd	r22, Y+32	; 0x20
     fa0:	79 a1       	ldd	r23, Y+33	; 0x21
     fa2:	8a a1       	ldd	r24, Y+34	; 0x22
     fa4:	9b a1       	ldd	r25, Y+35	; 0x23
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e8       	ldi	r20, 0x80	; 128
     fac:	5f e3       	ldi	r21, 0x3F	; 63
     fae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fb2:	88 23       	and	r24, r24
     fb4:	2c f4       	brge	.+10     	; 0xfc0 <SSD_viddisplyNum+0x120>
		__ticks = 1;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	9f 8f       	std	Y+31, r25	; 0x1f
     fbc:	8e 8f       	std	Y+30, r24	; 0x1e
     fbe:	3f c0       	rjmp	.+126    	; 0x103e <SSD_viddisplyNum+0x19e>
	else if (__tmp > 65535)
     fc0:	68 a1       	ldd	r22, Y+32	; 0x20
     fc2:	79 a1       	ldd	r23, Y+33	; 0x21
     fc4:	8a a1       	ldd	r24, Y+34	; 0x22
     fc6:	9b a1       	ldd	r25, Y+35	; 0x23
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	3f ef       	ldi	r19, 0xFF	; 255
     fcc:	4f e7       	ldi	r20, 0x7F	; 127
     fce:	57 e4       	ldi	r21, 0x47	; 71
     fd0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fd4:	18 16       	cp	r1, r24
     fd6:	4c f5       	brge	.+82     	; 0x102a <SSD_viddisplyNum+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd8:	6c a1       	ldd	r22, Y+36	; 0x24
     fda:	7d a1       	ldd	r23, Y+37	; 0x25
     fdc:	8e a1       	ldd	r24, Y+38	; 0x26
     fde:	9f a1       	ldd	r25, Y+39	; 0x27
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e2       	ldi	r20, 0x20	; 32
     fe6:	51 e4       	ldi	r21, 0x41	; 65
     fe8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	bc 01       	movw	r22, r24
     ff2:	cd 01       	movw	r24, r26
     ff4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	9f 8f       	std	Y+31, r25	; 0x1f
     ffe:	8e 8f       	std	Y+30, r24	; 0x1e
    1000:	0f c0       	rjmp	.+30     	; 0x1020 <SSD_viddisplyNum+0x180>
    1002:	80 e9       	ldi	r24, 0x90	; 144
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	9d 8f       	std	Y+29, r25	; 0x1d
    1008:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    100a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    100c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	f1 f7       	brne	.-4      	; 0x100e <SSD_viddisplyNum+0x16e>
    1012:	9d 8f       	std	Y+29, r25	; 0x1d
    1014:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1016:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1018:	9f 8d       	ldd	r25, Y+31	; 0x1f
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	9f 8f       	std	Y+31, r25	; 0x1f
    101e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1020:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1022:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	69 f7       	brne	.-38     	; 0x1002 <SSD_viddisplyNum+0x162>
    1028:	24 c0       	rjmp	.+72     	; 0x1072 <SSD_viddisplyNum+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    102a:	68 a1       	ldd	r22, Y+32	; 0x20
    102c:	79 a1       	ldd	r23, Y+33	; 0x21
    102e:	8a a1       	ldd	r24, Y+34	; 0x22
    1030:	9b a1       	ldd	r25, Y+35	; 0x23
    1032:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	9f 8f       	std	Y+31, r25	; 0x1f
    103c:	8e 8f       	std	Y+30, r24	; 0x1e
    103e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1040:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1042:	9b 8f       	std	Y+27, r25	; 0x1b
    1044:	8a 8f       	std	Y+26, r24	; 0x1a
    1046:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1048:	9b 8d       	ldd	r25, Y+27	; 0x1b
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <SSD_viddisplyNum+0x1aa>
    104e:	9b 8f       	std	Y+27, r25	; 0x1b
    1050:	8a 8f       	std	Y+26, r24	; 0x1a
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <SSD_viddisplyNum+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1054:	69 a5       	ldd	r22, Y+41	; 0x29
    1056:	7a a5       	ldd	r23, Y+42	; 0x2a
    1058:	8b a5       	ldd	r24, Y+43	; 0x2b
    105a:	9c a5       	ldd	r25, Y+44	; 0x2c
    105c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	88 a7       	std	Y+40, r24	; 0x28
    1066:	88 a5       	ldd	r24, Y+40	; 0x28
    1068:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    106a:	89 8d       	ldd	r24, Y+25	; 0x19
    106c:	8a 95       	dec	r24
    106e:	f1 f7       	brne	.-4      	; 0x106c <SSD_viddisplyNum+0x1cc>
    1070:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(100);

	/* Disable SSD 1	-> EN1 = Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	62 e0       	ldi	r22, 0x02	; 2
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
	/* Enable SSD 2 -> EN2 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	61 e0       	ldi	r22, 0x01	; 1
    1080:	41 e0       	ldi	r20, 0x01	; 1
    1082:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
	/* Write second digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_secondDigit, SSD_MASK);
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	6a a9       	ldd	r22, Y+50	; 0x32
    108a:	4f e0       	ldi	r20, 0x0F	; 15
    108c:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <Dio_vidWriteChanelGroup>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a8 ec       	ldi	r26, 0xC8	; 200
    1096:	b2 e4       	ldi	r27, 0x42	; 66
    1098:	8d 8b       	std	Y+21, r24	; 0x15
    109a:	9e 8b       	std	Y+22, r25	; 0x16
    109c:	af 8b       	std	Y+23, r26	; 0x17
    109e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10a0:	6d 89       	ldd	r22, Y+21	; 0x15
    10a2:	7e 89       	ldd	r23, Y+22	; 0x16
    10a4:	8f 89       	ldd	r24, Y+23	; 0x17
    10a6:	98 8d       	ldd	r25, Y+24	; 0x18
    10a8:	2b ea       	ldi	r18, 0xAB	; 171
    10aa:	3a ea       	ldi	r19, 0xAA	; 170
    10ac:	4a ea       	ldi	r20, 0xAA	; 170
    10ae:	50 e4       	ldi	r21, 0x40	; 64
    10b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	89 8b       	std	Y+17, r24	; 0x11
    10ba:	9a 8b       	std	Y+18, r25	; 0x12
    10bc:	ab 8b       	std	Y+19, r26	; 0x13
    10be:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    10c0:	69 89       	ldd	r22, Y+17	; 0x11
    10c2:	7a 89       	ldd	r23, Y+18	; 0x12
    10c4:	8b 89       	ldd	r24, Y+19	; 0x13
    10c6:	9c 89       	ldd	r25, Y+20	; 0x14
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e8       	ldi	r20, 0x80	; 128
    10ce:	5f e3       	ldi	r21, 0x3F	; 63
    10d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10d4:	88 23       	and	r24, r24
    10d6:	1c f4       	brge	.+6      	; 0x10de <SSD_viddisplyNum+0x23e>
		__ticks = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	88 8b       	std	Y+16, r24	; 0x10
    10dc:	91 c0       	rjmp	.+290    	; 0x1200 <SSD_viddisplyNum+0x360>
	else if (__tmp > 255)
    10de:	69 89       	ldd	r22, Y+17	; 0x11
    10e0:	7a 89       	ldd	r23, Y+18	; 0x12
    10e2:	8b 89       	ldd	r24, Y+19	; 0x13
    10e4:	9c 89       	ldd	r25, Y+20	; 0x14
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	4f e7       	ldi	r20, 0x7F	; 127
    10ec:	53 e4       	ldi	r21, 0x43	; 67
    10ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10f2:	18 16       	cp	r1, r24
    10f4:	0c f0       	brlt	.+2      	; 0x10f8 <SSD_viddisplyNum+0x258>
    10f6:	7b c0       	rjmp	.+246    	; 0x11ee <SSD_viddisplyNum+0x34e>
	{
		_delay_ms(__us / 1000.0);
    10f8:	6d 89       	ldd	r22, Y+21	; 0x15
    10fa:	7e 89       	ldd	r23, Y+22	; 0x16
    10fc:	8f 89       	ldd	r24, Y+23	; 0x17
    10fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	4a e7       	ldi	r20, 0x7A	; 122
    1106:	54 e4       	ldi	r21, 0x44	; 68
    1108:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	8c 87       	std	Y+12, r24	; 0x0c
    1112:	9d 87       	std	Y+13, r25	; 0x0d
    1114:	ae 87       	std	Y+14, r26	; 0x0e
    1116:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1118:	6c 85       	ldd	r22, Y+12	; 0x0c
    111a:	7d 85       	ldd	r23, Y+13	; 0x0d
    111c:	8e 85       	ldd	r24, Y+14	; 0x0e
    111e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	4a e7       	ldi	r20, 0x7A	; 122
    1126:	55 e4       	ldi	r21, 0x45	; 69
    1128:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	88 87       	std	Y+8, r24	; 0x08
    1132:	99 87       	std	Y+9, r25	; 0x09
    1134:	aa 87       	std	Y+10, r26	; 0x0a
    1136:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1138:	68 85       	ldd	r22, Y+8	; 0x08
    113a:	79 85       	ldd	r23, Y+9	; 0x09
    113c:	8a 85       	ldd	r24, Y+10	; 0x0a
    113e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	5f e3       	ldi	r21, 0x3F	; 63
    1148:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    114c:	88 23       	and	r24, r24
    114e:	2c f4       	brge	.+10     	; 0x115a <SSD_viddisplyNum+0x2ba>
		__ticks = 1;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9f 83       	std	Y+7, r25	; 0x07
    1156:	8e 83       	std	Y+6, r24	; 0x06
    1158:	3f c0       	rjmp	.+126    	; 0x11d8 <SSD_viddisplyNum+0x338>
	else if (__tmp > 65535)
    115a:	68 85       	ldd	r22, Y+8	; 0x08
    115c:	79 85       	ldd	r23, Y+9	; 0x09
    115e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1160:	9b 85       	ldd	r25, Y+11	; 0x0b
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	4f e7       	ldi	r20, 0x7F	; 127
    1168:	57 e4       	ldi	r21, 0x47	; 71
    116a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    116e:	18 16       	cp	r1, r24
    1170:	4c f5       	brge	.+82     	; 0x11c4 <SSD_viddisplyNum+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1172:	6c 85       	ldd	r22, Y+12	; 0x0c
    1174:	7d 85       	ldd	r23, Y+13	; 0x0d
    1176:	8e 85       	ldd	r24, Y+14	; 0x0e
    1178:	9f 85       	ldd	r25, Y+15	; 0x0f
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e2       	ldi	r20, 0x20	; 32
    1180:	51 e4       	ldi	r21, 0x41	; 65
    1182:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	9f 83       	std	Y+7, r25	; 0x07
    1198:	8e 83       	std	Y+6, r24	; 0x06
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <SSD_viddisplyNum+0x31a>
    119c:	80 e9       	ldi	r24, 0x90	; 144
    119e:	91 e0       	ldi	r25, 0x01	; 1
    11a0:	9d 83       	std	Y+5, r25	; 0x05
    11a2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <SSD_viddisplyNum+0x308>
    11ac:	9d 83       	std	Y+5, r25	; 0x05
    11ae:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b0:	8e 81       	ldd	r24, Y+6	; 0x06
    11b2:	9f 81       	ldd	r25, Y+7	; 0x07
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	9f 83       	std	Y+7, r25	; 0x07
    11b8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ba:	8e 81       	ldd	r24, Y+6	; 0x06
    11bc:	9f 81       	ldd	r25, Y+7	; 0x07
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	69 f7       	brne	.-38     	; 0x119c <SSD_viddisplyNum+0x2fc>
    11c2:	24 c0       	rjmp	.+72     	; 0x120c <SSD_viddisplyNum+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c4:	68 85       	ldd	r22, Y+8	; 0x08
    11c6:	79 85       	ldd	r23, Y+9	; 0x09
    11c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    11cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9f 83       	std	Y+7, r25	; 0x07
    11d6:	8e 83       	std	Y+6, r24	; 0x06
    11d8:	8e 81       	ldd	r24, Y+6	; 0x06
    11da:	9f 81       	ldd	r25, Y+7	; 0x07
    11dc:	9b 83       	std	Y+3, r25	; 0x03
    11de:	8a 83       	std	Y+2, r24	; 0x02
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	9b 81       	ldd	r25, Y+3	; 0x03
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <SSD_viddisplyNum+0x344>
    11e8:	9b 83       	std	Y+3, r25	; 0x03
    11ea:	8a 83       	std	Y+2, r24	; 0x02
    11ec:	0f c0       	rjmp	.+30     	; 0x120c <SSD_viddisplyNum+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11ee:	69 89       	ldd	r22, Y+17	; 0x11
    11f0:	7a 89       	ldd	r23, Y+18	; 0x12
    11f2:	8b 89       	ldd	r24, Y+19	; 0x13
    11f4:	9c 89       	ldd	r25, Y+20	; 0x14
    11f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	88 8b       	std	Y+16, r24	; 0x10
    1200:	88 89       	ldd	r24, Y+16	; 0x10
    1202:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	8a 95       	dec	r24
    1208:	f1 f7       	brne	.-4      	; 0x1206 <SSD_viddisplyNum+0x366>
    120a:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(100);
}
    120c:	e3 96       	adiw	r28, 0x33	; 51
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <SSD_vidDelayWithDisply_ms>:

void SSD_vidDelayWithDisply_ms(u8 num,u32 delay)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	29 97       	sbiw	r28, 0x09	; 9
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	8d 83       	std	Y+5, r24	; 0x05
    1234:	4e 83       	std	Y+6, r20	; 0x06
    1236:	5f 83       	std	Y+7, r21	; 0x07
    1238:	68 87       	std	Y+8, r22	; 0x08
    123a:	79 87       	std	Y+9, r23	; 0x09
	u32 cnt=0;
    123c:	19 82       	std	Y+1, r1	; 0x01
    123e:	1a 82       	std	Y+2, r1	; 0x02
    1240:	1b 82       	std	Y+3, r1	; 0x03
    1242:	1c 82       	std	Y+4, r1	; 0x04
	for (cnt=0; cnt<delay; cnt++)
    1244:	19 82       	std	Y+1, r1	; 0x01
    1246:	1a 82       	std	Y+2, r1	; 0x02
    1248:	1b 82       	std	Y+3, r1	; 0x03
    124a:	1c 82       	std	Y+4, r1	; 0x04
    124c:	0e c0       	rjmp	.+28     	; 0x126a <SSD_vidDelayWithDisply_ms+0x4c>
		 {
			 SSD_viddisplyNum(num);
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	0e 94 50 07 	call	0xea0	; 0xea0 <SSD_viddisplyNum>
}

void SSD_vidDelayWithDisply_ms(u8 num,u32 delay)
{
	u32 cnt=0;
	for (cnt=0; cnt<delay; cnt++)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	9a 81       	ldd	r25, Y+2	; 0x02
    1258:	ab 81       	ldd	r26, Y+3	; 0x03
    125a:	bc 81       	ldd	r27, Y+4	; 0x04
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	a1 1d       	adc	r26, r1
    1260:	b1 1d       	adc	r27, r1
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	ab 83       	std	Y+3, r26	; 0x03
    1268:	bc 83       	std	Y+4, r27	; 0x04
    126a:	29 81       	ldd	r18, Y+1	; 0x01
    126c:	3a 81       	ldd	r19, Y+2	; 0x02
    126e:	4b 81       	ldd	r20, Y+3	; 0x03
    1270:	5c 81       	ldd	r21, Y+4	; 0x04
    1272:	8e 81       	ldd	r24, Y+6	; 0x06
    1274:	9f 81       	ldd	r25, Y+7	; 0x07
    1276:	a8 85       	ldd	r26, Y+8	; 0x08
    1278:	b9 85       	ldd	r27, Y+9	; 0x09
    127a:	28 17       	cp	r18, r24
    127c:	39 07       	cpc	r19, r25
    127e:	4a 07       	cpc	r20, r26
    1280:	5b 07       	cpc	r21, r27
    1282:	28 f3       	brcs	.-54     	; 0x124e <SSD_vidDelayWithDisply_ms+0x30>
		 {
			 SSD_viddisplyNum(num);
		 }
}
    1284:	29 96       	adiw	r28, 0x09	; 9
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <Led_vidledInit>:
#include "Led.h"
#include "Dio.h"


void Led_vidledInit(void)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_OUTPUT);
    129e:	82 e0       	ldi	r24, 0x02	; 2
    12a0:	62 e0       	ldi	r22, 0x02	; 2
    12a2:	41 e0       	ldi	r20, 0x01	; 1
    12a4:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	67 e0       	ldi	r22, 0x07	; 7
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN3, DIO_OUTPUT);
    12b2:	83 e0       	ldi	r24, 0x03	; 3
    12b4:	63 e0       	ldi	r22, 0x03	; 3
    12b6:	41 e0       	ldi	r20, 0x01	; 1
    12b8:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
}
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <Led_vidledOn>:

void Led_vidledOn(led_ledId_t led)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <Led_vidledOn+0x6>
    12c8:	0f 92       	push	r0
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	3b 83       	std	Y+3, r19	; 0x03
    12d8:	2a 83       	std	Y+2, r18	; 0x02
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	9b 81       	ldd	r25, Y+3	; 0x03
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	91 05       	cpc	r25, r1
    12e2:	79 f0       	breq	.+30     	; 0x1302 <Led_vidledOn+0x40>
    12e4:	2a 81       	ldd	r18, Y+2	; 0x02
    12e6:	3b 81       	ldd	r19, Y+3	; 0x03
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	81 f0       	breq	.+32     	; 0x130e <Led_vidledOn+0x4c>
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	9b 81       	ldd	r25, Y+3	; 0x03
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	89 f4       	brne	.+34     	; 0x1318 <Led_vidledOn+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	62 e0       	ldi	r22, 0x02	; 2
    12fa:	41 e0       	ldi	r20, 0x01	; 1
    12fc:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
    1300:	0b c0       	rjmp	.+22     	; 0x1318 <Led_vidledOn+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	67 e0       	ldi	r22, 0x07	; 7
    1306:	41 e0       	ldi	r20, 0x01	; 1
    1308:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <Led_vidledOn+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	63 e0       	ldi	r22, 0x03	; 3
    1312:	41 e0       	ldi	r20, 0x01	; 1
    1314:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
		break;
	}
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <Led_vidledOff>:

void Led_vidledOff(led_ledId_t led)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <Led_vidledOff+0x6>
    132a:	0f 92       	push	r0
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3b 83       	std	Y+3, r19	; 0x03
    133a:	2a 83       	std	Y+2, r18	; 0x02
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	9b 81       	ldd	r25, Y+3	; 0x03
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	91 05       	cpc	r25, r1
    1344:	79 f0       	breq	.+30     	; 0x1364 <Led_vidledOff+0x40>
    1346:	2a 81       	ldd	r18, Y+2	; 0x02
    1348:	3b 81       	ldd	r19, Y+3	; 0x03
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	81 f0       	breq	.+32     	; 0x1370 <Led_vidledOff+0x4c>
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	9b 81       	ldd	r25, Y+3	; 0x03
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	89 f4       	brne	.+34     	; 0x137a <Led_vidledOff+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	62 e0       	ldi	r22, 0x02	; 2
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
    1362:	0b c0       	rjmp	.+22     	; 0x137a <Led_vidledOff+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	67 e0       	ldi	r22, 0x07	; 7
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
    136e:	05 c0       	rjmp	.+10     	; 0x137a <Led_vidledOff+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    1370:	83 e0       	ldi	r24, 0x03	; 3
    1372:	63 e0       	ldi	r22, 0x03	; 3
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
		break;
	}
}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <Led_vidledToggle>:

void Led_vidledToggle(led_ledId_t ledId)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	00 d0       	rcall	.+0      	; 0x138c <Led_vidledToggle+0x6>
    138c:	0f 92       	push	r0
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	3b 83       	std	Y+3, r19	; 0x03
    139c:	2a 83       	std	Y+2, r18	; 0x02
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	9b 81       	ldd	r25, Y+3	; 0x03
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	91 05       	cpc	r25, r1
    13a6:	71 f0       	breq	.+28     	; 0x13c4 <Led_vidledToggle+0x3e>
    13a8:	2a 81       	ldd	r18, Y+2	; 0x02
    13aa:	3b 81       	ldd	r19, Y+3	; 0x03
    13ac:	22 30       	cpi	r18, 0x02	; 2
    13ae:	31 05       	cpc	r19, r1
    13b0:	71 f0       	breq	.+28     	; 0x13ce <Led_vidledToggle+0x48>
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	9b 81       	ldd	r25, Y+3	; 0x03
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	71 f4       	brne	.+28     	; 0x13d6 <Led_vidledToggle+0x50>
	{
	case LED0:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN2);
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	62 e0       	ldi	r22, 0x02	; 2
    13be:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <Dio_vidflipChanel>
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <Led_vidledToggle+0x50>
		break;

	case LED1:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN7);
    13c4:	82 e0       	ldi	r24, 0x02	; 2
    13c6:	67 e0       	ldi	r22, 0x07	; 7
    13c8:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <Dio_vidflipChanel>
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <Led_vidledToggle+0x50>
		break;

	case LED2:
		Dio_vidflipChanel(DIO_PORTD, DIO_PIN3);
    13ce:	83 e0       	ldi	r24, 0x03	; 3
    13d0:	63 e0       	ldi	r22, 0x03	; 3
    13d2:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <Dio_vidflipChanel>
		break;
	}
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <Lm35_vidInit>:

#include "Std_Types.h"
#include "Adc.h"

void Lm35_vidInit(void)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
	Adc_vidInit();
    13ea:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <Adc_vidInit>
}
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <Lm35_u8TempRead>:
u16 Lm35_u8TempRead(void)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <Lm35_u8TempRead+0x6>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <Lm35_u8TempRead+0x8>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <Lm35_u8TempRead+0xa>
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
	f64 loc_adcRead = 0;
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a0 e0       	ldi	r26, 0x00	; 0
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	8b 83       	std	Y+3, r24	; 0x03
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	ad 83       	std	Y+5, r26	; 0x05
    1410:	be 83       	std	Y+6, r27	; 0x06
	u16 loc_temp = 0;
    1412:	1a 82       	std	Y+2, r1	; 0x02
    1414:	19 82       	std	Y+1, r1	; 0x01

	loc_adcRead = Adc_u16AdcRead(ADC_CHANNEL1);
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	0e 94 42 17 	call	0x2e84	; 0x2e84 <Adc_u16AdcRead>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	8b 83       	std	Y+3, r24	; 0x03
    1422:	9c 83       	std	Y+4, r25	; 0x04
    1424:	ad 83       	std	Y+5, r26	; 0x05
    1426:	be 83       	std	Y+6, r27	; 0x06
	loc_temp = loc_adcRead/10;
    1428:	6b 81       	ldd	r22, Y+3	; 0x03
    142a:	7c 81       	ldd	r23, Y+4	; 0x04
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e2       	ldi	r20, 0x20	; 32
    1436:	51 e4       	ldi	r21, 0x41	; 65
    1438:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	bc 01       	movw	r22, r24
    1442:	cd 01       	movw	r24, r26
    1444:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9a 83       	std	Y+2, r25	; 0x02
    144e:	89 83       	std	Y+1, r24	; 0x01

	return loc_temp;
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1454:	26 96       	adiw	r28, 0x06	; 6
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <Lcd_vidinit>:
#include "util/delay.h"
#include <stdio.h>


void Lcd_vidinit(void)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	e4 97       	sbiw	r28, 0x34	; 52
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
	/*	configure control pins as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	61 e0       	ldi	r22, 0x01	; 1
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	62 e0       	ldi	r22, 0x02	; 2
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	63 e0       	ldi	r22, 0x03	; 3
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>

	/*	configure data pins as output	*/
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	64 e0       	ldi	r22, 0x04	; 4
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	65 e0       	ldi	r22, 0x05	; 5
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	66 e0       	ldi	r22, 0x06	; 6
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	67 e0       	ldi	r22, 0x07	; 7
    14ba:	41 e0       	ldi	r20, 0x01	; 1
    14bc:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>

	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	62 e0       	ldi	r22, 0x02	; 2
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a0 e7       	ldi	r26, 0x70	; 112
    14d0:	b1 e4       	ldi	r27, 0x41	; 65
    14d2:	89 ab       	std	Y+49, r24	; 0x31
    14d4:	9a ab       	std	Y+50, r25	; 0x32
    14d6:	ab ab       	std	Y+51, r26	; 0x33
    14d8:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14da:	69 a9       	ldd	r22, Y+49	; 0x31
    14dc:	7a a9       	ldd	r23, Y+50	; 0x32
    14de:	8b a9       	ldd	r24, Y+51	; 0x33
    14e0:	9c a9       	ldd	r25, Y+52	; 0x34
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4a e7       	ldi	r20, 0x7A	; 122
    14e8:	55 e4       	ldi	r21, 0x45	; 69
    14ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	8d a7       	std	Y+45, r24	; 0x2d
    14f4:	9e a7       	std	Y+46, r25	; 0x2e
    14f6:	af a7       	std	Y+47, r26	; 0x2f
    14f8:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    14fa:	6d a5       	ldd	r22, Y+45	; 0x2d
    14fc:	7e a5       	ldd	r23, Y+46	; 0x2e
    14fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1500:	98 a9       	ldd	r25, Y+48	; 0x30
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    150e:	88 23       	and	r24, r24
    1510:	2c f4       	brge	.+10     	; 0x151c <Lcd_vidinit+0xb6>
		__ticks = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9c a7       	std	Y+44, r25	; 0x2c
    1518:	8b a7       	std	Y+43, r24	; 0x2b
    151a:	3f c0       	rjmp	.+126    	; 0x159a <Lcd_vidinit+0x134>
	else if (__tmp > 65535)
    151c:	6d a5       	ldd	r22, Y+45	; 0x2d
    151e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1520:	8f a5       	ldd	r24, Y+47	; 0x2f
    1522:	98 a9       	ldd	r25, Y+48	; 0x30
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	4f e7       	ldi	r20, 0x7F	; 127
    152a:	57 e4       	ldi	r21, 0x47	; 71
    152c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1530:	18 16       	cp	r1, r24
    1532:	4c f5       	brge	.+82     	; 0x1586 <Lcd_vidinit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1534:	69 a9       	ldd	r22, Y+49	; 0x31
    1536:	7a a9       	ldd	r23, Y+50	; 0x32
    1538:	8b a9       	ldd	r24, Y+51	; 0x33
    153a:	9c a9       	ldd	r25, Y+52	; 0x34
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9c a7       	std	Y+44, r25	; 0x2c
    155a:	8b a7       	std	Y+43, r24	; 0x2b
    155c:	0f c0       	rjmp	.+30     	; 0x157c <Lcd_vidinit+0x116>
    155e:	80 e9       	ldi	r24, 0x90	; 144
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	9a a7       	std	Y+42, r25	; 0x2a
    1564:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1566:	89 a5       	ldd	r24, Y+41	; 0x29
    1568:	9a a5       	ldd	r25, Y+42	; 0x2a
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <Lcd_vidinit+0x104>
    156e:	9a a7       	std	Y+42, r25	; 0x2a
    1570:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	8b a5       	ldd	r24, Y+43	; 0x2b
    1574:	9c a5       	ldd	r25, Y+44	; 0x2c
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	9c a7       	std	Y+44, r25	; 0x2c
    157a:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157c:	8b a5       	ldd	r24, Y+43	; 0x2b
    157e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	69 f7       	brne	.-38     	; 0x155e <Lcd_vidinit+0xf8>
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <Lcd_vidinit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1586:	6d a5       	ldd	r22, Y+45	; 0x2d
    1588:	7e a5       	ldd	r23, Y+46	; 0x2e
    158a:	8f a5       	ldd	r24, Y+47	; 0x2f
    158c:	98 a9       	ldd	r25, Y+48	; 0x30
    158e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9c a7       	std	Y+44, r25	; 0x2c
    1598:	8b a7       	std	Y+43, r24	; 0x2b
    159a:	8b a5       	ldd	r24, Y+43	; 0x2b
    159c:	9c a5       	ldd	r25, Y+44	; 0x2c
    159e:	98 a7       	std	Y+40, r25	; 0x28
    15a0:	8f a3       	std	Y+39, r24	; 0x27
    15a2:	8f a1       	ldd	r24, Y+39	; 0x27
    15a4:	98 a5       	ldd	r25, Y+40	; 0x28
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <Lcd_vidinit+0x140>
    15aa:	98 a7       	std	Y+40, r25	; 0x28
    15ac:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_vidCmd(0x03);
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Lcd_vidCmd>
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	a0 ea       	ldi	r26, 0xA0	; 160
    15ba:	b0 e4       	ldi	r27, 0x40	; 64
    15bc:	8b a3       	std	Y+35, r24	; 0x23
    15be:	9c a3       	std	Y+36, r25	; 0x24
    15c0:	ad a3       	std	Y+37, r26	; 0x25
    15c2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c4:	6b a1       	ldd	r22, Y+35	; 0x23
    15c6:	7c a1       	ldd	r23, Y+36	; 0x24
    15c8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ca:	9e a1       	ldd	r25, Y+38	; 0x26
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	4a e7       	ldi	r20, 0x7A	; 122
    15d2:	55 e4       	ldi	r21, 0x45	; 69
    15d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	8f 8f       	std	Y+31, r24	; 0x1f
    15de:	98 a3       	std	Y+32, r25	; 0x20
    15e0:	a9 a3       	std	Y+33, r26	; 0x21
    15e2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    15e4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15e6:	78 a1       	ldd	r23, Y+32	; 0x20
    15e8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ea:	9a a1       	ldd	r25, Y+34	; 0x22
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15f8:	88 23       	and	r24, r24
    15fa:	2c f4       	brge	.+10     	; 0x1606 <Lcd_vidinit+0x1a0>
		__ticks = 1;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	9e 8f       	std	Y+30, r25	; 0x1e
    1602:	8d 8f       	std	Y+29, r24	; 0x1d
    1604:	3f c0       	rjmp	.+126    	; 0x1684 <Lcd_vidinit+0x21e>
	else if (__tmp > 65535)
    1606:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1608:	78 a1       	ldd	r23, Y+32	; 0x20
    160a:	89 a1       	ldd	r24, Y+33	; 0x21
    160c:	9a a1       	ldd	r25, Y+34	; 0x22
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	3f ef       	ldi	r19, 0xFF	; 255
    1612:	4f e7       	ldi	r20, 0x7F	; 127
    1614:	57 e4       	ldi	r21, 0x47	; 71
    1616:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    161a:	18 16       	cp	r1, r24
    161c:	4c f5       	brge	.+82     	; 0x1670 <Lcd_vidinit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161e:	6b a1       	ldd	r22, Y+35	; 0x23
    1620:	7c a1       	ldd	r23, Y+36	; 0x24
    1622:	8d a1       	ldd	r24, Y+37	; 0x25
    1624:	9e a1       	ldd	r25, Y+38	; 0x26
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e2       	ldi	r20, 0x20	; 32
    162c:	51 e4       	ldi	r21, 0x41	; 65
    162e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	9e 8f       	std	Y+30, r25	; 0x1e
    1644:	8d 8f       	std	Y+29, r24	; 0x1d
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <Lcd_vidinit+0x200>
    1648:	80 e9       	ldi	r24, 0x90	; 144
    164a:	91 e0       	ldi	r25, 0x01	; 1
    164c:	9c 8f       	std	Y+28, r25	; 0x1c
    164e:	8b 8f       	std	Y+27, r24	; 0x1b
    1650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <Lcd_vidinit+0x1ee>
    1658:	9c 8f       	std	Y+28, r25	; 0x1c
    165a:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    165e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	9e 8f       	std	Y+30, r25	; 0x1e
    1664:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1666:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1668:	9e 8d       	ldd	r25, Y+30	; 0x1e
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	69 f7       	brne	.-38     	; 0x1648 <Lcd_vidinit+0x1e2>
    166e:	14 c0       	rjmp	.+40     	; 0x1698 <Lcd_vidinit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1670:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1672:	78 a1       	ldd	r23, Y+32	; 0x20
    1674:	89 a1       	ldd	r24, Y+33	; 0x21
    1676:	9a a1       	ldd	r25, Y+34	; 0x22
    1678:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9e 8f       	std	Y+30, r25	; 0x1e
    1682:	8d 8f       	std	Y+29, r24	; 0x1d
    1684:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1686:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1688:	9a 8f       	std	Y+26, r25	; 0x1a
    168a:	89 8f       	std	Y+25, r24	; 0x19
    168c:	89 8d       	ldd	r24, Y+25	; 0x19
    168e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <Lcd_vidinit+0x22a>
    1694:	9a 8f       	std	Y+26, r25	; 0x1a
    1696:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_vidCmd(0x03);
    1698:	83 e0       	ldi	r24, 0x03	; 3
    169a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Lcd_vidCmd>
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a8 ec       	ldi	r26, 0xC8	; 200
    16a4:	b2 e4       	ldi	r27, 0x42	; 66
    16a6:	8d 8b       	std	Y+21, r24	; 0x15
    16a8:	9e 8b       	std	Y+22, r25	; 0x16
    16aa:	af 8b       	std	Y+23, r26	; 0x17
    16ac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16ae:	6d 89       	ldd	r22, Y+21	; 0x15
    16b0:	7e 89       	ldd	r23, Y+22	; 0x16
    16b2:	8f 89       	ldd	r24, Y+23	; 0x17
    16b4:	98 8d       	ldd	r25, Y+24	; 0x18
    16b6:	2b ea       	ldi	r18, 0xAB	; 171
    16b8:	3a ea       	ldi	r19, 0xAA	; 170
    16ba:	4a ea       	ldi	r20, 0xAA	; 170
    16bc:	50 e4       	ldi	r21, 0x40	; 64
    16be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	89 8b       	std	Y+17, r24	; 0x11
    16c8:	9a 8b       	std	Y+18, r25	; 0x12
    16ca:	ab 8b       	std	Y+19, r26	; 0x13
    16cc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16ce:	69 89       	ldd	r22, Y+17	; 0x11
    16d0:	7a 89       	ldd	r23, Y+18	; 0x12
    16d2:	8b 89       	ldd	r24, Y+19	; 0x13
    16d4:	9c 89       	ldd	r25, Y+20	; 0x14
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e8       	ldi	r20, 0x80	; 128
    16dc:	5f e3       	ldi	r21, 0x3F	; 63
    16de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16e2:	88 23       	and	r24, r24
    16e4:	1c f4       	brge	.+6      	; 0x16ec <Lcd_vidinit+0x286>
		__ticks = 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	88 8b       	std	Y+16, r24	; 0x10
    16ea:	91 c0       	rjmp	.+290    	; 0x180e <Lcd_vidinit+0x3a8>
	else if (__tmp > 255)
    16ec:	69 89       	ldd	r22, Y+17	; 0x11
    16ee:	7a 89       	ldd	r23, Y+18	; 0x12
    16f0:	8b 89       	ldd	r24, Y+19	; 0x13
    16f2:	9c 89       	ldd	r25, Y+20	; 0x14
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	4f e7       	ldi	r20, 0x7F	; 127
    16fa:	53 e4       	ldi	r21, 0x43	; 67
    16fc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1700:	18 16       	cp	r1, r24
    1702:	0c f0       	brlt	.+2      	; 0x1706 <Lcd_vidinit+0x2a0>
    1704:	7b c0       	rjmp	.+246    	; 0x17fc <Lcd_vidinit+0x396>
	{
		_delay_ms(__us / 1000.0);
    1706:	6d 89       	ldd	r22, Y+21	; 0x15
    1708:	7e 89       	ldd	r23, Y+22	; 0x16
    170a:	8f 89       	ldd	r24, Y+23	; 0x17
    170c:	98 8d       	ldd	r25, Y+24	; 0x18
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	4a e7       	ldi	r20, 0x7A	; 122
    1714:	54 e4       	ldi	r21, 0x44	; 68
    1716:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	8c 87       	std	Y+12, r24	; 0x0c
    1720:	9d 87       	std	Y+13, r25	; 0x0d
    1722:	ae 87       	std	Y+14, r26	; 0x0e
    1724:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1726:	6c 85       	ldd	r22, Y+12	; 0x0c
    1728:	7d 85       	ldd	r23, Y+13	; 0x0d
    172a:	8e 85       	ldd	r24, Y+14	; 0x0e
    172c:	9f 85       	ldd	r25, Y+15	; 0x0f
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	4a e7       	ldi	r20, 0x7A	; 122
    1734:	55 e4       	ldi	r21, 0x45	; 69
    1736:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	88 87       	std	Y+8, r24	; 0x08
    1740:	99 87       	std	Y+9, r25	; 0x09
    1742:	aa 87       	std	Y+10, r26	; 0x0a
    1744:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1746:	68 85       	ldd	r22, Y+8	; 0x08
    1748:	79 85       	ldd	r23, Y+9	; 0x09
    174a:	8a 85       	ldd	r24, Y+10	; 0x0a
    174c:	9b 85       	ldd	r25, Y+11	; 0x0b
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e8       	ldi	r20, 0x80	; 128
    1754:	5f e3       	ldi	r21, 0x3F	; 63
    1756:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    175a:	88 23       	and	r24, r24
    175c:	2c f4       	brge	.+10     	; 0x1768 <Lcd_vidinit+0x302>
		__ticks = 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9f 83       	std	Y+7, r25	; 0x07
    1764:	8e 83       	std	Y+6, r24	; 0x06
    1766:	3f c0       	rjmp	.+126    	; 0x17e6 <Lcd_vidinit+0x380>
	else if (__tmp > 65535)
    1768:	68 85       	ldd	r22, Y+8	; 0x08
    176a:	79 85       	ldd	r23, Y+9	; 0x09
    176c:	8a 85       	ldd	r24, Y+10	; 0x0a
    176e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	3f ef       	ldi	r19, 0xFF	; 255
    1774:	4f e7       	ldi	r20, 0x7F	; 127
    1776:	57 e4       	ldi	r21, 0x47	; 71
    1778:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    177c:	18 16       	cp	r1, r24
    177e:	4c f5       	brge	.+82     	; 0x17d2 <Lcd_vidinit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1780:	6c 85       	ldd	r22, Y+12	; 0x0c
    1782:	7d 85       	ldd	r23, Y+13	; 0x0d
    1784:	8e 85       	ldd	r24, Y+14	; 0x0e
    1786:	9f 85       	ldd	r25, Y+15	; 0x0f
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e2       	ldi	r20, 0x20	; 32
    178e:	51 e4       	ldi	r21, 0x41	; 65
    1790:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9f 83       	std	Y+7, r25	; 0x07
    17a6:	8e 83       	std	Y+6, r24	; 0x06
    17a8:	0f c0       	rjmp	.+30     	; 0x17c8 <Lcd_vidinit+0x362>
    17aa:	80 e9       	ldi	r24, 0x90	; 144
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	9d 83       	std	Y+5, r25	; 0x05
    17b0:	8c 83       	std	Y+4, r24	; 0x04
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	9d 81       	ldd	r25, Y+5	; 0x05
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <Lcd_vidinit+0x350>
    17ba:	9d 83       	std	Y+5, r25	; 0x05
    17bc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17be:	8e 81       	ldd	r24, Y+6	; 0x06
    17c0:	9f 81       	ldd	r25, Y+7	; 0x07
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	9f 83       	std	Y+7, r25	; 0x07
    17c6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ca:	9f 81       	ldd	r25, Y+7	; 0x07
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	69 f7       	brne	.-38     	; 0x17aa <Lcd_vidinit+0x344>
    17d0:	24 c0       	rjmp	.+72     	; 0x181a <Lcd_vidinit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d2:	68 85       	ldd	r22, Y+8	; 0x08
    17d4:	79 85       	ldd	r23, Y+9	; 0x09
    17d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    17d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    17da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	9f 83       	std	Y+7, r25	; 0x07
    17e4:	8e 83       	std	Y+6, r24	; 0x06
    17e6:	8e 81       	ldd	r24, Y+6	; 0x06
    17e8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ea:	9b 83       	std	Y+3, r25	; 0x03
    17ec:	8a 83       	std	Y+2, r24	; 0x02
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	9b 81       	ldd	r25, Y+3	; 0x03
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <Lcd_vidinit+0x38c>
    17f6:	9b 83       	std	Y+3, r25	; 0x03
    17f8:	8a 83       	std	Y+2, r24	; 0x02
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <Lcd_vidinit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17fc:	69 89       	ldd	r22, Y+17	; 0x11
    17fe:	7a 89       	ldd	r23, Y+18	; 0x12
    1800:	8b 89       	ldd	r24, Y+19	; 0x13
    1802:	9c 89       	ldd	r25, Y+20	; 0x14
    1804:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	88 8b       	std	Y+16, r24	; 0x10
    180e:	88 89       	ldd	r24, Y+16	; 0x10
    1810:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	8a 95       	dec	r24
    1816:	f1 f7       	brne	.-4      	; 0x1814 <Lcd_vidinit+0x3ae>
    1818:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_vidCmd(0x03);
    181a:	83 e0       	ldi	r24, 0x03	; 3
    181c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Lcd_vidCmd>
	Lcd_vidCmd(0x02);
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Lcd_vidCmd>
	Lcd_vidCmd(_LCD_4BIT_MODE);
    1826:	88 e2       	ldi	r24, 0x28	; 40
    1828:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Lcd_vidCmd>
}
    182c:	e4 96       	adiw	r28, 0x34	; 52
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	de bf       	out	0x3e, r29	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	cd bf       	out	0x3d, r28	; 61
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <Lcd_videnablePulse>:

static void Lcd_videnablePulse(void)
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	a6 97       	sbiw	r28, 0x26	; 38
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
	//send Enable pulse
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	63 e0       	ldi	r22, 0x03	; 3
    1856:	41 e0       	ldi	r20, 0x01	; 1
    1858:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a0 e8       	ldi	r26, 0x80	; 128
    1862:	bf e3       	ldi	r27, 0x3F	; 63
    1864:	8b a3       	std	Y+35, r24	; 0x23
    1866:	9c a3       	std	Y+36, r25	; 0x24
    1868:	ad a3       	std	Y+37, r26	; 0x25
    186a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    186c:	6b a1       	ldd	r22, Y+35	; 0x23
    186e:	7c a1       	ldd	r23, Y+36	; 0x24
    1870:	8d a1       	ldd	r24, Y+37	; 0x25
    1872:	9e a1       	ldd	r25, Y+38	; 0x26
    1874:	2b ea       	ldi	r18, 0xAB	; 171
    1876:	3a ea       	ldi	r19, 0xAA	; 170
    1878:	4a ea       	ldi	r20, 0xAA	; 170
    187a:	50 e4       	ldi	r21, 0x40	; 64
    187c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	8f 8f       	std	Y+31, r24	; 0x1f
    1886:	98 a3       	std	Y+32, r25	; 0x20
    1888:	a9 a3       	std	Y+33, r26	; 0x21
    188a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    188c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    188e:	78 a1       	ldd	r23, Y+32	; 0x20
    1890:	89 a1       	ldd	r24, Y+33	; 0x21
    1892:	9a a1       	ldd	r25, Y+34	; 0x22
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e8       	ldi	r20, 0x80	; 128
    189a:	5f e3       	ldi	r21, 0x3F	; 63
    189c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18a0:	88 23       	and	r24, r24
    18a2:	1c f4       	brge	.+6      	; 0x18aa <Lcd_videnablePulse+0x6c>
		__ticks = 1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	8e 8f       	std	Y+30, r24	; 0x1e
    18a8:	91 c0       	rjmp	.+290    	; 0x19cc <Lcd_videnablePulse+0x18e>
	else if (__tmp > 255)
    18aa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18ac:	78 a1       	ldd	r23, Y+32	; 0x20
    18ae:	89 a1       	ldd	r24, Y+33	; 0x21
    18b0:	9a a1       	ldd	r25, Y+34	; 0x22
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	4f e7       	ldi	r20, 0x7F	; 127
    18b8:	53 e4       	ldi	r21, 0x43	; 67
    18ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18be:	18 16       	cp	r1, r24
    18c0:	0c f0       	brlt	.+2      	; 0x18c4 <Lcd_videnablePulse+0x86>
    18c2:	7b c0       	rjmp	.+246    	; 0x19ba <Lcd_videnablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    18c4:	6b a1       	ldd	r22, Y+35	; 0x23
    18c6:	7c a1       	ldd	r23, Y+36	; 0x24
    18c8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ca:	9e a1       	ldd	r25, Y+38	; 0x26
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	4a e7       	ldi	r20, 0x7A	; 122
    18d2:	54 e4       	ldi	r21, 0x44	; 68
    18d4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	8a 8f       	std	Y+26, r24	; 0x1a
    18de:	9b 8f       	std	Y+27, r25	; 0x1b
    18e0:	ac 8f       	std	Y+28, r26	; 0x1c
    18e2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18e6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	4a e7       	ldi	r20, 0x7A	; 122
    18f2:	55 e4       	ldi	r21, 0x45	; 69
    18f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	8e 8b       	std	Y+22, r24	; 0x16
    18fe:	9f 8b       	std	Y+23, r25	; 0x17
    1900:	a8 8f       	std	Y+24, r26	; 0x18
    1902:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1904:	6e 89       	ldd	r22, Y+22	; 0x16
    1906:	7f 89       	ldd	r23, Y+23	; 0x17
    1908:	88 8d       	ldd	r24, Y+24	; 0x18
    190a:	99 8d       	ldd	r25, Y+25	; 0x19
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e8       	ldi	r20, 0x80	; 128
    1912:	5f e3       	ldi	r21, 0x3F	; 63
    1914:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1918:	88 23       	and	r24, r24
    191a:	2c f4       	brge	.+10     	; 0x1926 <Lcd_videnablePulse+0xe8>
		__ticks = 1;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9d 8b       	std	Y+21, r25	; 0x15
    1922:	8c 8b       	std	Y+20, r24	; 0x14
    1924:	3f c0       	rjmp	.+126    	; 0x19a4 <Lcd_videnablePulse+0x166>
	else if (__tmp > 65535)
    1926:	6e 89       	ldd	r22, Y+22	; 0x16
    1928:	7f 89       	ldd	r23, Y+23	; 0x17
    192a:	88 8d       	ldd	r24, Y+24	; 0x18
    192c:	99 8d       	ldd	r25, Y+25	; 0x19
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	3f ef       	ldi	r19, 0xFF	; 255
    1932:	4f e7       	ldi	r20, 0x7F	; 127
    1934:	57 e4       	ldi	r21, 0x47	; 71
    1936:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    193a:	18 16       	cp	r1, r24
    193c:	4c f5       	brge	.+82     	; 0x1990 <Lcd_videnablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1940:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1942:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1944:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e2       	ldi	r20, 0x20	; 32
    194c:	51 e4       	ldi	r21, 0x41	; 65
    194e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	9d 8b       	std	Y+21, r25	; 0x15
    1964:	8c 8b       	std	Y+20, r24	; 0x14
    1966:	0f c0       	rjmp	.+30     	; 0x1986 <Lcd_videnablePulse+0x148>
    1968:	80 e9       	ldi	r24, 0x90	; 144
    196a:	91 e0       	ldi	r25, 0x01	; 1
    196c:	9b 8b       	std	Y+19, r25	; 0x13
    196e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1970:	8a 89       	ldd	r24, Y+18	; 0x12
    1972:	9b 89       	ldd	r25, Y+19	; 0x13
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <Lcd_videnablePulse+0x136>
    1978:	9b 8b       	std	Y+19, r25	; 0x13
    197a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    197c:	8c 89       	ldd	r24, Y+20	; 0x14
    197e:	9d 89       	ldd	r25, Y+21	; 0x15
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	9d 8b       	std	Y+21, r25	; 0x15
    1984:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1986:	8c 89       	ldd	r24, Y+20	; 0x14
    1988:	9d 89       	ldd	r25, Y+21	; 0x15
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	69 f7       	brne	.-38     	; 0x1968 <Lcd_videnablePulse+0x12a>
    198e:	24 c0       	rjmp	.+72     	; 0x19d8 <Lcd_videnablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1990:	6e 89       	ldd	r22, Y+22	; 0x16
    1992:	7f 89       	ldd	r23, Y+23	; 0x17
    1994:	88 8d       	ldd	r24, Y+24	; 0x18
    1996:	99 8d       	ldd	r25, Y+25	; 0x19
    1998:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9d 8b       	std	Y+21, r25	; 0x15
    19a2:	8c 8b       	std	Y+20, r24	; 0x14
    19a4:	8c 89       	ldd	r24, Y+20	; 0x14
    19a6:	9d 89       	ldd	r25, Y+21	; 0x15
    19a8:	99 8b       	std	Y+17, r25	; 0x11
    19aa:	88 8b       	std	Y+16, r24	; 0x10
    19ac:	88 89       	ldd	r24, Y+16	; 0x10
    19ae:	99 89       	ldd	r25, Y+17	; 0x11
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <Lcd_videnablePulse+0x172>
    19b4:	99 8b       	std	Y+17, r25	; 0x11
    19b6:	88 8b       	std	Y+16, r24	; 0x10
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <Lcd_videnablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19ba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19bc:	78 a1       	ldd	r23, Y+32	; 0x20
    19be:	89 a1       	ldd	r24, Y+33	; 0x21
    19c0:	9a a1       	ldd	r25, Y+34	; 0x22
    19c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8e 8f       	std	Y+30, r24	; 0x1e
    19cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19ce:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d2:	8a 95       	dec	r24
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <Lcd_videnablePulse+0x194>
    19d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	63 e0       	ldi	r22, 0x03	; 3
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	a0 e0       	ldi	r26, 0x00	; 0
    19e8:	b0 e4       	ldi	r27, 0x40	; 64
    19ea:	8b 87       	std	Y+11, r24	; 0x0b
    19ec:	9c 87       	std	Y+12, r25	; 0x0c
    19ee:	ad 87       	std	Y+13, r26	; 0x0d
    19f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a e7       	ldi	r20, 0x7A	; 122
    1a00:	55 e4       	ldi	r21, 0x45	; 69
    1a02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	8f 83       	std	Y+7, r24	; 0x07
    1a0c:	98 87       	std	Y+8, r25	; 0x08
    1a0e:	a9 87       	std	Y+9, r26	; 0x09
    1a10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a12:	6f 81       	ldd	r22, Y+7	; 0x07
    1a14:	78 85       	ldd	r23, Y+8	; 0x08
    1a16:	89 85       	ldd	r24, Y+9	; 0x09
    1a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e8       	ldi	r20, 0x80	; 128
    1a20:	5f e3       	ldi	r21, 0x3F	; 63
    1a22:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a26:	88 23       	and	r24, r24
    1a28:	2c f4       	brge	.+10     	; 0x1a34 <Lcd_videnablePulse+0x1f6>
		__ticks = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	9e 83       	std	Y+6, r25	; 0x06
    1a30:	8d 83       	std	Y+5, r24	; 0x05
    1a32:	3f c0       	rjmp	.+126    	; 0x1ab2 <Lcd_videnablePulse+0x274>
	else if (__tmp > 65535)
    1a34:	6f 81       	ldd	r22, Y+7	; 0x07
    1a36:	78 85       	ldd	r23, Y+8	; 0x08
    1a38:	89 85       	ldd	r24, Y+9	; 0x09
    1a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	3f ef       	ldi	r19, 0xFF	; 255
    1a40:	4f e7       	ldi	r20, 0x7F	; 127
    1a42:	57 e4       	ldi	r21, 0x47	; 71
    1a44:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a48:	18 16       	cp	r1, r24
    1a4a:	4c f5       	brge	.+82     	; 0x1a9e <Lcd_videnablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e2       	ldi	r20, 0x20	; 32
    1a5a:	51 e4       	ldi	r21, 0x41	; 65
    1a5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	9e 83       	std	Y+6, r25	; 0x06
    1a72:	8d 83       	std	Y+5, r24	; 0x05
    1a74:	0f c0       	rjmp	.+30     	; 0x1a94 <Lcd_videnablePulse+0x256>
    1a76:	80 e9       	ldi	r24, 0x90	; 144
    1a78:	91 e0       	ldi	r25, 0x01	; 1
    1a7a:	9c 83       	std	Y+4, r25	; 0x04
    1a7c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <Lcd_videnablePulse+0x244>
    1a86:	9c 83       	std	Y+4, r25	; 0x04
    1a88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	9e 83       	std	Y+6, r25	; 0x06
    1a92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	69 f7       	brne	.-38     	; 0x1a76 <Lcd_videnablePulse+0x238>
    1a9c:	14 c0       	rjmp	.+40     	; 0x1ac6 <Lcd_videnablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa0:	78 85       	ldd	r23, Y+8	; 0x08
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9e 83       	std	Y+6, r25	; 0x06
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab6:	9a 83       	std	Y+2, r25	; 0x02
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <Lcd_videnablePulse+0x280>
    1ac2:	9a 83       	std	Y+2, r25	; 0x02
    1ac4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1ac6:	a6 96       	adiw	r28, 0x26	; 38
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <Lcd_vidDisplayChar>:
void Lcd_vidDisplayChar(u8 chr)
{
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <Lcd_vidDisplayChar+0x6>
    1ade:	0f 92       	push	r0
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	8b 83       	std	Y+3, r24	; 0x03
	0b1101  1001

	1101   0000
	1001   0000
*/
	u8 loc_MSB = (chr & ~LCD_MASK);
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	80 7f       	andi	r24, 0xF0	; 240
    1aea:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = (chr<<4);
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	82 95       	swap	r24
    1af0:	80 7f       	andi	r24, 0xF0	; 240
    1af2:	89 83       	std	Y+1, r24	; 0x01
	//RS->1
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	61 e0       	ldi	r22, 0x01	; 1
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	6a 81       	ldd	r22, Y+2	; 0x02
    1b02:	4f e0       	ldi	r20, 0x0F	; 15
    1b04:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1b08:	0e 94 1f 0c 	call	0x183e	; 0x183e <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	69 81       	ldd	r22, Y+1	; 0x01
    1b10:	4f e0       	ldi	r20, 0x0F	; 15
    1b12:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1b16:	0e 94 1f 0c 	call	0x183e	; 0x183e <Lcd_videnablePulse>
}
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <Lcd_vidCmd>:
void Lcd_vidCmd(lcd_Cmd_t cmd)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <Lcd_vidCmd+0x6>
    1b2c:	0f 92       	push	r0
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_MSB = cmd & ~LCD_MASK;
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	80 7f       	andi	r24, 0xF0	; 240
    1b38:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = cmd<<4;
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	82 95       	swap	r24
    1b3e:	80 7f       	andi	r24, 0xF0	; 240
    1b40:	89 83       	std	Y+1, r24	; 0x01
	//RS->0
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	6a 81       	ldd	r22, Y+2	; 0x02
    1b50:	4f e0       	ldi	r20, 0x0F	; 15
    1b52:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1b56:	0e 94 1f 0c 	call	0x183e	; 0x183e <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	69 81       	ldd	r22, Y+1	; 0x01
    1b5e:	4f e0       	ldi	r20, 0x0F	; 15
    1b60:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1b64:	0e 94 1f 0c 	call	0x183e	; 0x183e <Lcd_videnablePulse>
}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <Lcd_vidRowColumn>:

void Lcd_vidRowColumn(u8 row, u8 col)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <Lcd_vidRowColumn+0x6>
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <Lcd_vidRowColumn+0x8>
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	89 83       	std	Y+1, r24	; 0x01
    1b82:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	3c 83       	std	Y+4, r19	; 0x04
    1b8c:	2b 83       	std	Y+3, r18	; 0x03
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	31 f0       	breq	.+12     	; 0x1ba2 <Lcd_vidRowColumn+0x2e>
    1b96:	2b 81       	ldd	r18, Y+3	; 0x03
    1b98:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9a:	21 30       	cpi	r18, 0x01	; 1
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	31 f0       	breq	.+12     	; 0x1bac <Lcd_vidRowColumn+0x38>
    1ba0:	09 c0       	rjmp	.+18     	; 0x1bb4 <Lcd_vidRowColumn+0x40>
	{
	case 0:
		Lcd_vidCmd(0x80 + col);
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	80 58       	subi	r24, 0x80	; 128
    1ba6:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Lcd_vidCmd>
    1baa:	04 c0       	rjmp	.+8      	; 0x1bb4 <Lcd_vidRowColumn+0x40>
		break;

	case 1:
		Lcd_vidCmd(0xC0 + col);
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	80 54       	subi	r24, 0x40	; 64
    1bb0:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <Lcd_vidCmd>
		break;
	}
}
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <Lcd_vidDisplyStr>:
void Lcd_vidDisplyStr(u8* str)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <Lcd_vidDisplyStr+0x6>
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	0a c0       	rjmp	.+20     	; 0x1be6 <Lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		Lcd_vidDisplayChar(*str);
    1bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd6:	80 81       	ld	r24, Z
    1bd8:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <Lcd_vidDisplayChar>
		str++;
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
}
void Lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    1be6:	e9 81       	ldd	r30, Y+1	; 0x01
    1be8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bea:	80 81       	ld	r24, Z
    1bec:	88 23       	and	r24, r24
    1bee:	89 f7       	brne	.-30     	; 0x1bd2 <Lcd_vidDisplyStr+0x10>
	{
		Lcd_vidDisplayChar(*str);
		str++;
	}
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <Lcd_vidDisplyInt>:

void Lcd_vidDisplyInt(u32 num)
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	29 97       	sbiw	r28, 0x09	; 9
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	6e 83       	std	Y+6, r22	; 0x06
    1c10:	7f 83       	std	Y+7, r23	; 0x07
    1c12:	88 87       	std	Y+8, r24	; 0x08
    1c14:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer[5];
	sprintf(buffer,"%d",num);
    1c16:	8d b7       	in	r24, 0x3d	; 61
    1c18:	9e b7       	in	r25, 0x3e	; 62
    1c1a:	08 97       	sbiw	r24, 0x08	; 8
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	9e bf       	out	0x3e, r25	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	8d bf       	out	0x3d, r24	; 61
    1c26:	ed b7       	in	r30, 0x3d	; 61
    1c28:	fe b7       	in	r31, 0x3e	; 62
    1c2a:	31 96       	adiw	r30, 0x01	; 1
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	91 83       	std	Z+1, r25	; 0x01
    1c32:	80 83       	st	Z, r24
    1c34:	80 e6       	ldi	r24, 0x60	; 96
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	93 83       	std	Z+3, r25	; 0x03
    1c3a:	82 83       	std	Z+2, r24	; 0x02
    1c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c40:	a8 85       	ldd	r26, Y+8	; 0x08
    1c42:	b9 85       	ldd	r27, Y+9	; 0x09
    1c44:	84 83       	std	Z+4, r24	; 0x04
    1c46:	95 83       	std	Z+5, r25	; 0x05
    1c48:	a6 83       	std	Z+6, r26	; 0x06
    1c4a:	b7 83       	std	Z+7, r27	; 0x07
    1c4c:	0e 94 17 18 	call	0x302e	; 0x302e <sprintf>
    1c50:	8d b7       	in	r24, 0x3d	; 61
    1c52:	9e b7       	in	r25, 0x3e	; 62
    1c54:	08 96       	adiw	r24, 0x08	; 8
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	9e bf       	out	0x3e, r25	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1c60:	ce 01       	movw	r24, r28
    1c62:	01 96       	adiw	r24, 0x01	; 1
    1c64:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <Lcd_vidDisplyStr>
}
    1c68:	29 96       	adiw	r28, 0x09	; 9
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <Keypad_vidinit>:
		{'7','8','9','C'},
		{'*','0','#','D'}
};

void Keypad_vidinit(void)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Rows Pins as input	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN0, DIO_INPUT);
    1c82:	82 e0       	ldi	r24, 0x02	; 2
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN1, DIO_INPUT);
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	61 e0       	ldi	r22, 0x01	; 1
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_INPUT);
    1c96:	82 e0       	ldi	r24, 0x02	; 2
    1c98:	62 e0       	ldi	r22, 0x02	; 2
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN3, DIO_INPUT);
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	63 e0       	ldi	r22, 0x03	; 3
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>

	/*	Configure Columns Pins as output	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	64 e0       	ldi	r22, 0x04	; 4
    1cae:	41 e0       	ldi	r20, 0x01	; 1
    1cb0:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	65 e0       	ldi	r22, 0x05	; 5
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	66 e0       	ldi	r22, 0x06	; 6
    1cc2:	41 e0       	ldi	r20, 0x01	; 1
    1cc4:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	67 e0       	ldi	r22, 0x07	; 7
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>

	/*	initialize output columns with high	*/
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	64 e0       	ldi	r22, 0x04	; 4
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	65 e0       	ldi	r22, 0x05	; 5
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	66 e0       	ldi	r22, 0x06	; 6
    1cea:	41 e0       	ldi	r20, 0x01	; 1
    1cec:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	67 e0       	ldi	r22, 0x07	; 7
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
}
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <Keypad_udtIsPressed>:

boolean Keypad_udtIsPressed()
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	0f 92       	push	r0
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
	if (
    1d0a:	82 e0       	ldi	r24, 0x02	; 2
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <Dio_udtreadChanel>
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	91 f0       	breq	.+36     	; 0x1d3a <Keypad_udtIsPressed+0x3a>
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	61 e0       	ldi	r22, 0x01	; 1
    1d1a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <Dio_udtreadChanel>
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	61 f0       	breq	.+24     	; 0x1d3a <Keypad_udtIsPressed+0x3a>
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	62 e0       	ldi	r22, 0x02	; 2
    1d26:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <Dio_udtreadChanel>
    1d2a:	81 30       	cpi	r24, 0x01	; 1
    1d2c:	31 f0       	breq	.+12     	; 0x1d3a <Keypad_udtIsPressed+0x3a>
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	63 e0       	ldi	r22, 0x03	; 3
    1d32:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <Dio_udtreadChanel>
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	19 f4       	brne	.+6      	; 0x1d40 <Keypad_udtIsPressed+0x40>
			(Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_HIGH)||
			(Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_HIGH)||
			(Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_HIGH)
	)
	{
		return TRUE;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	01 c0       	rjmp	.+2      	; 0x1d42 <Keypad_udtIsPressed+0x42>
	}
	else
	{
		return FALSE;
    1d40:	19 82       	std	Y+1, r1	; 0x01
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <Keypad_udtgetRow>:

kp_row_t Keypad_udtgetRow(void)
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	0f 92       	push	r0
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_row = KP_NOROW;
    1d56:	84 e0       	ldi	r24, 0x04	; 4
    1d58:	89 83       	std	Y+1, r24	; 0x01

	if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN0) == DIO_HIGH)
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	60 e0       	ldi	r22, 0x00	; 0
    1d5e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <Dio_udtreadChanel>
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	11 f4       	brne	.+4      	; 0x1d6a <Keypad_udtgetRow+0x1e>
	{
		loc_row=KP_ROW0;
    1d66:	19 82       	std	Y+1, r1	; 0x01
    1d68:	1d c0       	rjmp	.+58     	; 0x1da4 <Keypad_udtgetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_HIGH)
    1d6a:	82 e0       	ldi	r24, 0x02	; 2
    1d6c:	61 e0       	ldi	r22, 0x01	; 1
    1d6e:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <Dio_udtreadChanel>
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	19 f4       	brne	.+6      	; 0x1d7c <Keypad_udtgetRow+0x30>
	{
		loc_row=KP_ROW1;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	89 83       	std	Y+1, r24	; 0x01
    1d7a:	14 c0       	rjmp	.+40     	; 0x1da4 <Keypad_udtgetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_HIGH)
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	62 e0       	ldi	r22, 0x02	; 2
    1d80:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <Dio_udtreadChanel>
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	19 f4       	brne	.+6      	; 0x1d8e <Keypad_udtgetRow+0x42>
	{
		loc_row=KP_ROW2;
    1d88:	82 e0       	ldi	r24, 0x02	; 2
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	0b c0       	rjmp	.+22     	; 0x1da4 <Keypad_udtgetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_HIGH)
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	63 e0       	ldi	r22, 0x03	; 3
    1d92:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <Dio_udtreadChanel>
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	19 f4       	brne	.+6      	; 0x1da0 <Keypad_udtgetRow+0x54>
	{
		loc_row=KP_ROW3;
    1d9a:	83 e0       	ldi	r24, 0x03	; 3
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <Keypad_udtgetRow+0x58>
	}
	else
	{
		loc_row = KP_NOROW;
    1da0:	84 e0       	ldi	r24, 0x04	; 4
    1da2:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_row;
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <Keypad_udtgetCol>:

kp_col_t Keypad_udtgetCol(kp_row_t current_row)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <Keypad_udtgetCol+0x6>
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	8a 83       	std	Y+2, r24	; 0x02
	kp_col_t loc_column = KP_NOCOL;
    1dba:	84 e0       	ldi	r24, 0x04	; 4
    1dbc:	89 83       	std	Y+1, r24	; 0x01

	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	64 e0       	ldi	r22, 0x04	; 4
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	65 e0       	ldi	r22, 0x05	; 5
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1dd2:	82 e0       	ldi	r24, 0x02	; 2
    1dd4:	66 e0       	ldi	r22, 0x06	; 6
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	67 e0       	ldi	r22, 0x07	; 7
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>

	if (Keypad_udtgetRow() == current_row)
    1de6:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Keypad_udtgetRow>
    1dea:	98 2f       	mov	r25, r24
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	98 17       	cp	r25, r24
    1df0:	11 f4       	brne	.+4      	; 0x1df6 <Keypad_udtgetCol+0x48>
	{
		loc_column = KP_COL0;
    1df2:	19 82       	std	Y+1, r1	; 0x01
    1df4:	56 c0       	rjmp	.+172    	; 0x1ea2 <Keypad_udtgetCol+0xf4>
	}
	else
	{
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1df6:	82 e0       	ldi	r24, 0x02	; 2
    1df8:	64 e0       	ldi	r22, 0x04	; 4
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	65 e0       	ldi	r22, 0x05	; 5
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1e0a:	82 e0       	ldi	r24, 0x02	; 2
    1e0c:	66 e0       	ldi	r22, 0x06	; 6
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1e14:	82 e0       	ldi	r24, 0x02	; 2
    1e16:	67 e0       	ldi	r22, 0x07	; 7
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>

		if (Keypad_udtgetRow() == current_row)
    1e1e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Keypad_udtgetRow>
    1e22:	98 2f       	mov	r25, r24
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	98 17       	cp	r25, r24
    1e28:	19 f4       	brne	.+6      	; 0x1e30 <Keypad_udtgetCol+0x82>
		{
			loc_column = KP_COL1;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	39 c0       	rjmp	.+114    	; 0x1ea2 <Keypad_udtgetCol+0xf4>
		}
		else
		{
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	64 e0       	ldi	r22, 0x04	; 4
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1e3a:	82 e0       	ldi	r24, 0x02	; 2
    1e3c:	65 e0       	ldi	r22, 0x05	; 5
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	66 e0       	ldi	r22, 0x06	; 6
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	67 e0       	ldi	r22, 0x07	; 7
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>

			if (Keypad_udtgetRow() == current_row)
    1e58:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Keypad_udtgetRow>
    1e5c:	98 2f       	mov	r25, r24
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	98 17       	cp	r25, r24
    1e62:	19 f4       	brne	.+6      	; 0x1e6a <Keypad_udtgetCol+0xbc>
			{
				loc_column = KP_COL2;
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	1c c0       	rjmp	.+56     	; 0x1ea2 <Keypad_udtgetCol+0xf4>
			}
			else
			{
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	64 e0       	ldi	r22, 0x04	; 4
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	65 e0       	ldi	r22, 0x05	; 5
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	66 e0       	ldi	r22, 0x06	; 6
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	67 e0       	ldi	r22, 0x07	; 7
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>

				if (Keypad_udtgetRow() == current_row)
    1e92:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Keypad_udtgetRow>
    1e96:	98 2f       	mov	r25, r24
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	98 17       	cp	r25, r24
    1e9c:	11 f4       	brne	.+4      	; 0x1ea2 <Keypad_udtgetCol+0xf4>
				{
					loc_column = KP_COL3;
    1e9e:	83 e0       	ldi	r24, 0x03	; 3
    1ea0:	89 83       	std	Y+1, r24	; 0x01

				}
			}
		}
	}
	return loc_column;
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <Keypad_u8GetButton>:

u8 Keypad_u8GetButton(void)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <Keypad_u8GetButton+0x6>
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_row = KP_NOROW;
    1eba:	84 e0       	ldi	r24, 0x04	; 4
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
	kp_col_t loc_col = KP_NOCOL;
    1ebe:	84 e0       	ldi	r24, 0x04	; 4
    1ec0:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_button = 0xFF;
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	89 83       	std	Y+1, r24	; 0x01

	Keypad_vidinit();
    1ec6:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <Keypad_vidinit>

	if (Keypad_udtIsPressed() == TRUE)
    1eca:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <Keypad_udtIsPressed>
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	c9 f4       	brne	.+50     	; 0x1f04 <Keypad_u8GetButton+0x56>
	{
		loc_row = Keypad_udtgetRow();
    1ed2:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <Keypad_udtgetRow>
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
		loc_col = Keypad_udtgetCol(loc_row);
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <Keypad_udtgetCol>
    1ede:	8a 83       	std	Y+2, r24	; 0x02
		loc_button = Keypad_Layout[loc_row][loc_col];
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	ca 01       	movw	r24, r20
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	82 0f       	add	r24, r18
    1ef8:	93 1f       	adc	r25, r19
    1efa:	fc 01       	movw	r30, r24
    1efc:	e5 59       	subi	r30, 0x95	; 149
    1efe:	fe 4f       	sbci	r31, 0xFE	; 254
    1f00:	80 81       	ld	r24, Z
    1f02:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return loc_button;
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <Eeprom24C16_Init>:

#include <util/delay.h>
#include "Eeprom24C16.h"
#include "Lcd.h"
void Eeprom24C16_Init(void)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
	I2C_MasterInit();
    1f1a:	0e 94 cc 12 	call	0x2598	; 0x2598 <I2C_MasterInit>
}
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <Eeprom24C16_WriteByte>:

/*	addr = 0 to 2047	*/
void Eeprom24C16_WriteByte(u16 addr, u8 data)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	63 97       	sbiw	r28, 0x13	; 19
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	9a 8b       	std	Y+18, r25	; 0x12
    1f3a:	89 8b       	std	Y+17, r24	; 0x11
    1f3c:	6b 8b       	std	Y+19, r22	; 0x13
	u8 loc_pageNo = (addr/256);
    1f3e:	89 89       	ldd	r24, Y+17	; 0x11
    1f40:	9a 89       	ldd	r25, Y+18	; 0x12
    1f42:	89 2f       	mov	r24, r25
    1f44:	99 27       	eor	r25, r25
    1f46:	88 8b       	std	Y+16, r24	; 0x10
	u8 loc_byteNo = (addr%256);
    1f48:	89 89       	ldd	r24, Y+17	; 0x11
    1f4a:	8f 87       	std	Y+15, r24	; 0x0f

	I2C_StartCondition();
    1f4c:	0e 94 03 13 	call	0x2606	; 0x2606 <I2C_StartCondition>

	I2C_Send_SlaveAddressWriteOperation( 0x50 |loc_pageNo);
    1f50:	88 89       	ldd	r24, Y+16	; 0x10
    1f52:	80 65       	ori	r24, 0x50	; 80
    1f54:	0e 94 69 13 	call	0x26d2	; 0x26d2 <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(loc_byteNo);
    1f58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f5a:	0e 94 4f 13 	call	0x269e	; 0x269e <I2C_WriteByte>
	I2C_WriteByte(data);
    1f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f60:	0e 94 4f 13 	call	0x269e	; 0x269e <I2C_WriteByte>
	I2C_StopCondition();
    1f64:	0e 94 3c 13 	call	0x2678	; 0x2678 <I2C_StopCondition>
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	a0 e2       	ldi	r26, 0x20	; 32
    1f6e:	b1 e4       	ldi	r27, 0x41	; 65
    1f70:	8b 87       	std	Y+11, r24	; 0x0b
    1f72:	9c 87       	std	Y+12, r25	; 0x0c
    1f74:	ad 87       	std	Y+13, r26	; 0x0d
    1f76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	4a e7       	ldi	r20, 0x7A	; 122
    1f86:	55 e4       	ldi	r21, 0x45	; 69
    1f88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	8f 83       	std	Y+7, r24	; 0x07
    1f92:	98 87       	std	Y+8, r25	; 0x08
    1f94:	a9 87       	std	Y+9, r26	; 0x09
    1f96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f98:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9a:	78 85       	ldd	r23, Y+8	; 0x08
    1f9c:	89 85       	ldd	r24, Y+9	; 0x09
    1f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e8       	ldi	r20, 0x80	; 128
    1fa6:	5f e3       	ldi	r21, 0x3F	; 63
    1fa8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fac:	88 23       	and	r24, r24
    1fae:	2c f4       	brge	.+10     	; 0x1fba <Eeprom24C16_WriteByte+0x96>
		__ticks = 1;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9e 83       	std	Y+6, r25	; 0x06
    1fb6:	8d 83       	std	Y+5, r24	; 0x05
    1fb8:	3f c0       	rjmp	.+126    	; 0x2038 <Eeprom24C16_WriteByte+0x114>
	else if (__tmp > 65535)
    1fba:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbc:	78 85       	ldd	r23, Y+8	; 0x08
    1fbe:	89 85       	ldd	r24, Y+9	; 0x09
    1fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	3f ef       	ldi	r19, 0xFF	; 255
    1fc6:	4f e7       	ldi	r20, 0x7F	; 127
    1fc8:	57 e4       	ldi	r21, 0x47	; 71
    1fca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fce:	18 16       	cp	r1, r24
    1fd0:	4c f5       	brge	.+82     	; 0x2024 <Eeprom24C16_WriteByte+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	40 e2       	ldi	r20, 0x20	; 32
    1fe0:	51 e4       	ldi	r21, 0x41	; 65
    1fe2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	bc 01       	movw	r22, r24
    1fec:	cd 01       	movw	r24, r26
    1fee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	9e 83       	std	Y+6, r25	; 0x06
    1ff8:	8d 83       	std	Y+5, r24	; 0x05
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <Eeprom24C16_WriteByte+0xf6>
    1ffc:	80 e9       	ldi	r24, 0x90	; 144
    1ffe:	91 e0       	ldi	r25, 0x01	; 1
    2000:	9c 83       	std	Y+4, r25	; 0x04
    2002:	8b 83       	std	Y+3, r24	; 0x03
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	f1 f7       	brne	.-4      	; 0x2008 <Eeprom24C16_WriteByte+0xe4>
    200c:	9c 83       	std	Y+4, r25	; 0x04
    200e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	9e 81       	ldd	r25, Y+6	; 0x06
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	9e 83       	std	Y+6, r25	; 0x06
    2018:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201a:	8d 81       	ldd	r24, Y+5	; 0x05
    201c:	9e 81       	ldd	r25, Y+6	; 0x06
    201e:	00 97       	sbiw	r24, 0x00	; 0
    2020:	69 f7       	brne	.-38     	; 0x1ffc <Eeprom24C16_WriteByte+0xd8>
    2022:	14 c0       	rjmp	.+40     	; 0x204c <Eeprom24C16_WriteByte+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2024:	6f 81       	ldd	r22, Y+7	; 0x07
    2026:	78 85       	ldd	r23, Y+8	; 0x08
    2028:	89 85       	ldd	r24, Y+9	; 0x09
    202a:	9a 85       	ldd	r25, Y+10	; 0x0a
    202c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	9e 83       	std	Y+6, r25	; 0x06
    2036:	8d 83       	std	Y+5, r24	; 0x05
    2038:	8d 81       	ldd	r24, Y+5	; 0x05
    203a:	9e 81       	ldd	r25, Y+6	; 0x06
    203c:	9a 83       	std	Y+2, r25	; 0x02
    203e:	89 83       	std	Y+1, r24	; 0x01
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <Eeprom24C16_WriteByte+0x120>
    2048:	9a 83       	std	Y+2, r25	; 0x02
    204a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    204c:	63 96       	adiw	r28, 0x13	; 19
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <Eeprom24C16_ReadByte>:

/*	addr = 0 to 2047	*/
u8 Eeprom24C16_ReadByte(u16 addr)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	00 d0       	rcall	.+0      	; 0x2064 <Eeprom24C16_ReadByte+0x6>
    2064:	00 d0       	rcall	.+0      	; 0x2066 <Eeprom24C16_ReadByte+0x8>
    2066:	0f 92       	push	r0
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	9d 83       	std	Y+5, r25	; 0x05
    206e:	8c 83       	std	Y+4, r24	; 0x04
	u8 loc_pageNo = (addr/256);
    2070:	8c 81       	ldd	r24, Y+4	; 0x04
    2072:	9d 81       	ldd	r25, Y+5	; 0x05
    2074:	89 2f       	mov	r24, r25
    2076:	99 27       	eor	r25, r25
    2078:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_byteNo = (addr%256);
    207a:	8c 81       	ldd	r24, Y+4	; 0x04
    207c:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_dataRead=0;
    207e:	19 82       	std	Y+1, r1	; 0x01
	I2C_StartCondition();
    2080:	0e 94 03 13 	call	0x2606	; 0x2606 <I2C_StartCondition>
	I2C_Send_SlaveAddressWriteOperation( 0x50 | loc_pageNo);
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	80 65       	ori	r24, 0x50	; 80
    2088:	0e 94 69 13 	call	0x26d2	; 0x26d2 <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(loc_byteNo);
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	0e 94 4f 13 	call	0x269e	; 0x269e <I2C_WriteByte>
	I2C_RepeatedStartCondition();
    2092:	0e 94 1e 13 	call	0x263c	; 0x263c <I2C_RepeatedStartCondition>
	I2C_Send_SlaveAddressReadOperation( 0x50 | loc_byteNo);
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	80 65       	ori	r24, 0x50	; 80
    209a:	0e 94 86 13 	call	0x270c	; 0x270c <I2C_Send_SlaveAddressReadOperation>
	loc_dataRead = I2C_ReadByte();
    209e:	0e 94 a7 13 	call	0x274e	; 0x274e <I2C_ReadByte>
    20a2:	89 83       	std	Y+1, r24	; 0x01
	I2C_StopCondition();
    20a4:	0e 94 3c 13 	call	0x2678	; 0x2678 <I2C_StopCondition>
	return loc_dataRead;
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <DcMotor_vidInit>:
 */
#include "Dc_Motor_Types.h"
#include <util/delay.h>

void DcMotor_vidInit(void)
{
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Pins Directions	*/

	/*	Make Sure Motor Stopped	*/

}
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <DcMotor_vidStart>:

void DcMotor_vidStart(dcMotor_dir_t dir)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	0f 92       	push	r0
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	89 83       	std	Y+1, r24	; 0x01
	{
		/*	Clear IN1	*/

		/*	Set IN2	*/
	}
}
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <Dc_Motor_vidStop>:

void Dc_Motor_vidStop(void)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	2e 97       	sbiw	r28, 0x0e	; 14
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	90 e8       	ldi	r25, 0x80	; 128
    20f4:	ab e3       	ldi	r26, 0x3B	; 59
    20f6:	b5 e4       	ldi	r27, 0x45	; 69
    20f8:	8b 87       	std	Y+11, r24	; 0x0b
    20fa:	9c 87       	std	Y+12, r25	; 0x0c
    20fc:	ad 87       	std	Y+13, r26	; 0x0d
    20fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2100:	6b 85       	ldd	r22, Y+11	; 0x0b
    2102:	7c 85       	ldd	r23, Y+12	; 0x0c
    2104:	8d 85       	ldd	r24, Y+13	; 0x0d
    2106:	9e 85       	ldd	r25, Y+14	; 0x0e
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	4a e7       	ldi	r20, 0x7A	; 122
    210e:	55 e4       	ldi	r21, 0x45	; 69
    2110:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	8f 83       	std	Y+7, r24	; 0x07
    211a:	98 87       	std	Y+8, r25	; 0x08
    211c:	a9 87       	std	Y+9, r26	; 0x09
    211e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2120:	6f 81       	ldd	r22, Y+7	; 0x07
    2122:	78 85       	ldd	r23, Y+8	; 0x08
    2124:	89 85       	ldd	r24, Y+9	; 0x09
    2126:	9a 85       	ldd	r25, Y+10	; 0x0a
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e8       	ldi	r20, 0x80	; 128
    212e:	5f e3       	ldi	r21, 0x3F	; 63
    2130:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2134:	88 23       	and	r24, r24
    2136:	2c f4       	brge	.+10     	; 0x2142 <Dc_Motor_vidStop+0x66>
		__ticks = 1;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	9e 83       	std	Y+6, r25	; 0x06
    213e:	8d 83       	std	Y+5, r24	; 0x05
    2140:	3f c0       	rjmp	.+126    	; 0x21c0 <Dc_Motor_vidStop+0xe4>
	else if (__tmp > 65535)
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	3f ef       	ldi	r19, 0xFF	; 255
    214e:	4f e7       	ldi	r20, 0x7F	; 127
    2150:	57 e4       	ldi	r21, 0x47	; 71
    2152:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2156:	18 16       	cp	r1, r24
    2158:	4c f5       	brge	.+82     	; 0x21ac <Dc_Motor_vidStop+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215a:	6b 85       	ldd	r22, Y+11	; 0x0b
    215c:	7c 85       	ldd	r23, Y+12	; 0x0c
    215e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2160:	9e 85       	ldd	r25, Y+14	; 0x0e
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e2       	ldi	r20, 0x20	; 32
    2168:	51 e4       	ldi	r21, 0x41	; 65
    216a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	bc 01       	movw	r22, r24
    2174:	cd 01       	movw	r24, r26
    2176:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	9e 83       	std	Y+6, r25	; 0x06
    2180:	8d 83       	std	Y+5, r24	; 0x05
    2182:	0f c0       	rjmp	.+30     	; 0x21a2 <Dc_Motor_vidStop+0xc6>
    2184:	80 e9       	ldi	r24, 0x90	; 144
    2186:	91 e0       	ldi	r25, 0x01	; 1
    2188:	9c 83       	std	Y+4, r25	; 0x04
    218a:	8b 83       	std	Y+3, r24	; 0x03
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <Dc_Motor_vidStop+0xb4>
    2194:	9c 83       	std	Y+4, r25	; 0x04
    2196:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2198:	8d 81       	ldd	r24, Y+5	; 0x05
    219a:	9e 81       	ldd	r25, Y+6	; 0x06
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	9e 83       	std	Y+6, r25	; 0x06
    21a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a2:	8d 81       	ldd	r24, Y+5	; 0x05
    21a4:	9e 81       	ldd	r25, Y+6	; 0x06
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	69 f7       	brne	.-38     	; 0x2184 <Dc_Motor_vidStop+0xa8>
    21aa:	14 c0       	rjmp	.+40     	; 0x21d4 <Dc_Motor_vidStop+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ac:	6f 81       	ldd	r22, Y+7	; 0x07
    21ae:	78 85       	ldd	r23, Y+8	; 0x08
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	9e 83       	std	Y+6, r25	; 0x06
    21be:	8d 83       	std	Y+5, r24	; 0x05
    21c0:	8d 81       	ldd	r24, Y+5	; 0x05
    21c2:	9e 81       	ldd	r25, Y+6	; 0x06
    21c4:	9a 83       	std	Y+2, r25	; 0x02
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <Dc_Motor_vidStop+0xf0>
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	89 83       	std	Y+1, r24	; 0x01
	/*	Clear En Pin	*/

	_delay_ms(3000);
}
    21d4:	2e 96       	adiw	r28, 0x0e	; 14
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <Button_vidbuttonInit>:
 *      Author: Eng_Fawzi
 */
#include "Button.h"
#include "Dio.h"
void Button_vidbuttonInit(void)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB,DIO_PIN0,DIO_INPUT);
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB,DIO_PIN4,DIO_INPUT);
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	64 e0       	ldi	r22, 0x04	; 4
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD,DIO_PIN2,DIO_INPUT);
    2202:	83 e0       	ldi	r24, 0x03	; 3
    2204:	62 e0       	ldi	r22, 0x02	; 2
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
}
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <Button_udtbuttonStatus>:

button_butStatus_t Button_udtbuttonStatus(button_buttonId_t butnId)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <Button_udtbuttonStatus+0x6>
    2218:	00 d0       	rcall	.+0      	; 0x221a <Button_udtbuttonStatus+0x8>
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t loc_btnStatus = RELEASED;
    2220:	19 82       	std	Y+1, r1	; 0x01

	switch (butnId)
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	3c 83       	std	Y+4, r19	; 0x04
    222a:	2b 83       	std	Y+3, r18	; 0x03
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	91 05       	cpc	r25, r1
    2234:	a1 f0       	breq	.+40     	; 0x225e <Button_udtbuttonStatus+0x4c>
    2236:	2b 81       	ldd	r18, Y+3	; 0x03
    2238:	3c 81       	ldd	r19, Y+4	; 0x04
    223a:	22 30       	cpi	r18, 0x02	; 2
    223c:	31 05       	cpc	r19, r1
    223e:	d1 f0       	breq	.+52     	; 0x2274 <Button_udtbuttonStatus+0x62>
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	01 f5       	brne	.+64     	; 0x2288 <Button_udtbuttonStatus+0x76>
	{
	case BUTTON0:
		if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <Dio_udtreadChanel>
    2250:	81 30       	cpi	r24, 0x01	; 1
    2252:	19 f4       	brne	.+6      	; 0x225a <Button_udtbuttonStatus+0x48>
		{
			loc_btnStatus = PRESSED;
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	17 c0       	rjmp	.+46     	; 0x2288 <Button_udtbuttonStatus+0x76>
		}
		else
		{
			loc_btnStatus = RELEASED;
    225a:	19 82       	std	Y+1, r1	; 0x01
    225c:	15 c0       	rjmp	.+42     	; 0x2288 <Button_udtbuttonStatus+0x76>
		}
		break;

	case BUTTON1:
		if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN4) == DIO_HIGH)
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	64 e0       	ldi	r22, 0x04	; 4
    2262:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <Dio_udtreadChanel>
    2266:	81 30       	cpi	r24, 0x01	; 1
    2268:	19 f4       	brne	.+6      	; 0x2270 <Button_udtbuttonStatus+0x5e>
		{
			loc_btnStatus = PRESSED;
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	0c c0       	rjmp	.+24     	; 0x2288 <Button_udtbuttonStatus+0x76>
		}
		else
		{
			loc_btnStatus = RELEASED;
    2270:	19 82       	std	Y+1, r1	; 0x01
    2272:	0a c0       	rjmp	.+20     	; 0x2288 <Button_udtbuttonStatus+0x76>
		}
		break;

	case BUTTON2:
		if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
    2274:	83 e0       	ldi	r24, 0x03	; 3
    2276:	62 e0       	ldi	r22, 0x02	; 2
    2278:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <Dio_udtreadChanel>
    227c:	81 30       	cpi	r24, 0x01	; 1
    227e:	19 f4       	brne	.+6      	; 0x2286 <Button_udtbuttonStatus+0x74>
		{
			loc_btnStatus = PRESSED;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <Button_udtbuttonStatus+0x76>
		}
		else
		{
			loc_btnStatus = RELEASED;
    2286:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_btnStatus;
    2288:	89 81       	ldd	r24, Y+1	; 0x01
}
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <USART_Init>:
#include "Uart.h"
#include "Std_Types.h"
#include "Bit_Math.h"

void USART_Init(u32 baud)
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	28 97       	sbiw	r28, 0x08	; 8
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	6d 83       	std	Y+5, r22	; 0x05
    22ae:	7e 83       	std	Y+6, r23	; 0x06
    22b0:	8f 83       	std	Y+7, r24	; 0x07
    22b2:	98 87       	std	Y+8, r25	; 0x08
	u32 loc_UBBR_val = ((F_OSC/(16*baud))-1);
    22b4:	8d 81       	ldd	r24, Y+5	; 0x05
    22b6:	9e 81       	ldd	r25, Y+6	; 0x06
    22b8:	af 81       	ldd	r26, Y+7	; 0x07
    22ba:	b8 85       	ldd	r27, Y+8	; 0x08
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	aa 1f       	adc	r26, r26
    22c2:	bb 1f       	adc	r27, r27
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	aa 1f       	adc	r26, r26
    22ca:	bb 1f       	adc	r27, r27
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	aa 1f       	adc	r26, r26
    22d2:	bb 1f       	adc	r27, r27
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	aa 1f       	adc	r26, r26
    22da:	bb 1f       	adc	r27, r27
    22dc:	9c 01       	movw	r18, r24
    22de:	ad 01       	movw	r20, r26
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	94 e2       	ldi	r25, 0x24	; 36
    22e4:	a4 ef       	ldi	r26, 0xF4	; 244
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__udivmodsi4>
    22f0:	da 01       	movw	r26, r20
    22f2:	c9 01       	movw	r24, r18
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	a1 09       	sbc	r26, r1
    22f8:	b1 09       	sbc	r27, r1
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	ab 83       	std	Y+3, r26	; 0x03
    2300:	bc 83       	std	Y+4, r27	; 0x04
	/* Set baud rate */
	UART_UBRRH_REG = loc_UBBR_val>>8;
    2302:	e0 e4       	ldi	r30, 0x40	; 64
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	9a 81       	ldd	r25, Y+2	; 0x02
    230a:	ab 81       	ldd	r26, Y+3	; 0x03
    230c:	bc 81       	ldd	r27, Y+4	; 0x04
    230e:	89 2f       	mov	r24, r25
    2310:	9a 2f       	mov	r25, r26
    2312:	ab 2f       	mov	r26, r27
    2314:	bb 27       	eor	r27, r27
    2316:	80 83       	st	Z, r24
	UART_UBRRL_REG = loc_UBBR_val;
    2318:	e9 e2       	ldi	r30, 0x29	; 41
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UART_UCSRB_REG = (1<<UART_RXEN_BIT)|(1<<UART_TXEN_BIT);
    2320:	ea e2       	ldi	r30, 0x2A	; 42
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	88 e1       	ldi	r24, 0x18	; 24
    2326:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UART_UCSRC_REG = (1<<UART_URSEL_BIT)|(1<<UART_USBS_BIT)|(3<<UART_UCSZ0_BIT);
    2328:	e0 e4       	ldi	r30, 0x40	; 64
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	8e e8       	ldi	r24, 0x8E	; 142
    232e:	80 83       	st	Z, r24
}
    2330:	28 96       	adiw	r28, 0x08	; 8
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <USART_TransmitChar>:

void USART_TransmitChar(u8 data)
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	0f 92       	push	r0
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (CHECK_BIT(UART_UCSRA_REG,UART_UDRE_BIT) == 0)
    234e:	eb e2       	ldi	r30, 0x2B	; 43
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	82 95       	swap	r24
    2356:	86 95       	lsr	r24
    2358:	87 70       	andi	r24, 0x07	; 7
    235a:	88 2f       	mov	r24, r24
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	81 70       	andi	r24, 0x01	; 1
    2360:	90 70       	andi	r25, 0x00	; 0
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	a1 f3       	breq	.-24     	; 0x234e <USART_TransmitChar+0xc>
	{
		;
	}
		/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
    2366:	ec e2       	ldi	r30, 0x2C	; 44
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	80 83       	st	Z, r24
}
    236e:	0f 90       	pop	r0
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <USART_Receive_NonBlock>:

/*	it shall be called periodically	*/
u8 USART_Receive_NonBlock(void)
{
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	0f 92       	push	r0
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	if (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 1)
    2380:	eb e2       	ldi	r30, 0x2B	; 43
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	88 1f       	adc	r24, r24
    2388:	88 27       	eor	r24, r24
    238a:	88 1f       	adc	r24, r24
    238c:	81 30       	cpi	r24, 0x01	; 1
    238e:	29 f4       	brne	.+10     	; 0x239a <USART_Receive_NonBlock+0x24>
	{
		/* Get and return received data from buffer */
		return UART_UDR_REG;
    2390:	ec e2       	ldi	r30, 0x2C	; 44
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	01 c0       	rjmp	.+2      	; 0x239c <USART_Receive_NonBlock+0x26>
	}
	else
	{
		return 0;
    239a:	19 82       	std	Y+1, r1	; 0x01
    239c:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    239e:	0f 90       	pop	r0
    23a0:	cf 91       	pop	r28
    23a2:	df 91       	pop	r29
    23a4:	08 95       	ret

000023a6 <USART_Receive_Block>:

u8 USART_Receive_Block(void)
{
    23a6:	df 93       	push	r29
    23a8:	cf 93       	push	r28
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while(CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 0)
    23ae:	eb e2       	ldi	r30, 0x2B	; 43
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	88 23       	and	r24, r24
    23b6:	dc f7       	brge	.-10     	; 0x23ae <USART_Receive_Block+0x8>
	{
		;
	}
	/* Get and return received data from buffer */
	return UART_UDR_REG;
    23b8:	ec e2       	ldi	r30, 0x2C	; 44
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
}
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <USART_TransmitStr>:

void USART_TransmitStr(u8 *str)
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <USART_TransmitStr+0x6>
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	0a c0       	rjmp	.+20     	; 0x23e8 <USART_TransmitStr+0x24>
	while (*str != '\0')
	{
		USART_TransmitChar(*str);
    23d4:	e9 81       	ldd	r30, Y+1	; 0x01
    23d6:	fa 81       	ldd	r31, Y+2	; 0x02
    23d8:	80 81       	ld	r24, Z
    23da:	0e 94 a1 11 	call	0x2342	; 0x2342 <USART_TransmitChar>
		str++;
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
	return UART_UDR_REG;
}

void USART_TransmitStr(u8 *str)
{
	while (*str != '\0')
    23e8:	e9 81       	ldd	r30, Y+1	; 0x01
    23ea:	fa 81       	ldd	r31, Y+2	; 0x02
    23ec:	80 81       	ld	r24, Z
    23ee:	88 23       	and	r24, r24
    23f0:	89 f7       	brne	.-30     	; 0x23d4 <USART_TransmitStr+0x10>
	{
		USART_TransmitChar(*str);
		str++;
	}
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	cf 91       	pop	r28
    23f8:	df 91       	pop	r29
    23fa:	08 95       	ret

000023fc <USART_ReceiveInterruptEnable>:

void USART_ReceiveInterruptEnable(void)
{
    23fc:	df 93       	push	r29
    23fe:	cf 93       	push	r28
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_UCSRB_REG,UART_RXC_INT_BIT);
    2404:	aa e2       	ldi	r26, 0x2A	; 42
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	ea e2       	ldi	r30, 0x2A	; 42
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	80 68       	ori	r24, 0x80	; 128
    2410:	8c 93       	st	X, r24
}
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <Spi_vidMasterInit>:
 *
 *************************************************/
#include "Spi.h"

void Spi_vidMasterInit(void)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	65 e0       	ldi	r22, 0x05	; 5
    2424:	41 e0       	ldi	r20, 0x01	; 1
    2426:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	/*	configure SPI SS Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	64 e0       	ldi	r22, 0x04	; 4
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	/*	configure SPI SCK Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	67 e0       	ldi	r22, 0x07	; 7
    2438:	41 e0       	ldi	r20, 0x01	; 1
    243a:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	/*	configure SPI MISO Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN6, DIO_INPUT);
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	66 e0       	ldi	r22, 0x06	; 6
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	/*	initialize SPI SS pin with HIGH (No slave selected) */
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	64 e0       	ldi	r22, 0x04	; 4
    244c:	41 e0       	ldi	r20, 0x01	; 1
    244e:	0e 94 d7 14 	call	0x29ae	; 0x29ae <Dio_vidwriteChanel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    2452:	ad e2       	ldi	r26, 0x2D	; 45
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	ed e2       	ldi	r30, 0x2D	; 45
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	80 64       	ori	r24, 0x40	; 64
    245e:	8c 93       	st	X, r24
	/*	enable SPI Module in Master mode	*/
	SET_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    2460:	ad e2       	ldi	r26, 0x2D	; 45
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	ed e2       	ldi	r30, 0x2D	; 45
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	80 61       	ori	r24, 0x10	; 16
    246c:	8c 93       	st	X, r24
	/*	set SCK frequency by F_CPU/16	*/
	/*	Set SPI Speed	1MHZ*/
	SPI_SPCR_REG |= SPI_SCK_FREQ_FCPU_DIV_16;
    246e:	ad e2       	ldi	r26, 0x2D	; 45
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	ed e2       	ldi	r30, 0x2D	; 45
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	81 60       	ori	r24, 0x01	; 1
    247a:	8c 93       	st	X, r24
}
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <Spi_vidSlaveInit>:

void Spi_vidSlaveInit(void)
{
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN5, DIO_INPUT);
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	65 e0       	ldi	r22, 0x05	; 5
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	/*	configure SPI SS Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN4, DIO_INPUT);
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	64 e0       	ldi	r22, 0x04	; 4
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	/*	configure SPI SCK Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN7, DIO_INPUT);
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	67 e0       	ldi	r22, 0x07	; 7
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	/*	configure SPI MISO Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	66 e0       	ldi	r22, 0x06	; 6
    24ac:	41 e0       	ldi	r20, 0x01	; 1
    24ae:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <Dio_vidconfigChanel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    24b2:	ad e2       	ldi	r26, 0x2D	; 45
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	ed e2       	ldi	r30, 0x2D	; 45
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	80 64       	ori	r24, 0x40	; 64
    24be:	8c 93       	st	X, r24
	/*	enable SPI Module in Slave mode	*/
	CLEAR_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    24c0:	ad e2       	ldi	r26, 0x2D	; 45
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	ed e2       	ldi	r30, 0x2D	; 45
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	8f 7e       	andi	r24, 0xEF	; 239
    24cc:	8c 93       	st	X, r24
}
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <Spi_MasterWrite>:

void Spi_MasterWrite(u8 data)
{
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	00 d0       	rcall	.+0      	; 0x24da <Spi_MasterWrite+0x6>
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_flush_byte;
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    24e0:	ef e2       	ldi	r30, 0x2F	; 47
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
    24e6:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    24e8:	ee e2       	ldi	r30, 0x2E	; 46
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	88 23       	and	r24, r24
    24f0:	dc f7       	brge	.-10     	; 0x24e8 <Spi_MasterWrite+0x14>
	{
		;
	}
		/*	flush the data register	*/
	loc_flush_byte = SPI_SPDR_REG;
    24f2:	ef e2       	ldi	r30, 0x2F	; 47
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	89 83       	std	Y+1, r24	; 0x01
}
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret

00002504 <Spi_u8MasterRead>:

u8 Spi_u8MasterRead(void)
{
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	0f 92       	push	r0
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
	u8 loc_dummy_byte=0xFF;
    250e:	8f ef       	ldi	r24, 0xFF	; 255
    2510:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = loc_dummy_byte;
    2512:	ef e2       	ldi	r30, 0x2F	; 47
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	80 83       	st	Z, r24
	/*	wait until byte received	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    251a:	ee e2       	ldi	r30, 0x2E	; 46
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	88 23       	and	r24, r24
    2522:	dc f7       	brge	.-10     	; 0x251a <Spi_u8MasterRead+0x16>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    2524:	ef e2       	ldi	r30, 0x2F	; 47
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
}
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <Spi_u8MasterTranseve>:

u8 Spi_u8MasterTranseve(u8 data)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	0f 92       	push	r0
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    253e:	ef e2       	ldi	r30, 0x2F	; 47
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    2546:	ee e2       	ldi	r30, 0x2E	; 46
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	88 23       	and	r24, r24
    254e:	dc f7       	brge	.-10     	; 0x2546 <Spi_u8MasterTranseve+0x14>
	{
		;
	}
	/*	flush the data register	*/
	return SPI_SPDR_REG;
    2550:	ef e2       	ldi	r30, 0x2F	; 47
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
}
    2556:	0f 90       	pop	r0
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <Spi_u8SlaveRead>:

u8 Spi_u8SlaveRead(void)
{
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
	/*	wait until byte received	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    2566:	ee e2       	ldi	r30, 0x2E	; 46
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	88 23       	and	r24, r24
    256e:	dc f7       	brge	.-10     	; 0x2566 <Spi_u8SlaveRead+0x8>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    2570:	ef e2       	ldi	r30, 0x2F	; 47
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
}
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <Spi_vidSlaveWrite>:

void Spi_vidSlaveWrite(u8 data)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	0f 92       	push	r0
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	89 83       	std	Y+1, r24	; 0x01
	SPI_SPDR_REG = data;
    2588:	ef e2       	ldi	r30, 0x2F	; 47
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	80 83       	st	Z, r24
}
    2590:	0f 90       	pop	r0
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <I2C_MasterInit>:
 *
 ***********************************************/
#include "I2c.h"

void I2C_MasterInit(void)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400 KHZ */
	I2C_TWBR_REG=0x0C;
    25a0:	e0 e2       	ldi	r30, 0x20	; 32
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	8c e0       	ldi	r24, 0x0C	; 12
    25a6:	80 83       	st	Z, r24
    /* enable I2C Module	*/
	/* enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    25a8:	a6 e5       	ldi	r26, 0x56	; 86
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	e6 e5       	ldi	r30, 0x56	; 86
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	84 64       	ori	r24, 0x44	; 68
    25b4:	8c 93       	st	X, r24
}
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <I2C_SlaveInit>:

void I2C_SlaveInit(u8 addr)
{
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	0f 92       	push	r0
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	89 83       	std	Y+1, r24	; 0x01
	/*	enable general call response in slave mode	*/
	SET_BIT(I2C_TWAR_REG,I2C_SLAVE_RESPONSE_BIT_NO);
    25c8:	a2 e2       	ldi	r26, 0x22	; 34
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e2 e2       	ldi	r30, 0x22	; 34
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	81 60       	ori	r24, 0x01	; 1
    25d4:	8c 93       	st	X, r24
    /* I2C Bus Slave Address	*/
	I2C_TWAR_REG |= (addr<<1);
    25d6:	a2 e2       	ldi	r26, 0x22	; 34
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e2 e2       	ldi	r30, 0x22	; 34
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	28 2f       	mov	r18, r24
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	88 2f       	mov	r24, r24
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	88 0f       	add	r24, r24
    25ea:	99 1f       	adc	r25, r25
    25ec:	82 2b       	or	r24, r18
    25ee:	8c 93       	st	X, r24
    /* enable I2C Module	*/
	/*	enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    25f0:	a6 e5       	ldi	r26, 0x56	; 86
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	e6 e5       	ldi	r30, 0x56	; 86
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	84 64       	ori	r24, 0x44	; 68
    25fc:	8c 93       	st	X, r24
}
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <I2C_StartCondition>:
boolean I2C_StartCondition(void)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	0f 92       	push	r0
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG = I2C_ENABLE|I2C_INTERRUPT_FLAG|I2C_START_COND;
    2610:	e6 e5       	ldi	r30, 0x56	; 86
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	84 ea       	ldi	r24, 0xA4	; 164
    2616:	80 83       	st	Z, r24
    /*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    2618:	e6 e5       	ldi	r30, 0x56	; 86
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	88 23       	and	r24, r24
    2620:	dc f7       	brge	.-10     	; 0x2618 <I2C_StartCondition+0x12>
    {
    	/*Do Nothing */
    	   ;
    }

    if (I2C_ReadStatus() != I2C_START_ACK)
    2622:	0e 94 bd 13 	call	0x277a	; 0x277a <I2C_ReadStatus>
    2626:	88 30       	cpi	r24, 0x08	; 8
    2628:	11 f0       	breq	.+4      	; 0x262e <I2C_StartCondition+0x28>
    {
    	return FALSE;
    262a:	19 82       	std	Y+1, r1	; 0x01
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <I2C_StartCondition+0x2c>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	89 83       	std	Y+1, r24	; 0x01
    2632:	89 81       	ldd	r24, Y+1	; 0x01
}
    2634:	0f 90       	pop	r0
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <I2C_RepeatedStartCondition>:
boolean I2C_RepeatedStartCondition(void)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	0f 92       	push	r0
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG|I2C_START_COND;
    2646:	a6 e5       	ldi	r26, 0x56	; 86
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e6 e5       	ldi	r30, 0x56	; 86
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	84 6a       	ori	r24, 0xA4	; 164
    2652:	8c 93       	st	X, r24
    /*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    2654:	e6 e5       	ldi	r30, 0x56	; 86
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	88 23       	and	r24, r24
    265c:	dc f7       	brge	.-10     	; 0x2654 <I2C_RepeatedStartCondition+0x18>
    {
    	/*Do Nothing */
    	   ;
    }
    if (I2C_ReadStatus() != I2C_REP_START_ACK)
    265e:	0e 94 bd 13 	call	0x277a	; 0x277a <I2C_ReadStatus>
    2662:	80 31       	cpi	r24, 0x10	; 16
    2664:	11 f0       	breq	.+4      	; 0x266a <I2C_RepeatedStartCondition+0x2e>
    {
    	return FALSE;
    2666:	19 82       	std	Y+1, r1	; 0x01
    2668:	02 c0       	rjmp	.+4      	; 0x266e <I2C_RepeatedStartCondition+0x32>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2670:	0f 90       	pop	r0
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	08 95       	ret

00002678 <I2C_StopCondition>:
void I2C_StopCondition(void)
{
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
	/*	send stop condition	*/
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG|I2C_STOP_COND;
    2680:	a6 e5       	ldi	r26, 0x56	; 86
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e6 e5       	ldi	r30, 0x56	; 86
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	84 69       	ori	r24, 0x94	; 148
    268c:	8c 93       	st	X, r24
	/*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    268e:	e6 e5       	ldi	r30, 0x56	; 86
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	88 23       	and	r24, r24
    2696:	dc f7       	brge	.-10     	; 0x268e <I2C_StopCondition+0x16>
    {
    	/*Do Nothing */
    	   ;
    }
}
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <I2C_WriteByte>:
void I2C_WriteByte(u8 data)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	0f 92       	push	r0
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	89 83       	std	Y+1, r24	; 0x01
    /*	Put data On I2C data Register	*/
	I2C_TWDR_REG = data;
    26aa:	e3 e2       	ldi	r30, 0x23	; 35
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	80 83       	st	Z, r24

    /*	Send byte	*/
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG;
    26b2:	a6 e5       	ldi	r26, 0x56	; 86
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	e6 e5       	ldi	r30, 0x56	; 86
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	84 68       	ori	r24, 0x84	; 132
    26be:	8c 93       	st	X, r24



	/*	Wait until data sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    26c0:	e6 e5       	ldi	r30, 0x56	; 86
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	88 23       	and	r24, r24
    26c8:	dc f7       	brge	.-10     	; 0x26c0 <I2C_WriteByte+0x22>
    {
    	/*Do Nothing */
    	   ;
    }
}
    26ca:	0f 90       	pop	r0
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <I2C_Send_SlaveAddressWriteOperation>:
boolean I2C_Send_SlaveAddressWriteOperation(u8 addr)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <I2C_Send_SlaveAddressWriteOperation+0x6>
    26d8:	0f 92       	push	r0
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    26e0:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1);
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	88 0f       	add	r24, r24
    26e6:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	0e 94 4f 13 	call	0x269e	; 0x269e <I2C_WriteByte>
    if (I2C_ReadStatus() != I2C_SLA_W_ACK)
    26ee:	0e 94 bd 13 	call	0x277a	; 0x277a <I2C_ReadStatus>
    26f2:	88 31       	cpi	r24, 0x18	; 24
    26f4:	11 f0       	breq	.+4      	; 0x26fa <I2C_Send_SlaveAddressWriteOperation+0x28>
    {
    	return FALSE;
    26f6:	1b 82       	std	Y+3, r1	; 0x03
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <I2C_Send_SlaveAddressWriteOperation+0x2c>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	8b 83       	std	Y+3, r24	; 0x03
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03

}
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <I2C_Send_SlaveAddressReadOperation>:
boolean I2C_Send_SlaveAddressReadOperation(u8 addr)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <I2C_Send_SlaveAddressReadOperation+0x6>
    2712:	0f 92       	push	r0
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    271a:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1)|(0x01);
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	88 2f       	mov	r24, r24
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	88 0f       	add	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	81 60       	ori	r24, 0x01	; 1
    2728:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	0e 94 4f 13 	call	0x269e	; 0x269e <I2C_WriteByte>
    if (I2C_ReadStatus() != I2C_SLA_R_ACK)
    2730:	0e 94 bd 13 	call	0x277a	; 0x277a <I2C_ReadStatus>
    2734:	80 34       	cpi	r24, 0x40	; 64
    2736:	11 f0       	breq	.+4      	; 0x273c <I2C_Send_SlaveAddressReadOperation+0x30>
    {
    	return FALSE;
    2738:	1b 82       	std	Y+3, r1	; 0x03
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <I2C_Send_SlaveAddressReadOperation+0x34>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	8b 83       	std	Y+3, r24	; 0x03
    2740:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <I2C_ReadByte>:
u8 I2C_ReadByte(void)
{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG;
    2756:	a6 e5       	ldi	r26, 0x56	; 86
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e6 e5       	ldi	r30, 0x56	; 86
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	84 68       	ori	r24, 0x84	; 132
    2762:	8c 93       	st	X, r24
	/*	Wait until data sent successfully	*/
    while (!(CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    2764:	e6 e5       	ldi	r30, 0x56	; 86
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	88 23       	and	r24, r24
    276c:	dc f7       	brge	.-10     	; 0x2764 <I2C_ReadByte+0x16>
    {
    	/*Do Nothing */
    	   ;
    }
    return I2C_TWDR_REG;
    276e:	e3 e2       	ldi	r30, 0x23	; 35
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
}
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <I2C_ReadStatus>:
u8 I2C_ReadStatus(void)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	0f 92       	push	r0
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    u8 status;
    status = I2C_TWSR_REG & 0xF8; // 1111 1000
    2784:	e1 e2       	ldi	r30, 0x21	; 33
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	88 7f       	andi	r24, 0xF8	; 248
    278c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    278e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2790:	0f 90       	pop	r0
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <GINT_vidEnableAllInterrupts>:
 */
#include "GINT_Reg.h"
#include "Bit_Math.h"

void GINT_vidEnableAllInterrupts(void)
{
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG,7);
    27a0:	af e5       	ldi	r26, 0x5F	; 95
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	ef e5       	ldi	r30, 0x5F	; 95
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	80 68       	ori	r24, 0x80	; 128
    27ac:	8c 93       	st	X, r24
}
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <GINT_vidDisableAllInterrupts>:
void GINT_vidDisableAllInterrupts(void)
{
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG,7);
    27bc:	af e5       	ldi	r26, 0x5F	; 95
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	ef e5       	ldi	r30, 0x5F	; 95
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	8f 77       	andi	r24, 0x7F	; 127
    27c8:	8c 93       	st	X, r24
}
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	08 95       	ret

000027d0 <EXTINT_vidEnableExtInt>:
#include "EXTINT_Types.h"
#include "EXTINT_Reg.h"
#include "Bit_Math.h"

void EXTINT_vidEnableExtInt(extint_intId_t intId, extint_sensId_t snensId)
{
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <EXTINT_vidEnableExtInt+0x6>
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	6a 83       	std	Y+2, r22	; 0x02

}
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <Dio_vidconfigChanel>:
 */
#include "Dio.h"
#include "Bit_Math.h"

void Dio_vidconfigChanel(dio_port_t port, dio_pin_t pin,dio_dir_t dir)
{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	00 d0       	rcall	.+0      	; 0x27ee <Dio_vidconfigChanel+0x6>
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <Dio_vidconfigChanel+0x8>
    27f0:	0f 92       	push	r0
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	89 83       	std	Y+1, r24	; 0x01
    27f8:	6a 83       	std	Y+2, r22	; 0x02
    27fa:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	3d 83       	std	Y+5, r19	; 0x05
    2804:	2c 83       	std	Y+4, r18	; 0x04
    2806:	8c 81       	ldd	r24, Y+4	; 0x04
    2808:	9d 81       	ldd	r25, Y+5	; 0x05
    280a:	81 30       	cpi	r24, 0x01	; 1
    280c:	91 05       	cpc	r25, r1
    280e:	09 f4       	brne	.+2      	; 0x2812 <Dio_vidconfigChanel+0x2a>
    2810:	43 c0       	rjmp	.+134    	; 0x2898 <Dio_vidconfigChanel+0xb0>
    2812:	2c 81       	ldd	r18, Y+4	; 0x04
    2814:	3d 81       	ldd	r19, Y+5	; 0x05
    2816:	22 30       	cpi	r18, 0x02	; 2
    2818:	31 05       	cpc	r19, r1
    281a:	2c f4       	brge	.+10     	; 0x2826 <Dio_vidconfigChanel+0x3e>
    281c:	8c 81       	ldd	r24, Y+4	; 0x04
    281e:	9d 81       	ldd	r25, Y+5	; 0x05
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	71 f0       	breq	.+28     	; 0x2840 <Dio_vidconfigChanel+0x58>
    2824:	bc c0       	rjmp	.+376    	; 0x299e <Dio_vidconfigChanel+0x1b6>
    2826:	2c 81       	ldd	r18, Y+4	; 0x04
    2828:	3d 81       	ldd	r19, Y+5	; 0x05
    282a:	22 30       	cpi	r18, 0x02	; 2
    282c:	31 05       	cpc	r19, r1
    282e:	09 f4       	brne	.+2      	; 0x2832 <Dio_vidconfigChanel+0x4a>
    2830:	5f c0       	rjmp	.+190    	; 0x28f0 <Dio_vidconfigChanel+0x108>
    2832:	8c 81       	ldd	r24, Y+4	; 0x04
    2834:	9d 81       	ldd	r25, Y+5	; 0x05
    2836:	83 30       	cpi	r24, 0x03	; 3
    2838:	91 05       	cpc	r25, r1
    283a:	09 f4       	brne	.+2      	; 0x283e <Dio_vidconfigChanel+0x56>
    283c:	85 c0       	rjmp	.+266    	; 0x2948 <Dio_vidconfigChanel+0x160>
    283e:	af c0       	rjmp	.+350    	; 0x299e <Dio_vidconfigChanel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	88 23       	and	r24, r24
    2844:	a9 f4       	brne	.+42     	; 0x2870 <Dio_vidconfigChanel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    2846:	aa e3       	ldi	r26, 0x3A	; 58
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	ea e3       	ldi	r30, 0x3A	; 58
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	48 2f       	mov	r20, r24
    2852:	8a 81       	ldd	r24, Y+2	; 0x02
    2854:	28 2f       	mov	r18, r24
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	02 2e       	mov	r0, r18
    285e:	02 c0       	rjmp	.+4      	; 0x2864 <Dio_vidconfigChanel+0x7c>
    2860:	88 0f       	add	r24, r24
    2862:	99 1f       	adc	r25, r25
    2864:	0a 94       	dec	r0
    2866:	e2 f7       	brpl	.-8      	; 0x2860 <Dio_vidconfigChanel+0x78>
    2868:	80 95       	com	r24
    286a:	84 23       	and	r24, r20
    286c:	8c 93       	st	X, r24
    286e:	97 c0       	rjmp	.+302    	; 0x299e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    2870:	aa e3       	ldi	r26, 0x3A	; 58
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	ea e3       	ldi	r30, 0x3A	; 58
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	48 2f       	mov	r20, r24
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	02 2e       	mov	r0, r18
    2888:	02 c0       	rjmp	.+4      	; 0x288e <Dio_vidconfigChanel+0xa6>
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	0a 94       	dec	r0
    2890:	e2 f7       	brpl	.-8      	; 0x288a <Dio_vidconfigChanel+0xa2>
    2892:	84 2b       	or	r24, r20
    2894:	8c 93       	st	X, r24
    2896:	83 c0       	rjmp	.+262    	; 0x299e <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	88 23       	and	r24, r24
    289c:	a9 f4       	brne	.+42     	; 0x28c8 <Dio_vidconfigChanel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    289e:	a7 e3       	ldi	r26, 0x37	; 55
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e7 e3       	ldi	r30, 0x37	; 55
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	48 2f       	mov	r20, r24
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	28 2f       	mov	r18, r24
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	02 2e       	mov	r0, r18
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <Dio_vidconfigChanel+0xd4>
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	0a 94       	dec	r0
    28be:	e2 f7       	brpl	.-8      	; 0x28b8 <Dio_vidconfigChanel+0xd0>
    28c0:	80 95       	com	r24
    28c2:	84 23       	and	r24, r20
    28c4:	8c 93       	st	X, r24
    28c6:	6b c0       	rjmp	.+214    	; 0x299e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    28c8:	a7 e3       	ldi	r26, 0x37	; 55
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	e7 e3       	ldi	r30, 0x37	; 55
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	48 2f       	mov	r20, r24
    28d4:	8a 81       	ldd	r24, Y+2	; 0x02
    28d6:	28 2f       	mov	r18, r24
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	02 2e       	mov	r0, r18
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <Dio_vidconfigChanel+0xfe>
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	0a 94       	dec	r0
    28e8:	e2 f7       	brpl	.-8      	; 0x28e2 <Dio_vidconfigChanel+0xfa>
    28ea:	84 2b       	or	r24, r20
    28ec:	8c 93       	st	X, r24
    28ee:	57 c0       	rjmp	.+174    	; 0x299e <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    28f0:	8b 81       	ldd	r24, Y+3	; 0x03
    28f2:	88 23       	and	r24, r24
    28f4:	a9 f4       	brne	.+42     	; 0x2920 <Dio_vidconfigChanel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    28f6:	a4 e3       	ldi	r26, 0x34	; 52
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	e4 e3       	ldi	r30, 0x34	; 52
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	48 2f       	mov	r20, r24
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	28 2f       	mov	r18, r24
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	02 2e       	mov	r0, r18
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <Dio_vidconfigChanel+0x12c>
    2910:	88 0f       	add	r24, r24
    2912:	99 1f       	adc	r25, r25
    2914:	0a 94       	dec	r0
    2916:	e2 f7       	brpl	.-8      	; 0x2910 <Dio_vidconfigChanel+0x128>
    2918:	80 95       	com	r24
    291a:	84 23       	and	r24, r20
    291c:	8c 93       	st	X, r24
    291e:	3f c0       	rjmp	.+126    	; 0x299e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    2920:	a4 e3       	ldi	r26, 0x34	; 52
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e4 e3       	ldi	r30, 0x34	; 52
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	48 2f       	mov	r20, r24
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	28 2f       	mov	r18, r24
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	02 2e       	mov	r0, r18
    2938:	02 c0       	rjmp	.+4      	; 0x293e <Dio_vidconfigChanel+0x156>
    293a:	88 0f       	add	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	0a 94       	dec	r0
    2940:	e2 f7       	brpl	.-8      	; 0x293a <Dio_vidconfigChanel+0x152>
    2942:	84 2b       	or	r24, r20
    2944:	8c 93       	st	X, r24
    2946:	2b c0       	rjmp	.+86     	; 0x299e <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	88 23       	and	r24, r24
    294c:	a9 f4       	brne	.+42     	; 0x2978 <Dio_vidconfigChanel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    294e:	a1 e3       	ldi	r26, 0x31	; 49
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	e1 e3       	ldi	r30, 0x31	; 49
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	48 2f       	mov	r20, r24
    295a:	8a 81       	ldd	r24, Y+2	; 0x02
    295c:	28 2f       	mov	r18, r24
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	02 2e       	mov	r0, r18
    2966:	02 c0       	rjmp	.+4      	; 0x296c <Dio_vidconfigChanel+0x184>
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	0a 94       	dec	r0
    296e:	e2 f7       	brpl	.-8      	; 0x2968 <Dio_vidconfigChanel+0x180>
    2970:	80 95       	com	r24
    2972:	84 23       	and	r24, r20
    2974:	8c 93       	st	X, r24
    2976:	13 c0       	rjmp	.+38     	; 0x299e <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    2978:	a1 e3       	ldi	r26, 0x31	; 49
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e1 e3       	ldi	r30, 0x31	; 49
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	48 2f       	mov	r20, r24
    2984:	8a 81       	ldd	r24, Y+2	; 0x02
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	02 2e       	mov	r0, r18
    2990:	02 c0       	rjmp	.+4      	; 0x2996 <Dio_vidconfigChanel+0x1ae>
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	0a 94       	dec	r0
    2998:	e2 f7       	brpl	.-8      	; 0x2992 <Dio_vidconfigChanel+0x1aa>
    299a:	84 2b       	or	r24, r20
    299c:	8c 93       	st	X, r24
		}
		break;
	}
}
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <Dio_vidwriteChanel>:

void Dio_vidwriteChanel(dio_port_t port, dio_pin_t pin,dio_level_t level)
{
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <Dio_vidwriteChanel+0x6>
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <Dio_vidwriteChanel+0x8>
    29b6:	0f 92       	push	r0
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	89 83       	std	Y+1, r24	; 0x01
    29be:	6a 83       	std	Y+2, r22	; 0x02
    29c0:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    29c2:	89 81       	ldd	r24, Y+1	; 0x01
    29c4:	28 2f       	mov	r18, r24
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	3d 83       	std	Y+5, r19	; 0x05
    29ca:	2c 83       	std	Y+4, r18	; 0x04
    29cc:	8c 81       	ldd	r24, Y+4	; 0x04
    29ce:	9d 81       	ldd	r25, Y+5	; 0x05
    29d0:	81 30       	cpi	r24, 0x01	; 1
    29d2:	91 05       	cpc	r25, r1
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <Dio_vidwriteChanel+0x2a>
    29d6:	43 c0       	rjmp	.+134    	; 0x2a5e <Dio_vidwriteChanel+0xb0>
    29d8:	2c 81       	ldd	r18, Y+4	; 0x04
    29da:	3d 81       	ldd	r19, Y+5	; 0x05
    29dc:	22 30       	cpi	r18, 0x02	; 2
    29de:	31 05       	cpc	r19, r1
    29e0:	2c f4       	brge	.+10     	; 0x29ec <Dio_vidwriteChanel+0x3e>
    29e2:	8c 81       	ldd	r24, Y+4	; 0x04
    29e4:	9d 81       	ldd	r25, Y+5	; 0x05
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	71 f0       	breq	.+28     	; 0x2a06 <Dio_vidwriteChanel+0x58>
    29ea:	bc c0       	rjmp	.+376    	; 0x2b64 <Dio_vidwriteChanel+0x1b6>
    29ec:	2c 81       	ldd	r18, Y+4	; 0x04
    29ee:	3d 81       	ldd	r19, Y+5	; 0x05
    29f0:	22 30       	cpi	r18, 0x02	; 2
    29f2:	31 05       	cpc	r19, r1
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <Dio_vidwriteChanel+0x4a>
    29f6:	5f c0       	rjmp	.+190    	; 0x2ab6 <Dio_vidwriteChanel+0x108>
    29f8:	8c 81       	ldd	r24, Y+4	; 0x04
    29fa:	9d 81       	ldd	r25, Y+5	; 0x05
    29fc:	83 30       	cpi	r24, 0x03	; 3
    29fe:	91 05       	cpc	r25, r1
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <Dio_vidwriteChanel+0x56>
    2a02:	85 c0       	rjmp	.+266    	; 0x2b0e <Dio_vidwriteChanel+0x160>
    2a04:	af c0       	rjmp	.+350    	; 0x2b64 <Dio_vidwriteChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    2a06:	8b 81       	ldd	r24, Y+3	; 0x03
    2a08:	81 30       	cpi	r24, 0x01	; 1
    2a0a:	a1 f4       	brne	.+40     	; 0x2a34 <Dio_vidwriteChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    2a0c:	ab e3       	ldi	r26, 0x3B	; 59
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	eb e3       	ldi	r30, 0x3B	; 59
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	48 2f       	mov	r20, r24
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	02 2e       	mov	r0, r18
    2a24:	02 c0       	rjmp	.+4      	; 0x2a2a <Dio_vidwriteChanel+0x7c>
    2a26:	88 0f       	add	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	0a 94       	dec	r0
    2a2c:	e2 f7       	brpl	.-8      	; 0x2a26 <Dio_vidwriteChanel+0x78>
    2a2e:	84 2b       	or	r24, r20
    2a30:	8c 93       	st	X, r24
    2a32:	98 c0       	rjmp	.+304    	; 0x2b64 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    2a34:	ab e3       	ldi	r26, 0x3B	; 59
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	eb e3       	ldi	r30, 0x3B	; 59
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	48 2f       	mov	r20, r24
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	02 2e       	mov	r0, r18
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <Dio_vidwriteChanel+0xa4>
    2a4e:	88 0f       	add	r24, r24
    2a50:	99 1f       	adc	r25, r25
    2a52:	0a 94       	dec	r0
    2a54:	e2 f7       	brpl	.-8      	; 0x2a4e <Dio_vidwriteChanel+0xa0>
    2a56:	80 95       	com	r24
    2a58:	84 23       	and	r24, r20
    2a5a:	8c 93       	st	X, r24
    2a5c:	83 c0       	rjmp	.+262    	; 0x2b64 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	81 30       	cpi	r24, 0x01	; 1
    2a62:	a1 f4       	brne	.+40     	; 0x2a8c <Dio_vidwriteChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    2a64:	a8 e3       	ldi	r26, 0x38	; 56
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e8 e3       	ldi	r30, 0x38	; 56
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	48 2f       	mov	r20, r24
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	02 2e       	mov	r0, r18
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <Dio_vidwriteChanel+0xd4>
    2a7e:	88 0f       	add	r24, r24
    2a80:	99 1f       	adc	r25, r25
    2a82:	0a 94       	dec	r0
    2a84:	e2 f7       	brpl	.-8      	; 0x2a7e <Dio_vidwriteChanel+0xd0>
    2a86:	84 2b       	or	r24, r20
    2a88:	8c 93       	st	X, r24
    2a8a:	6c c0       	rjmp	.+216    	; 0x2b64 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    2a8c:	a8 e3       	ldi	r26, 0x38	; 56
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e8 e3       	ldi	r30, 0x38	; 56
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	48 2f       	mov	r20, r24
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	02 2e       	mov	r0, r18
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <Dio_vidwriteChanel+0xfc>
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	0a 94       	dec	r0
    2aac:	e2 f7       	brpl	.-8      	; 0x2aa6 <Dio_vidwriteChanel+0xf8>
    2aae:	80 95       	com	r24
    2ab0:	84 23       	and	r24, r20
    2ab2:	8c 93       	st	X, r24
    2ab4:	57 c0       	rjmp	.+174    	; 0x2b64 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	81 30       	cpi	r24, 0x01	; 1
    2aba:	a1 f4       	brne	.+40     	; 0x2ae4 <Dio_vidwriteChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    2abc:	a5 e3       	ldi	r26, 0x35	; 53
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	e5 e3       	ldi	r30, 0x35	; 53
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	48 2f       	mov	r20, r24
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	02 2e       	mov	r0, r18
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <Dio_vidwriteChanel+0x12c>
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	0a 94       	dec	r0
    2adc:	e2 f7       	brpl	.-8      	; 0x2ad6 <Dio_vidwriteChanel+0x128>
    2ade:	84 2b       	or	r24, r20
    2ae0:	8c 93       	st	X, r24
    2ae2:	40 c0       	rjmp	.+128    	; 0x2b64 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    2ae4:	a5 e3       	ldi	r26, 0x35	; 53
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e5 e3       	ldi	r30, 0x35	; 53
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	48 2f       	mov	r20, r24
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	02 2e       	mov	r0, r18
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <Dio_vidwriteChanel+0x154>
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	0a 94       	dec	r0
    2b04:	e2 f7       	brpl	.-8      	; 0x2afe <Dio_vidwriteChanel+0x150>
    2b06:	80 95       	com	r24
    2b08:	84 23       	and	r24, r20
    2b0a:	8c 93       	st	X, r24
    2b0c:	2b c0       	rjmp	.+86     	; 0x2b64 <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    2b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	a1 f4       	brne	.+40     	; 0x2b3c <Dio_vidwriteChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    2b14:	a2 e3       	ldi	r26, 0x32	; 50
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	e2 e3       	ldi	r30, 0x32	; 50
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	48 2f       	mov	r20, r24
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	28 2f       	mov	r18, r24
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	02 2e       	mov	r0, r18
    2b2c:	02 c0       	rjmp	.+4      	; 0x2b32 <Dio_vidwriteChanel+0x184>
    2b2e:	88 0f       	add	r24, r24
    2b30:	99 1f       	adc	r25, r25
    2b32:	0a 94       	dec	r0
    2b34:	e2 f7       	brpl	.-8      	; 0x2b2e <Dio_vidwriteChanel+0x180>
    2b36:	84 2b       	or	r24, r20
    2b38:	8c 93       	st	X, r24
    2b3a:	14 c0       	rjmp	.+40     	; 0x2b64 <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    2b3c:	a2 e3       	ldi	r26, 0x32	; 50
    2b3e:	b0 e0       	ldi	r27, 0x00	; 0
    2b40:	e2 e3       	ldi	r30, 0x32	; 50
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	48 2f       	mov	r20, r24
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	28 2f       	mov	r18, r24
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	02 2e       	mov	r0, r18
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <Dio_vidwriteChanel+0x1ac>
    2b56:	88 0f       	add	r24, r24
    2b58:	99 1f       	adc	r25, r25
    2b5a:	0a 94       	dec	r0
    2b5c:	e2 f7       	brpl	.-8      	; 0x2b56 <Dio_vidwriteChanel+0x1a8>
    2b5e:	80 95       	com	r24
    2b60:	84 23       	and	r24, r20
    2b62:	8c 93       	st	X, r24
		}
		break;
	}
}
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	cf 91       	pop	r28
    2b70:	df 91       	pop	r29
    2b72:	08 95       	ret

00002b74 <Dio_vidWriteChanelGroup>:

void Dio_vidWriteChanelGroup(dio_port_t port, u8 data, u8 mask)
{
    2b74:	df 93       	push	r29
    2b76:	cf 93       	push	r28
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <Dio_vidWriteChanelGroup+0x6>
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <Dio_vidWriteChanelGroup+0x8>
    2b7c:	0f 92       	push	r0
    2b7e:	cd b7       	in	r28, 0x3d	; 61
    2b80:	de b7       	in	r29, 0x3e	; 62
    2b82:	89 83       	std	Y+1, r24	; 0x01
    2b84:	6a 83       	std	Y+2, r22	; 0x02
    2b86:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	3d 83       	std	Y+5, r19	; 0x05
    2b90:	2c 83       	std	Y+4, r18	; 0x04
    2b92:	8c 81       	ldd	r24, Y+4	; 0x04
    2b94:	9d 81       	ldd	r25, Y+5	; 0x05
    2b96:	81 30       	cpi	r24, 0x01	; 1
    2b98:	91 05       	cpc	r25, r1
    2b9a:	01 f1       	breq	.+64     	; 0x2bdc <Dio_vidWriteChanelGroup+0x68>
    2b9c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b9e:	3d 81       	ldd	r19, Y+5	; 0x05
    2ba0:	22 30       	cpi	r18, 0x02	; 2
    2ba2:	31 05       	cpc	r19, r1
    2ba4:	2c f4       	brge	.+10     	; 0x2bb0 <Dio_vidWriteChanelGroup+0x3c>
    2ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    2baa:	00 97       	sbiw	r24, 0x00	; 0
    2bac:	61 f0       	breq	.+24     	; 0x2bc6 <Dio_vidWriteChanelGroup+0x52>
    2bae:	36 c0       	rjmp	.+108    	; 0x2c1c <Dio_vidWriteChanelGroup+0xa8>
    2bb0:	2c 81       	ldd	r18, Y+4	; 0x04
    2bb2:	3d 81       	ldd	r19, Y+5	; 0x05
    2bb4:	22 30       	cpi	r18, 0x02	; 2
    2bb6:	31 05       	cpc	r19, r1
    2bb8:	e1 f0       	breq	.+56     	; 0x2bf2 <Dio_vidWriteChanelGroup+0x7e>
    2bba:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbe:	83 30       	cpi	r24, 0x03	; 3
    2bc0:	91 05       	cpc	r25, r1
    2bc2:	11 f1       	breq	.+68     	; 0x2c08 <Dio_vidWriteChanelGroup+0x94>
    2bc4:	2b c0       	rjmp	.+86     	; 0x2c1c <Dio_vidWriteChanelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data);
    2bc6:	ab e3       	ldi	r26, 0x3B	; 59
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	eb e3       	ldi	r30, 0x3B	; 59
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	90 81       	ld	r25, Z
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	98 23       	and	r25, r24
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	89 2b       	or	r24, r25
    2bd8:	8c 93       	st	X, r24
    2bda:	20 c0       	rjmp	.+64     	; 0x2c1c <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    2bdc:	a8 e3       	ldi	r26, 0x38	; 56
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	e8 e3       	ldi	r30, 0x38	; 56
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	90 81       	ld	r25, Z
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	98 23       	and	r25, r24
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	89 2b       	or	r24, r25
    2bee:	8c 93       	st	X, r24
    2bf0:	15 c0       	rjmp	.+42     	; 0x2c1c <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    2bf2:	a5 e3       	ldi	r26, 0x35	; 53
    2bf4:	b0 e0       	ldi	r27, 0x00	; 0
    2bf6:	e5 e3       	ldi	r30, 0x35	; 53
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	90 81       	ld	r25, Z
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	98 23       	and	r25, r24
    2c00:	8a 81       	ldd	r24, Y+2	; 0x02
    2c02:	89 2b       	or	r24, r25
    2c04:	8c 93       	st	X, r24
    2c06:	0a c0       	rjmp	.+20     	; 0x2c1c <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    2c08:	a2 e3       	ldi	r26, 0x32	; 50
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	e2 e3       	ldi	r30, 0x32	; 50
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	90 81       	ld	r25, Z
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	98 23       	and	r25, r24
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	89 2b       	or	r24, r25
    2c1a:	8c 93       	st	X, r24
		break;
	}
}
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	08 95       	ret

00002c2c <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    2c2c:	df 93       	push	r29
    2c2e:	cf 93       	push	r28
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <Dio_udtreadChanel+0x6>
    2c32:	00 d0       	rcall	.+0      	; 0x2c34 <Dio_udtreadChanel+0x8>
    2c34:	0f 92       	push	r0
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	8a 83       	std	Y+2, r24	; 0x02
    2c3c:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    2c3e:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
    2c40:	8a 81       	ldd	r24, Y+2	; 0x02
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	3d 83       	std	Y+5, r19	; 0x05
    2c48:	2c 83       	std	Y+4, r18	; 0x04
    2c4a:	4c 81       	ldd	r20, Y+4	; 0x04
    2c4c:	5d 81       	ldd	r21, Y+5	; 0x05
    2c4e:	41 30       	cpi	r20, 0x01	; 1
    2c50:	51 05       	cpc	r21, r1
    2c52:	79 f1       	breq	.+94     	; 0x2cb2 <Dio_udtreadChanel+0x86>
    2c54:	8c 81       	ldd	r24, Y+4	; 0x04
    2c56:	9d 81       	ldd	r25, Y+5	; 0x05
    2c58:	82 30       	cpi	r24, 0x02	; 2
    2c5a:	91 05       	cpc	r25, r1
    2c5c:	34 f4       	brge	.+12     	; 0x2c6a <Dio_udtreadChanel+0x3e>
    2c5e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c60:	3d 81       	ldd	r19, Y+5	; 0x05
    2c62:	21 15       	cp	r18, r1
    2c64:	31 05       	cpc	r19, r1
    2c66:	69 f0       	breq	.+26     	; 0x2c82 <Dio_udtreadChanel+0x56>
    2c68:	6b c0       	rjmp	.+214    	; 0x2d40 <Dio_udtreadChanel+0x114>
    2c6a:	4c 81       	ldd	r20, Y+4	; 0x04
    2c6c:	5d 81       	ldd	r21, Y+5	; 0x05
    2c6e:	42 30       	cpi	r20, 0x02	; 2
    2c70:	51 05       	cpc	r21, r1
    2c72:	b9 f1       	breq	.+110    	; 0x2ce2 <Dio_udtreadChanel+0xb6>
    2c74:	8c 81       	ldd	r24, Y+4	; 0x04
    2c76:	9d 81       	ldd	r25, Y+5	; 0x05
    2c78:	83 30       	cpi	r24, 0x03	; 3
    2c7a:	91 05       	cpc	r25, r1
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <Dio_udtreadChanel+0x54>
    2c7e:	49 c0       	rjmp	.+146    	; 0x2d12 <Dio_udtreadChanel+0xe6>
    2c80:	5f c0       	rjmp	.+190    	; 0x2d40 <Dio_udtreadChanel+0x114>
	{
	case DIO_PORTA:
		if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    2c82:	e9 e3       	ldi	r30, 0x39	; 57
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	28 2f       	mov	r18, r24
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8e:	88 2f       	mov	r24, r24
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	a9 01       	movw	r20, r18
    2c94:	02 c0       	rjmp	.+4      	; 0x2c9a <Dio_udtreadChanel+0x6e>
    2c96:	55 95       	asr	r21
    2c98:	47 95       	ror	r20
    2c9a:	8a 95       	dec	r24
    2c9c:	e2 f7       	brpl	.-8      	; 0x2c96 <Dio_udtreadChanel+0x6a>
    2c9e:	ca 01       	movw	r24, r20
    2ca0:	81 70       	andi	r24, 0x01	; 1
    2ca2:	90 70       	andi	r25, 0x00	; 0
    2ca4:	88 23       	and	r24, r24
    2ca6:	19 f0       	breq	.+6      	; 0x2cae <Dio_udtreadChanel+0x82>
		{
			loc_result = DIO_HIGH;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	89 83       	std	Y+1, r24	; 0x01
    2cac:	49 c0       	rjmp	.+146    	; 0x2d40 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2cae:	19 82       	std	Y+1, r1	; 0x01
    2cb0:	47 c0       	rjmp	.+142    	; 0x2d40 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    2cb2:	e6 e3       	ldi	r30, 0x36	; 54
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	28 2f       	mov	r18, r24
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbe:	88 2f       	mov	r24, r24
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	a9 01       	movw	r20, r18
    2cc4:	02 c0       	rjmp	.+4      	; 0x2cca <Dio_udtreadChanel+0x9e>
    2cc6:	55 95       	asr	r21
    2cc8:	47 95       	ror	r20
    2cca:	8a 95       	dec	r24
    2ccc:	e2 f7       	brpl	.-8      	; 0x2cc6 <Dio_udtreadChanel+0x9a>
    2cce:	ca 01       	movw	r24, r20
    2cd0:	81 70       	andi	r24, 0x01	; 1
    2cd2:	90 70       	andi	r25, 0x00	; 0
    2cd4:	88 23       	and	r24, r24
    2cd6:	19 f0       	breq	.+6      	; 0x2cde <Dio_udtreadChanel+0xb2>
		{
			loc_result = DIO_HIGH;
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	31 c0       	rjmp	.+98     	; 0x2d40 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2cde:	19 82       	std	Y+1, r1	; 0x01
    2ce0:	2f c0       	rjmp	.+94     	; 0x2d40 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    2ce2:	e3 e3       	ldi	r30, 0x33	; 51
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	28 2f       	mov	r18, r24
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	8b 81       	ldd	r24, Y+3	; 0x03
    2cee:	88 2f       	mov	r24, r24
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	a9 01       	movw	r20, r18
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <Dio_udtreadChanel+0xce>
    2cf6:	55 95       	asr	r21
    2cf8:	47 95       	ror	r20
    2cfa:	8a 95       	dec	r24
    2cfc:	e2 f7       	brpl	.-8      	; 0x2cf6 <Dio_udtreadChanel+0xca>
    2cfe:	ca 01       	movw	r24, r20
    2d00:	81 70       	andi	r24, 0x01	; 1
    2d02:	90 70       	andi	r25, 0x00	; 0
    2d04:	88 23       	and	r24, r24
    2d06:	19 f0       	breq	.+6      	; 0x2d0e <Dio_udtreadChanel+0xe2>
		{
			loc_result = DIO_HIGH;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	19 c0       	rjmp	.+50     	; 0x2d40 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2d0e:	19 82       	std	Y+1, r1	; 0x01
    2d10:	17 c0       	rjmp	.+46     	; 0x2d40 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    2d12:	e0 e3       	ldi	r30, 0x30	; 48
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	28 2f       	mov	r18, r24
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	88 2f       	mov	r24, r24
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	a9 01       	movw	r20, r18
    2d24:	02 c0       	rjmp	.+4      	; 0x2d2a <Dio_udtreadChanel+0xfe>
    2d26:	55 95       	asr	r21
    2d28:	47 95       	ror	r20
    2d2a:	8a 95       	dec	r24
    2d2c:	e2 f7       	brpl	.-8      	; 0x2d26 <Dio_udtreadChanel+0xfa>
    2d2e:	ca 01       	movw	r24, r20
    2d30:	81 70       	andi	r24, 0x01	; 1
    2d32:	90 70       	andi	r25, 0x00	; 0
    2d34:	88 23       	and	r24, r24
    2d36:	19 f0       	breq	.+6      	; 0x2d3e <Dio_udtreadChanel+0x112>
		{
			loc_result = DIO_HIGH;
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	89 83       	std	Y+1, r24	; 0x01
    2d3c:	01 c0       	rjmp	.+2      	; 0x2d40 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    2d3e:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	cf 91       	pop	r28
    2d4e:	df 91       	pop	r29
    2d50:	08 95       	ret

00002d52 <Dio_vidflipChanel>:

void Dio_vidflipChanel(dio_port_t port, dio_pin_t pin)
{
    2d52:	df 93       	push	r29
    2d54:	cf 93       	push	r28
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <Dio_vidflipChanel+0x6>
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <Dio_vidflipChanel+0x8>
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	89 83       	std	Y+1, r24	; 0x01
    2d60:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	28 2f       	mov	r18, r24
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	3c 83       	std	Y+4, r19	; 0x04
    2d6a:	2b 83       	std	Y+3, r18	; 0x03
    2d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d70:	81 30       	cpi	r24, 0x01	; 1
    2d72:	91 05       	cpc	r25, r1
    2d74:	49 f1       	breq	.+82     	; 0x2dc8 <Dio_vidflipChanel+0x76>
    2d76:	2b 81       	ldd	r18, Y+3	; 0x03
    2d78:	3c 81       	ldd	r19, Y+4	; 0x04
    2d7a:	22 30       	cpi	r18, 0x02	; 2
    2d7c:	31 05       	cpc	r19, r1
    2d7e:	2c f4       	brge	.+10     	; 0x2d8a <Dio_vidflipChanel+0x38>
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	9c 81       	ldd	r25, Y+4	; 0x04
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	61 f0       	breq	.+24     	; 0x2da0 <Dio_vidflipChanel+0x4e>
    2d88:	5a c0       	rjmp	.+180    	; 0x2e3e <Dio_vidflipChanel+0xec>
    2d8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d8c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d8e:	22 30       	cpi	r18, 0x02	; 2
    2d90:	31 05       	cpc	r19, r1
    2d92:	71 f1       	breq	.+92     	; 0x2df0 <Dio_vidflipChanel+0x9e>
    2d94:	8b 81       	ldd	r24, Y+3	; 0x03
    2d96:	9c 81       	ldd	r25, Y+4	; 0x04
    2d98:	83 30       	cpi	r24, 0x03	; 3
    2d9a:	91 05       	cpc	r25, r1
    2d9c:	e9 f1       	breq	.+122    	; 0x2e18 <Dio_vidflipChanel+0xc6>
    2d9e:	4f c0       	rjmp	.+158    	; 0x2e3e <Dio_vidflipChanel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    2da0:	ab e3       	ldi	r26, 0x3B	; 59
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	eb e3       	ldi	r30, 0x3B	; 59
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	48 2f       	mov	r20, r24
    2dac:	8a 81       	ldd	r24, Y+2	; 0x02
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	02 2e       	mov	r0, r18
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <Dio_vidflipChanel+0x6c>
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	0a 94       	dec	r0
    2dc0:	e2 f7       	brpl	.-8      	; 0x2dba <Dio_vidflipChanel+0x68>
    2dc2:	84 27       	eor	r24, r20
    2dc4:	8c 93       	st	X, r24
    2dc6:	3b c0       	rjmp	.+118    	; 0x2e3e <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    2dc8:	a8 e3       	ldi	r26, 0x38	; 56
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	e8 e3       	ldi	r30, 0x38	; 56
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	48 2f       	mov	r20, r24
    2dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd6:	28 2f       	mov	r18, r24
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	02 2e       	mov	r0, r18
    2de0:	02 c0       	rjmp	.+4      	; 0x2de6 <Dio_vidflipChanel+0x94>
    2de2:	88 0f       	add	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	0a 94       	dec	r0
    2de8:	e2 f7       	brpl	.-8      	; 0x2de2 <Dio_vidflipChanel+0x90>
    2dea:	84 27       	eor	r24, r20
    2dec:	8c 93       	st	X, r24
    2dee:	27 c0       	rjmp	.+78     	; 0x2e3e <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    2df0:	a5 e3       	ldi	r26, 0x35	; 53
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	e5 e3       	ldi	r30, 0x35	; 53
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	80 81       	ld	r24, Z
    2dfa:	48 2f       	mov	r20, r24
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	28 2f       	mov	r18, r24
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	02 2e       	mov	r0, r18
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <Dio_vidflipChanel+0xbc>
    2e0a:	88 0f       	add	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	0a 94       	dec	r0
    2e10:	e2 f7       	brpl	.-8      	; 0x2e0a <Dio_vidflipChanel+0xb8>
    2e12:	84 27       	eor	r24, r20
    2e14:	8c 93       	st	X, r24
    2e16:	13 c0       	rjmp	.+38     	; 0x2e3e <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    2e18:	a2 e3       	ldi	r26, 0x32	; 50
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	e2 e3       	ldi	r30, 0x32	; 50
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	48 2f       	mov	r20, r24
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
    2e26:	28 2f       	mov	r18, r24
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	02 2e       	mov	r0, r18
    2e30:	02 c0       	rjmp	.+4      	; 0x2e36 <Dio_vidflipChanel+0xe4>
    2e32:	88 0f       	add	r24, r24
    2e34:	99 1f       	adc	r25, r25
    2e36:	0a 94       	dec	r0
    2e38:	e2 f7       	brpl	.-8      	; 0x2e32 <Dio_vidflipChanel+0xe0>
    2e3a:	84 27       	eor	r24, r20
    2e3c:	8c 93       	st	X, r24
		break;
	}
}
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	cf 91       	pop	r28
    2e48:	df 91       	pop	r29
    2e4a:	08 95       	ret

00002e4c <Adc_vidInit>:
#include "Adc_Reg.h"
#include "Adc_Types.h"
#include "Bit_Math.h"

void Adc_vidInit(void)
{
    2e4c:	df 93       	push	r29
    2e4e:	cf 93       	push	r28
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62

	/*	Enable ADC	*/
	SET_BIT(ADC_ADCSRA_REG, 7);
    2e54:	a6 e2       	ldi	r26, 0x26	; 38
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e6 e2       	ldi	r30, 0x26	; 38
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	80 68       	ori	r24, 0x80	; 128
    2e60:	8c 93       	st	X, r24
	/*	Configure ADC prescaler	 /128	*/
	ADC_ADCSRA_REG |= 7 /*0000 0111*/;
    2e62:	a6 e2       	ldi	r26, 0x26	; 38
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	e6 e2       	ldi	r30, 0x26	; 38
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	80 81       	ld	r24, Z
    2e6c:	87 60       	ori	r24, 0x07	; 7
    2e6e:	8c 93       	st	X, r24
	/*	Select Vref +	AVCC	*/
	SET_BIT(ADC_ADMUX_REG,6);
    2e70:	a7 e2       	ldi	r26, 0x27	; 39
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	e7 e2       	ldi	r30, 0x27	; 39
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	80 64       	ori	r24, 0x40	; 64
    2e7c:	8c 93       	st	X, r24
}
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	08 95       	ret

00002e84 <Adc_u16AdcRead>:

f64 Adc_u16AdcRead(adc_channlId_t channel)
{
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	27 97       	sbiw	r28, 0x07	; 7
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	8f 83       	std	Y+7, r24	; 0x07
	u16 loc_adcResult = 0;
    2e9a:	1e 82       	std	Y+6, r1	; 0x06
    2e9c:	1d 82       	std	Y+5, r1	; 0x05
	f64 loc_volt =0;
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	a0 e0       	ldi	r26, 0x00	; 0
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	89 83       	std	Y+1, r24	; 0x01
    2ea8:	9a 83       	std	Y+2, r25	; 0x02
    2eaa:	ab 83       	std	Y+3, r26	; 0x03
    2eac:	bc 83       	std	Y+4, r27	; 0x04
	/*	select ADC channel	*/
	ADC_ADMUX_REG =  (ADC_ADMUX_REG & 0xF8)| channel;
    2eae:	a7 e2       	ldi	r26, 0x27	; 39
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	e7 e2       	ldi	r30, 0x27	; 39
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	98 2f       	mov	r25, r24
    2eba:	98 7f       	andi	r25, 0xF8	; 248
    2ebc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ebe:	89 2b       	or	r24, r25
    2ec0:	8c 93       	st	X, r24
	/*	Start ADC conversion	*/
	SET_BIT(ADC_ADCSRA_REG,6);
    2ec2:	a6 e2       	ldi	r26, 0x26	; 38
    2ec4:	b0 e0       	ldi	r27, 0x00	; 0
    2ec6:	e6 e2       	ldi	r30, 0x26	; 38
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	80 64       	ori	r24, 0x40	; 64
    2ece:	8c 93       	st	X, r24

	/*	wait until ADIF flag become 1 */
	while(CHECK_BIT(ADC_ADCSRA_REG,4) !=1)
    2ed0:	e6 e2       	ldi	r30, 0x26	; 38
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
    2ed6:	82 95       	swap	r24
    2ed8:	8f 70       	andi	r24, 0x0F	; 15
    2eda:	88 2f       	mov	r24, r24
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	81 70       	andi	r24, 0x01	; 1
    2ee0:	90 70       	andi	r25, 0x00	; 0
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	a9 f3       	breq	.-22     	; 0x2ed0 <Adc_u16AdcRead+0x4c>
	{
		/*	Do Nothing	*/
	}

	/*	clear ADIF by writing 1 	*/
	SET_BIT(ADC_ADCSRA_REG,4);
    2ee6:	a6 e2       	ldi	r26, 0x26	; 38
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e6 e2       	ldi	r30, 0x26	; 38
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	80 61       	ori	r24, 0x10	; 16
    2ef2:	8c 93       	st	X, r24

	/*	read ADC result form ADCL, ADCH	*/
	loc_adcResult=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    2ef4:	e4 e2       	ldi	r30, 0x24	; 36
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	28 2f       	mov	r18, r24
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	e5 e2       	ldi	r30, 0x25	; 37
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	88 2f       	mov	r24, r24
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	98 2f       	mov	r25, r24
    2f0a:	88 27       	eor	r24, r24
    2f0c:	82 2b       	or	r24, r18
    2f0e:	93 2b       	or	r25, r19
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05

	loc_volt = loc_adcResult * ADC_STEP;
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	cc 01       	movw	r24, r24
    2f1a:	a0 e0       	ldi	r26, 0x00	; 0
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	bc 01       	movw	r22, r24
    2f2c:	cd 01       	movw	r24, r26
    2f2e:	2a e9       	ldi	r18, 0x9A	; 154
    2f30:	39 e9       	ldi	r19, 0x99	; 153
    2f32:	49 e9       	ldi	r20, 0x99	; 153
    2f34:	50 e4       	ldi	r21, 0x40	; 64
    2f36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	89 83       	std	Y+1, r24	; 0x01
    2f40:	9a 83       	std	Y+2, r25	; 0x02
    2f42:	ab 83       	std	Y+3, r26	; 0x03
    2f44:	bc 83       	std	Y+4, r27	; 0x04
	return loc_volt;
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4a:	ab 81       	ldd	r26, Y+3	; 0x03
    2f4c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2f4e:	bc 01       	movw	r22, r24
    2f50:	cd 01       	movw	r24, r26
    2f52:	27 96       	adiw	r28, 0x07	; 7
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	f8 94       	cli
    2f58:	de bf       	out	0x3e, r29	; 62
    2f5a:	0f be       	out	0x3f, r0	; 63
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	cf 91       	pop	r28
    2f60:	df 91       	pop	r29
    2f62:	08 95       	ret

00002f64 <__udivmodqi4>:
    2f64:	99 1b       	sub	r25, r25
    2f66:	79 e0       	ldi	r23, 0x09	; 9
    2f68:	04 c0       	rjmp	.+8      	; 0x2f72 <__udivmodqi4_ep>

00002f6a <__udivmodqi4_loop>:
    2f6a:	99 1f       	adc	r25, r25
    2f6c:	96 17       	cp	r25, r22
    2f6e:	08 f0       	brcs	.+2      	; 0x2f72 <__udivmodqi4_ep>
    2f70:	96 1b       	sub	r25, r22

00002f72 <__udivmodqi4_ep>:
    2f72:	88 1f       	adc	r24, r24
    2f74:	7a 95       	dec	r23
    2f76:	c9 f7       	brne	.-14     	; 0x2f6a <__udivmodqi4_loop>
    2f78:	80 95       	com	r24
    2f7a:	08 95       	ret

00002f7c <__udivmodsi4>:
    2f7c:	a1 e2       	ldi	r26, 0x21	; 33
    2f7e:	1a 2e       	mov	r1, r26
    2f80:	aa 1b       	sub	r26, r26
    2f82:	bb 1b       	sub	r27, r27
    2f84:	fd 01       	movw	r30, r26
    2f86:	0d c0       	rjmp	.+26     	; 0x2fa2 <__udivmodsi4_ep>

00002f88 <__udivmodsi4_loop>:
    2f88:	aa 1f       	adc	r26, r26
    2f8a:	bb 1f       	adc	r27, r27
    2f8c:	ee 1f       	adc	r30, r30
    2f8e:	ff 1f       	adc	r31, r31
    2f90:	a2 17       	cp	r26, r18
    2f92:	b3 07       	cpc	r27, r19
    2f94:	e4 07       	cpc	r30, r20
    2f96:	f5 07       	cpc	r31, r21
    2f98:	20 f0       	brcs	.+8      	; 0x2fa2 <__udivmodsi4_ep>
    2f9a:	a2 1b       	sub	r26, r18
    2f9c:	b3 0b       	sbc	r27, r19
    2f9e:	e4 0b       	sbc	r30, r20
    2fa0:	f5 0b       	sbc	r31, r21

00002fa2 <__udivmodsi4_ep>:
    2fa2:	66 1f       	adc	r22, r22
    2fa4:	77 1f       	adc	r23, r23
    2fa6:	88 1f       	adc	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	1a 94       	dec	r1
    2fac:	69 f7       	brne	.-38     	; 0x2f88 <__udivmodsi4_loop>
    2fae:	60 95       	com	r22
    2fb0:	70 95       	com	r23
    2fb2:	80 95       	com	r24
    2fb4:	90 95       	com	r25
    2fb6:	9b 01       	movw	r18, r22
    2fb8:	ac 01       	movw	r20, r24
    2fba:	bd 01       	movw	r22, r26
    2fbc:	cf 01       	movw	r24, r30
    2fbe:	08 95       	ret

00002fc0 <__prologue_saves__>:
    2fc0:	2f 92       	push	r2
    2fc2:	3f 92       	push	r3
    2fc4:	4f 92       	push	r4
    2fc6:	5f 92       	push	r5
    2fc8:	6f 92       	push	r6
    2fca:	7f 92       	push	r7
    2fcc:	8f 92       	push	r8
    2fce:	9f 92       	push	r9
    2fd0:	af 92       	push	r10
    2fd2:	bf 92       	push	r11
    2fd4:	cf 92       	push	r12
    2fd6:	df 92       	push	r13
    2fd8:	ef 92       	push	r14
    2fda:	ff 92       	push	r15
    2fdc:	0f 93       	push	r16
    2fde:	1f 93       	push	r17
    2fe0:	cf 93       	push	r28
    2fe2:	df 93       	push	r29
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	ca 1b       	sub	r28, r26
    2fea:	db 0b       	sbc	r29, r27
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	09 94       	ijmp

00002ff8 <__epilogue_restores__>:
    2ff8:	2a 88       	ldd	r2, Y+18	; 0x12
    2ffa:	39 88       	ldd	r3, Y+17	; 0x11
    2ffc:	48 88       	ldd	r4, Y+16	; 0x10
    2ffe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3000:	6e 84       	ldd	r6, Y+14	; 0x0e
    3002:	7d 84       	ldd	r7, Y+13	; 0x0d
    3004:	8c 84       	ldd	r8, Y+12	; 0x0c
    3006:	9b 84       	ldd	r9, Y+11	; 0x0b
    3008:	aa 84       	ldd	r10, Y+10	; 0x0a
    300a:	b9 84       	ldd	r11, Y+9	; 0x09
    300c:	c8 84       	ldd	r12, Y+8	; 0x08
    300e:	df 80       	ldd	r13, Y+7	; 0x07
    3010:	ee 80       	ldd	r14, Y+6	; 0x06
    3012:	fd 80       	ldd	r15, Y+5	; 0x05
    3014:	0c 81       	ldd	r16, Y+4	; 0x04
    3016:	1b 81       	ldd	r17, Y+3	; 0x03
    3018:	aa 81       	ldd	r26, Y+2	; 0x02
    301a:	b9 81       	ldd	r27, Y+1	; 0x01
    301c:	ce 0f       	add	r28, r30
    301e:	d1 1d       	adc	r29, r1
    3020:	0f b6       	in	r0, 0x3f	; 63
    3022:	f8 94       	cli
    3024:	de bf       	out	0x3e, r29	; 62
    3026:	0f be       	out	0x3f, r0	; 63
    3028:	cd bf       	out	0x3d, r28	; 61
    302a:	ed 01       	movw	r28, r26
    302c:	08 95       	ret

0000302e <sprintf>:
    302e:	ae e0       	ldi	r26, 0x0E	; 14
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	ed e1       	ldi	r30, 0x1D	; 29
    3034:	f8 e1       	ldi	r31, 0x18	; 24
    3036:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__prologue_saves__+0x1c>
    303a:	0d 89       	ldd	r16, Y+21	; 0x15
    303c:	1e 89       	ldd	r17, Y+22	; 0x16
    303e:	86 e0       	ldi	r24, 0x06	; 6
    3040:	8c 83       	std	Y+4, r24	; 0x04
    3042:	1a 83       	std	Y+2, r17	; 0x02
    3044:	09 83       	std	Y+1, r16	; 0x01
    3046:	8f ef       	ldi	r24, 0xFF	; 255
    3048:	9f e7       	ldi	r25, 0x7F	; 127
    304a:	9e 83       	std	Y+6, r25	; 0x06
    304c:	8d 83       	std	Y+5, r24	; 0x05
    304e:	9e 01       	movw	r18, r28
    3050:	27 5e       	subi	r18, 0xE7	; 231
    3052:	3f 4f       	sbci	r19, 0xFF	; 255
    3054:	ce 01       	movw	r24, r28
    3056:	01 96       	adiw	r24, 0x01	; 1
    3058:	6f 89       	ldd	r22, Y+23	; 0x17
    305a:	78 8d       	ldd	r23, Y+24	; 0x18
    305c:	a9 01       	movw	r20, r18
    305e:	0e 94 3b 18 	call	0x3076	; 0x3076 <vfprintf>
    3062:	2f 81       	ldd	r18, Y+7	; 0x07
    3064:	38 85       	ldd	r19, Y+8	; 0x08
    3066:	02 0f       	add	r16, r18
    3068:	13 1f       	adc	r17, r19
    306a:	f8 01       	movw	r30, r16
    306c:	10 82       	st	Z, r1
    306e:	2e 96       	adiw	r28, 0x0e	; 14
    3070:	e4 e0       	ldi	r30, 0x04	; 4
    3072:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__epilogue_restores__+0x1c>

00003076 <vfprintf>:
    3076:	ab e0       	ldi	r26, 0x0B	; 11
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	e1 e4       	ldi	r30, 0x41	; 65
    307c:	f8 e1       	ldi	r31, 0x18	; 24
    307e:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__prologue_saves__>
    3082:	3c 01       	movw	r6, r24
    3084:	2b 01       	movw	r4, r22
    3086:	5a 01       	movw	r10, r20
    3088:	fc 01       	movw	r30, r24
    308a:	17 82       	std	Z+7, r1	; 0x07
    308c:	16 82       	std	Z+6, r1	; 0x06
    308e:	83 81       	ldd	r24, Z+3	; 0x03
    3090:	81 fd       	sbrc	r24, 1
    3092:	03 c0       	rjmp	.+6      	; 0x309a <vfprintf+0x24>
    3094:	6f ef       	ldi	r22, 0xFF	; 255
    3096:	7f ef       	ldi	r23, 0xFF	; 255
    3098:	c6 c1       	rjmp	.+908    	; 0x3426 <vfprintf+0x3b0>
    309a:	9a e0       	ldi	r25, 0x0A	; 10
    309c:	89 2e       	mov	r8, r25
    309e:	1e 01       	movw	r2, r28
    30a0:	08 94       	sec
    30a2:	21 1c       	adc	r2, r1
    30a4:	31 1c       	adc	r3, r1
    30a6:	f3 01       	movw	r30, r6
    30a8:	23 81       	ldd	r18, Z+3	; 0x03
    30aa:	f2 01       	movw	r30, r4
    30ac:	23 fd       	sbrc	r18, 3
    30ae:	85 91       	lpm	r24, Z+
    30b0:	23 ff       	sbrs	r18, 3
    30b2:	81 91       	ld	r24, Z+
    30b4:	2f 01       	movw	r4, r30
    30b6:	88 23       	and	r24, r24
    30b8:	09 f4       	brne	.+2      	; 0x30bc <vfprintf+0x46>
    30ba:	b2 c1       	rjmp	.+868    	; 0x3420 <vfprintf+0x3aa>
    30bc:	85 32       	cpi	r24, 0x25	; 37
    30be:	39 f4       	brne	.+14     	; 0x30ce <vfprintf+0x58>
    30c0:	23 fd       	sbrc	r18, 3
    30c2:	85 91       	lpm	r24, Z+
    30c4:	23 ff       	sbrs	r18, 3
    30c6:	81 91       	ld	r24, Z+
    30c8:	2f 01       	movw	r4, r30
    30ca:	85 32       	cpi	r24, 0x25	; 37
    30cc:	29 f4       	brne	.+10     	; 0x30d8 <vfprintf+0x62>
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	b3 01       	movw	r22, r6
    30d2:	0e 94 2e 1a 	call	0x345c	; 0x345c <fputc>
    30d6:	e7 cf       	rjmp	.-50     	; 0x30a6 <vfprintf+0x30>
    30d8:	98 2f       	mov	r25, r24
    30da:	ff 24       	eor	r15, r15
    30dc:	ee 24       	eor	r14, r14
    30de:	99 24       	eor	r9, r9
    30e0:	ff e1       	ldi	r31, 0x1F	; 31
    30e2:	ff 15       	cp	r31, r15
    30e4:	d0 f0       	brcs	.+52     	; 0x311a <vfprintf+0xa4>
    30e6:	9b 32       	cpi	r25, 0x2B	; 43
    30e8:	69 f0       	breq	.+26     	; 0x3104 <vfprintf+0x8e>
    30ea:	9c 32       	cpi	r25, 0x2C	; 44
    30ec:	28 f4       	brcc	.+10     	; 0x30f8 <vfprintf+0x82>
    30ee:	90 32       	cpi	r25, 0x20	; 32
    30f0:	59 f0       	breq	.+22     	; 0x3108 <vfprintf+0x92>
    30f2:	93 32       	cpi	r25, 0x23	; 35
    30f4:	91 f4       	brne	.+36     	; 0x311a <vfprintf+0xa4>
    30f6:	0e c0       	rjmp	.+28     	; 0x3114 <vfprintf+0x9e>
    30f8:	9d 32       	cpi	r25, 0x2D	; 45
    30fa:	49 f0       	breq	.+18     	; 0x310e <vfprintf+0x98>
    30fc:	90 33       	cpi	r25, 0x30	; 48
    30fe:	69 f4       	brne	.+26     	; 0x311a <vfprintf+0xa4>
    3100:	41 e0       	ldi	r20, 0x01	; 1
    3102:	24 c0       	rjmp	.+72     	; 0x314c <vfprintf+0xd6>
    3104:	52 e0       	ldi	r21, 0x02	; 2
    3106:	f5 2a       	or	r15, r21
    3108:	84 e0       	ldi	r24, 0x04	; 4
    310a:	f8 2a       	or	r15, r24
    310c:	28 c0       	rjmp	.+80     	; 0x315e <vfprintf+0xe8>
    310e:	98 e0       	ldi	r25, 0x08	; 8
    3110:	f9 2a       	or	r15, r25
    3112:	25 c0       	rjmp	.+74     	; 0x315e <vfprintf+0xe8>
    3114:	e0 e1       	ldi	r30, 0x10	; 16
    3116:	fe 2a       	or	r15, r30
    3118:	22 c0       	rjmp	.+68     	; 0x315e <vfprintf+0xe8>
    311a:	f7 fc       	sbrc	r15, 7
    311c:	29 c0       	rjmp	.+82     	; 0x3170 <vfprintf+0xfa>
    311e:	89 2f       	mov	r24, r25
    3120:	80 53       	subi	r24, 0x30	; 48
    3122:	8a 30       	cpi	r24, 0x0A	; 10
    3124:	70 f4       	brcc	.+28     	; 0x3142 <vfprintf+0xcc>
    3126:	f6 fe       	sbrs	r15, 6
    3128:	05 c0       	rjmp	.+10     	; 0x3134 <vfprintf+0xbe>
    312a:	98 9c       	mul	r9, r8
    312c:	90 2c       	mov	r9, r0
    312e:	11 24       	eor	r1, r1
    3130:	98 0e       	add	r9, r24
    3132:	15 c0       	rjmp	.+42     	; 0x315e <vfprintf+0xe8>
    3134:	e8 9c       	mul	r14, r8
    3136:	e0 2c       	mov	r14, r0
    3138:	11 24       	eor	r1, r1
    313a:	e8 0e       	add	r14, r24
    313c:	f0 e2       	ldi	r31, 0x20	; 32
    313e:	ff 2a       	or	r15, r31
    3140:	0e c0       	rjmp	.+28     	; 0x315e <vfprintf+0xe8>
    3142:	9e 32       	cpi	r25, 0x2E	; 46
    3144:	29 f4       	brne	.+10     	; 0x3150 <vfprintf+0xda>
    3146:	f6 fc       	sbrc	r15, 6
    3148:	6b c1       	rjmp	.+726    	; 0x3420 <vfprintf+0x3aa>
    314a:	40 e4       	ldi	r20, 0x40	; 64
    314c:	f4 2a       	or	r15, r20
    314e:	07 c0       	rjmp	.+14     	; 0x315e <vfprintf+0xe8>
    3150:	9c 36       	cpi	r25, 0x6C	; 108
    3152:	19 f4       	brne	.+6      	; 0x315a <vfprintf+0xe4>
    3154:	50 e8       	ldi	r21, 0x80	; 128
    3156:	f5 2a       	or	r15, r21
    3158:	02 c0       	rjmp	.+4      	; 0x315e <vfprintf+0xe8>
    315a:	98 36       	cpi	r25, 0x68	; 104
    315c:	49 f4       	brne	.+18     	; 0x3170 <vfprintf+0xfa>
    315e:	f2 01       	movw	r30, r4
    3160:	23 fd       	sbrc	r18, 3
    3162:	95 91       	lpm	r25, Z+
    3164:	23 ff       	sbrs	r18, 3
    3166:	91 91       	ld	r25, Z+
    3168:	2f 01       	movw	r4, r30
    316a:	99 23       	and	r25, r25
    316c:	09 f0       	breq	.+2      	; 0x3170 <vfprintf+0xfa>
    316e:	b8 cf       	rjmp	.-144    	; 0x30e0 <vfprintf+0x6a>
    3170:	89 2f       	mov	r24, r25
    3172:	85 54       	subi	r24, 0x45	; 69
    3174:	83 30       	cpi	r24, 0x03	; 3
    3176:	18 f0       	brcs	.+6      	; 0x317e <vfprintf+0x108>
    3178:	80 52       	subi	r24, 0x20	; 32
    317a:	83 30       	cpi	r24, 0x03	; 3
    317c:	38 f4       	brcc	.+14     	; 0x318c <vfprintf+0x116>
    317e:	44 e0       	ldi	r20, 0x04	; 4
    3180:	50 e0       	ldi	r21, 0x00	; 0
    3182:	a4 0e       	add	r10, r20
    3184:	b5 1e       	adc	r11, r21
    3186:	5f e3       	ldi	r21, 0x3F	; 63
    3188:	59 83       	std	Y+1, r21	; 0x01
    318a:	0f c0       	rjmp	.+30     	; 0x31aa <vfprintf+0x134>
    318c:	93 36       	cpi	r25, 0x63	; 99
    318e:	31 f0       	breq	.+12     	; 0x319c <vfprintf+0x126>
    3190:	93 37       	cpi	r25, 0x73	; 115
    3192:	79 f0       	breq	.+30     	; 0x31b2 <vfprintf+0x13c>
    3194:	93 35       	cpi	r25, 0x53	; 83
    3196:	09 f0       	breq	.+2      	; 0x319a <vfprintf+0x124>
    3198:	56 c0       	rjmp	.+172    	; 0x3246 <vfprintf+0x1d0>
    319a:	20 c0       	rjmp	.+64     	; 0x31dc <vfprintf+0x166>
    319c:	f5 01       	movw	r30, r10
    319e:	80 81       	ld	r24, Z
    31a0:	89 83       	std	Y+1, r24	; 0x01
    31a2:	42 e0       	ldi	r20, 0x02	; 2
    31a4:	50 e0       	ldi	r21, 0x00	; 0
    31a6:	a4 0e       	add	r10, r20
    31a8:	b5 1e       	adc	r11, r21
    31aa:	61 01       	movw	r12, r2
    31ac:	01 e0       	ldi	r16, 0x01	; 1
    31ae:	10 e0       	ldi	r17, 0x00	; 0
    31b0:	12 c0       	rjmp	.+36     	; 0x31d6 <vfprintf+0x160>
    31b2:	f5 01       	movw	r30, r10
    31b4:	c0 80       	ld	r12, Z
    31b6:	d1 80       	ldd	r13, Z+1	; 0x01
    31b8:	f6 fc       	sbrc	r15, 6
    31ba:	03 c0       	rjmp	.+6      	; 0x31c2 <vfprintf+0x14c>
    31bc:	6f ef       	ldi	r22, 0xFF	; 255
    31be:	7f ef       	ldi	r23, 0xFF	; 255
    31c0:	02 c0       	rjmp	.+4      	; 0x31c6 <vfprintf+0x150>
    31c2:	69 2d       	mov	r22, r9
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	42 e0       	ldi	r20, 0x02	; 2
    31c8:	50 e0       	ldi	r21, 0x00	; 0
    31ca:	a4 0e       	add	r10, r20
    31cc:	b5 1e       	adc	r11, r21
    31ce:	c6 01       	movw	r24, r12
    31d0:	0e 94 23 1a 	call	0x3446	; 0x3446 <strnlen>
    31d4:	8c 01       	movw	r16, r24
    31d6:	5f e7       	ldi	r21, 0x7F	; 127
    31d8:	f5 22       	and	r15, r21
    31da:	14 c0       	rjmp	.+40     	; 0x3204 <vfprintf+0x18e>
    31dc:	f5 01       	movw	r30, r10
    31de:	c0 80       	ld	r12, Z
    31e0:	d1 80       	ldd	r13, Z+1	; 0x01
    31e2:	f6 fc       	sbrc	r15, 6
    31e4:	03 c0       	rjmp	.+6      	; 0x31ec <vfprintf+0x176>
    31e6:	6f ef       	ldi	r22, 0xFF	; 255
    31e8:	7f ef       	ldi	r23, 0xFF	; 255
    31ea:	02 c0       	rjmp	.+4      	; 0x31f0 <vfprintf+0x17a>
    31ec:	69 2d       	mov	r22, r9
    31ee:	70 e0       	ldi	r23, 0x00	; 0
    31f0:	42 e0       	ldi	r20, 0x02	; 2
    31f2:	50 e0       	ldi	r21, 0x00	; 0
    31f4:	a4 0e       	add	r10, r20
    31f6:	b5 1e       	adc	r11, r21
    31f8:	c6 01       	movw	r24, r12
    31fa:	0e 94 18 1a 	call	0x3430	; 0x3430 <strnlen_P>
    31fe:	8c 01       	movw	r16, r24
    3200:	50 e8       	ldi	r21, 0x80	; 128
    3202:	f5 2a       	or	r15, r21
    3204:	f3 fe       	sbrs	r15, 3
    3206:	07 c0       	rjmp	.+14     	; 0x3216 <vfprintf+0x1a0>
    3208:	1a c0       	rjmp	.+52     	; 0x323e <vfprintf+0x1c8>
    320a:	80 e2       	ldi	r24, 0x20	; 32
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	b3 01       	movw	r22, r6
    3210:	0e 94 2e 1a 	call	0x345c	; 0x345c <fputc>
    3214:	ea 94       	dec	r14
    3216:	8e 2d       	mov	r24, r14
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	08 17       	cp	r16, r24
    321c:	19 07       	cpc	r17, r25
    321e:	a8 f3       	brcs	.-22     	; 0x320a <vfprintf+0x194>
    3220:	0e c0       	rjmp	.+28     	; 0x323e <vfprintf+0x1c8>
    3222:	f6 01       	movw	r30, r12
    3224:	f7 fc       	sbrc	r15, 7
    3226:	85 91       	lpm	r24, Z+
    3228:	f7 fe       	sbrs	r15, 7
    322a:	81 91       	ld	r24, Z+
    322c:	6f 01       	movw	r12, r30
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	b3 01       	movw	r22, r6
    3232:	0e 94 2e 1a 	call	0x345c	; 0x345c <fputc>
    3236:	e1 10       	cpse	r14, r1
    3238:	ea 94       	dec	r14
    323a:	01 50       	subi	r16, 0x01	; 1
    323c:	10 40       	sbci	r17, 0x00	; 0
    323e:	01 15       	cp	r16, r1
    3240:	11 05       	cpc	r17, r1
    3242:	79 f7       	brne	.-34     	; 0x3222 <vfprintf+0x1ac>
    3244:	ea c0       	rjmp	.+468    	; 0x341a <vfprintf+0x3a4>
    3246:	94 36       	cpi	r25, 0x64	; 100
    3248:	11 f0       	breq	.+4      	; 0x324e <vfprintf+0x1d8>
    324a:	99 36       	cpi	r25, 0x69	; 105
    324c:	69 f5       	brne	.+90     	; 0x32a8 <vfprintf+0x232>
    324e:	f7 fe       	sbrs	r15, 7
    3250:	08 c0       	rjmp	.+16     	; 0x3262 <vfprintf+0x1ec>
    3252:	f5 01       	movw	r30, r10
    3254:	20 81       	ld	r18, Z
    3256:	31 81       	ldd	r19, Z+1	; 0x01
    3258:	42 81       	ldd	r20, Z+2	; 0x02
    325a:	53 81       	ldd	r21, Z+3	; 0x03
    325c:	84 e0       	ldi	r24, 0x04	; 4
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0a c0       	rjmp	.+20     	; 0x3276 <vfprintf+0x200>
    3262:	f5 01       	movw	r30, r10
    3264:	80 81       	ld	r24, Z
    3266:	91 81       	ldd	r25, Z+1	; 0x01
    3268:	9c 01       	movw	r18, r24
    326a:	44 27       	eor	r20, r20
    326c:	37 fd       	sbrc	r19, 7
    326e:	40 95       	com	r20
    3270:	54 2f       	mov	r21, r20
    3272:	82 e0       	ldi	r24, 0x02	; 2
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	a8 0e       	add	r10, r24
    3278:	b9 1e       	adc	r11, r25
    327a:	9f e6       	ldi	r25, 0x6F	; 111
    327c:	f9 22       	and	r15, r25
    327e:	57 ff       	sbrs	r21, 7
    3280:	09 c0       	rjmp	.+18     	; 0x3294 <vfprintf+0x21e>
    3282:	50 95       	com	r21
    3284:	40 95       	com	r20
    3286:	30 95       	com	r19
    3288:	21 95       	neg	r18
    328a:	3f 4f       	sbci	r19, 0xFF	; 255
    328c:	4f 4f       	sbci	r20, 0xFF	; 255
    328e:	5f 4f       	sbci	r21, 0xFF	; 255
    3290:	e0 e8       	ldi	r30, 0x80	; 128
    3292:	fe 2a       	or	r15, r30
    3294:	ca 01       	movw	r24, r20
    3296:	b9 01       	movw	r22, r18
    3298:	a1 01       	movw	r20, r2
    329a:	2a e0       	ldi	r18, 0x0A	; 10
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <__ultoa_invert>
    32a2:	d8 2e       	mov	r13, r24
    32a4:	d2 18       	sub	r13, r2
    32a6:	40 c0       	rjmp	.+128    	; 0x3328 <vfprintf+0x2b2>
    32a8:	95 37       	cpi	r25, 0x75	; 117
    32aa:	29 f4       	brne	.+10     	; 0x32b6 <vfprintf+0x240>
    32ac:	1f 2d       	mov	r17, r15
    32ae:	1f 7e       	andi	r17, 0xEF	; 239
    32b0:	2a e0       	ldi	r18, 0x0A	; 10
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	1d c0       	rjmp	.+58     	; 0x32f0 <vfprintf+0x27a>
    32b6:	1f 2d       	mov	r17, r15
    32b8:	19 7f       	andi	r17, 0xF9	; 249
    32ba:	9f 36       	cpi	r25, 0x6F	; 111
    32bc:	61 f0       	breq	.+24     	; 0x32d6 <vfprintf+0x260>
    32be:	90 37       	cpi	r25, 0x70	; 112
    32c0:	20 f4       	brcc	.+8      	; 0x32ca <vfprintf+0x254>
    32c2:	98 35       	cpi	r25, 0x58	; 88
    32c4:	09 f0       	breq	.+2      	; 0x32c8 <vfprintf+0x252>
    32c6:	ac c0       	rjmp	.+344    	; 0x3420 <vfprintf+0x3aa>
    32c8:	0f c0       	rjmp	.+30     	; 0x32e8 <vfprintf+0x272>
    32ca:	90 37       	cpi	r25, 0x70	; 112
    32cc:	39 f0       	breq	.+14     	; 0x32dc <vfprintf+0x266>
    32ce:	98 37       	cpi	r25, 0x78	; 120
    32d0:	09 f0       	breq	.+2      	; 0x32d4 <vfprintf+0x25e>
    32d2:	a6 c0       	rjmp	.+332    	; 0x3420 <vfprintf+0x3aa>
    32d4:	04 c0       	rjmp	.+8      	; 0x32de <vfprintf+0x268>
    32d6:	28 e0       	ldi	r18, 0x08	; 8
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	0a c0       	rjmp	.+20     	; 0x32f0 <vfprintf+0x27a>
    32dc:	10 61       	ori	r17, 0x10	; 16
    32de:	14 fd       	sbrc	r17, 4
    32e0:	14 60       	ori	r17, 0x04	; 4
    32e2:	20 e1       	ldi	r18, 0x10	; 16
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	04 c0       	rjmp	.+8      	; 0x32f0 <vfprintf+0x27a>
    32e8:	14 fd       	sbrc	r17, 4
    32ea:	16 60       	ori	r17, 0x06	; 6
    32ec:	20 e1       	ldi	r18, 0x10	; 16
    32ee:	32 e0       	ldi	r19, 0x02	; 2
    32f0:	17 ff       	sbrs	r17, 7
    32f2:	08 c0       	rjmp	.+16     	; 0x3304 <vfprintf+0x28e>
    32f4:	f5 01       	movw	r30, r10
    32f6:	60 81       	ld	r22, Z
    32f8:	71 81       	ldd	r23, Z+1	; 0x01
    32fa:	82 81       	ldd	r24, Z+2	; 0x02
    32fc:	93 81       	ldd	r25, Z+3	; 0x03
    32fe:	44 e0       	ldi	r20, 0x04	; 4
    3300:	50 e0       	ldi	r21, 0x00	; 0
    3302:	08 c0       	rjmp	.+16     	; 0x3314 <vfprintf+0x29e>
    3304:	f5 01       	movw	r30, r10
    3306:	80 81       	ld	r24, Z
    3308:	91 81       	ldd	r25, Z+1	; 0x01
    330a:	bc 01       	movw	r22, r24
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	42 e0       	ldi	r20, 0x02	; 2
    3312:	50 e0       	ldi	r21, 0x00	; 0
    3314:	a4 0e       	add	r10, r20
    3316:	b5 1e       	adc	r11, r21
    3318:	a1 01       	movw	r20, r2
    331a:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <__ultoa_invert>
    331e:	d8 2e       	mov	r13, r24
    3320:	d2 18       	sub	r13, r2
    3322:	8f e7       	ldi	r24, 0x7F	; 127
    3324:	f8 2e       	mov	r15, r24
    3326:	f1 22       	and	r15, r17
    3328:	f6 fe       	sbrs	r15, 6
    332a:	0b c0       	rjmp	.+22     	; 0x3342 <vfprintf+0x2cc>
    332c:	5e ef       	ldi	r21, 0xFE	; 254
    332e:	f5 22       	and	r15, r21
    3330:	d9 14       	cp	r13, r9
    3332:	38 f4       	brcc	.+14     	; 0x3342 <vfprintf+0x2cc>
    3334:	f4 fe       	sbrs	r15, 4
    3336:	07 c0       	rjmp	.+14     	; 0x3346 <vfprintf+0x2d0>
    3338:	f2 fc       	sbrc	r15, 2
    333a:	05 c0       	rjmp	.+10     	; 0x3346 <vfprintf+0x2d0>
    333c:	8f ee       	ldi	r24, 0xEF	; 239
    333e:	f8 22       	and	r15, r24
    3340:	02 c0       	rjmp	.+4      	; 0x3346 <vfprintf+0x2d0>
    3342:	1d 2d       	mov	r17, r13
    3344:	01 c0       	rjmp	.+2      	; 0x3348 <vfprintf+0x2d2>
    3346:	19 2d       	mov	r17, r9
    3348:	f4 fe       	sbrs	r15, 4
    334a:	0d c0       	rjmp	.+26     	; 0x3366 <vfprintf+0x2f0>
    334c:	fe 01       	movw	r30, r28
    334e:	ed 0d       	add	r30, r13
    3350:	f1 1d       	adc	r31, r1
    3352:	80 81       	ld	r24, Z
    3354:	80 33       	cpi	r24, 0x30	; 48
    3356:	19 f4       	brne	.+6      	; 0x335e <vfprintf+0x2e8>
    3358:	99 ee       	ldi	r25, 0xE9	; 233
    335a:	f9 22       	and	r15, r25
    335c:	08 c0       	rjmp	.+16     	; 0x336e <vfprintf+0x2f8>
    335e:	1f 5f       	subi	r17, 0xFF	; 255
    3360:	f2 fe       	sbrs	r15, 2
    3362:	05 c0       	rjmp	.+10     	; 0x336e <vfprintf+0x2f8>
    3364:	03 c0       	rjmp	.+6      	; 0x336c <vfprintf+0x2f6>
    3366:	8f 2d       	mov	r24, r15
    3368:	86 78       	andi	r24, 0x86	; 134
    336a:	09 f0       	breq	.+2      	; 0x336e <vfprintf+0x2f8>
    336c:	1f 5f       	subi	r17, 0xFF	; 255
    336e:	0f 2d       	mov	r16, r15
    3370:	f3 fc       	sbrc	r15, 3
    3372:	14 c0       	rjmp	.+40     	; 0x339c <vfprintf+0x326>
    3374:	f0 fe       	sbrs	r15, 0
    3376:	0f c0       	rjmp	.+30     	; 0x3396 <vfprintf+0x320>
    3378:	1e 15       	cp	r17, r14
    337a:	10 f0       	brcs	.+4      	; 0x3380 <vfprintf+0x30a>
    337c:	9d 2c       	mov	r9, r13
    337e:	0b c0       	rjmp	.+22     	; 0x3396 <vfprintf+0x320>
    3380:	9d 2c       	mov	r9, r13
    3382:	9e 0c       	add	r9, r14
    3384:	91 1a       	sub	r9, r17
    3386:	1e 2d       	mov	r17, r14
    3388:	06 c0       	rjmp	.+12     	; 0x3396 <vfprintf+0x320>
    338a:	80 e2       	ldi	r24, 0x20	; 32
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	b3 01       	movw	r22, r6
    3390:	0e 94 2e 1a 	call	0x345c	; 0x345c <fputc>
    3394:	1f 5f       	subi	r17, 0xFF	; 255
    3396:	1e 15       	cp	r17, r14
    3398:	c0 f3       	brcs	.-16     	; 0x338a <vfprintf+0x314>
    339a:	04 c0       	rjmp	.+8      	; 0x33a4 <vfprintf+0x32e>
    339c:	1e 15       	cp	r17, r14
    339e:	10 f4       	brcc	.+4      	; 0x33a4 <vfprintf+0x32e>
    33a0:	e1 1a       	sub	r14, r17
    33a2:	01 c0       	rjmp	.+2      	; 0x33a6 <vfprintf+0x330>
    33a4:	ee 24       	eor	r14, r14
    33a6:	04 ff       	sbrs	r16, 4
    33a8:	0f c0       	rjmp	.+30     	; 0x33c8 <vfprintf+0x352>
    33aa:	80 e3       	ldi	r24, 0x30	; 48
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	b3 01       	movw	r22, r6
    33b0:	0e 94 2e 1a 	call	0x345c	; 0x345c <fputc>
    33b4:	02 ff       	sbrs	r16, 2
    33b6:	1d c0       	rjmp	.+58     	; 0x33f2 <vfprintf+0x37c>
    33b8:	01 fd       	sbrc	r16, 1
    33ba:	03 c0       	rjmp	.+6      	; 0x33c2 <vfprintf+0x34c>
    33bc:	88 e7       	ldi	r24, 0x78	; 120
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	0e c0       	rjmp	.+28     	; 0x33de <vfprintf+0x368>
    33c2:	88 e5       	ldi	r24, 0x58	; 88
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	0b c0       	rjmp	.+22     	; 0x33de <vfprintf+0x368>
    33c8:	80 2f       	mov	r24, r16
    33ca:	86 78       	andi	r24, 0x86	; 134
    33cc:	91 f0       	breq	.+36     	; 0x33f2 <vfprintf+0x37c>
    33ce:	01 ff       	sbrs	r16, 1
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <vfprintf+0x360>
    33d2:	8b e2       	ldi	r24, 0x2B	; 43
    33d4:	01 c0       	rjmp	.+2      	; 0x33d8 <vfprintf+0x362>
    33d6:	80 e2       	ldi	r24, 0x20	; 32
    33d8:	f7 fc       	sbrc	r15, 7
    33da:	8d e2       	ldi	r24, 0x2D	; 45
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	b3 01       	movw	r22, r6
    33e0:	0e 94 2e 1a 	call	0x345c	; 0x345c <fputc>
    33e4:	06 c0       	rjmp	.+12     	; 0x33f2 <vfprintf+0x37c>
    33e6:	80 e3       	ldi	r24, 0x30	; 48
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	b3 01       	movw	r22, r6
    33ec:	0e 94 2e 1a 	call	0x345c	; 0x345c <fputc>
    33f0:	9a 94       	dec	r9
    33f2:	d9 14       	cp	r13, r9
    33f4:	c0 f3       	brcs	.-16     	; 0x33e6 <vfprintf+0x370>
    33f6:	da 94       	dec	r13
    33f8:	f1 01       	movw	r30, r2
    33fa:	ed 0d       	add	r30, r13
    33fc:	f1 1d       	adc	r31, r1
    33fe:	80 81       	ld	r24, Z
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	b3 01       	movw	r22, r6
    3404:	0e 94 2e 1a 	call	0x345c	; 0x345c <fputc>
    3408:	dd 20       	and	r13, r13
    340a:	a9 f7       	brne	.-22     	; 0x33f6 <vfprintf+0x380>
    340c:	06 c0       	rjmp	.+12     	; 0x341a <vfprintf+0x3a4>
    340e:	80 e2       	ldi	r24, 0x20	; 32
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	b3 01       	movw	r22, r6
    3414:	0e 94 2e 1a 	call	0x345c	; 0x345c <fputc>
    3418:	ea 94       	dec	r14
    341a:	ee 20       	and	r14, r14
    341c:	c1 f7       	brne	.-16     	; 0x340e <vfprintf+0x398>
    341e:	43 ce       	rjmp	.-890    	; 0x30a6 <vfprintf+0x30>
    3420:	f3 01       	movw	r30, r6
    3422:	66 81       	ldd	r22, Z+6	; 0x06
    3424:	77 81       	ldd	r23, Z+7	; 0x07
    3426:	cb 01       	movw	r24, r22
    3428:	2b 96       	adiw	r28, 0x0b	; 11
    342a:	e2 e1       	ldi	r30, 0x12	; 18
    342c:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__epilogue_restores__>

00003430 <strnlen_P>:
    3430:	fc 01       	movw	r30, r24
    3432:	05 90       	lpm	r0, Z+
    3434:	61 50       	subi	r22, 0x01	; 1
    3436:	70 40       	sbci	r23, 0x00	; 0
    3438:	01 10       	cpse	r0, r1
    343a:	d8 f7       	brcc	.-10     	; 0x3432 <strnlen_P+0x2>
    343c:	80 95       	com	r24
    343e:	90 95       	com	r25
    3440:	8e 0f       	add	r24, r30
    3442:	9f 1f       	adc	r25, r31
    3444:	08 95       	ret

00003446 <strnlen>:
    3446:	fc 01       	movw	r30, r24
    3448:	61 50       	subi	r22, 0x01	; 1
    344a:	70 40       	sbci	r23, 0x00	; 0
    344c:	01 90       	ld	r0, Z+
    344e:	01 10       	cpse	r0, r1
    3450:	d8 f7       	brcc	.-10     	; 0x3448 <strnlen+0x2>
    3452:	80 95       	com	r24
    3454:	90 95       	com	r25
    3456:	8e 0f       	add	r24, r30
    3458:	9f 1f       	adc	r25, r31
    345a:	08 95       	ret

0000345c <fputc>:
    345c:	0f 93       	push	r16
    345e:	1f 93       	push	r17
    3460:	cf 93       	push	r28
    3462:	df 93       	push	r29
    3464:	8c 01       	movw	r16, r24
    3466:	eb 01       	movw	r28, r22
    3468:	8b 81       	ldd	r24, Y+3	; 0x03
    346a:	81 ff       	sbrs	r24, 1
    346c:	1b c0       	rjmp	.+54     	; 0x34a4 <fputc+0x48>
    346e:	82 ff       	sbrs	r24, 2
    3470:	0d c0       	rjmp	.+26     	; 0x348c <fputc+0x30>
    3472:	2e 81       	ldd	r18, Y+6	; 0x06
    3474:	3f 81       	ldd	r19, Y+7	; 0x07
    3476:	8c 81       	ldd	r24, Y+4	; 0x04
    3478:	9d 81       	ldd	r25, Y+5	; 0x05
    347a:	28 17       	cp	r18, r24
    347c:	39 07       	cpc	r19, r25
    347e:	64 f4       	brge	.+24     	; 0x3498 <fputc+0x3c>
    3480:	e8 81       	ld	r30, Y
    3482:	f9 81       	ldd	r31, Y+1	; 0x01
    3484:	01 93       	st	Z+, r16
    3486:	f9 83       	std	Y+1, r31	; 0x01
    3488:	e8 83       	st	Y, r30
    348a:	06 c0       	rjmp	.+12     	; 0x3498 <fputc+0x3c>
    348c:	e8 85       	ldd	r30, Y+8	; 0x08
    348e:	f9 85       	ldd	r31, Y+9	; 0x09
    3490:	80 2f       	mov	r24, r16
    3492:	09 95       	icall
    3494:	89 2b       	or	r24, r25
    3496:	31 f4       	brne	.+12     	; 0x34a4 <fputc+0x48>
    3498:	8e 81       	ldd	r24, Y+6	; 0x06
    349a:	9f 81       	ldd	r25, Y+7	; 0x07
    349c:	01 96       	adiw	r24, 0x01	; 1
    349e:	9f 83       	std	Y+7, r25	; 0x07
    34a0:	8e 83       	std	Y+6, r24	; 0x06
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <fputc+0x4c>
    34a4:	0f ef       	ldi	r16, 0xFF	; 255
    34a6:	1f ef       	ldi	r17, 0xFF	; 255
    34a8:	c8 01       	movw	r24, r16
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	1f 91       	pop	r17
    34b0:	0f 91       	pop	r16
    34b2:	08 95       	ret

000034b4 <__ultoa_invert>:
    34b4:	fa 01       	movw	r30, r20
    34b6:	aa 27       	eor	r26, r26
    34b8:	28 30       	cpi	r18, 0x08	; 8
    34ba:	51 f1       	breq	.+84     	; 0x3510 <__ultoa_invert+0x5c>
    34bc:	20 31       	cpi	r18, 0x10	; 16
    34be:	81 f1       	breq	.+96     	; 0x3520 <__ultoa_invert+0x6c>
    34c0:	e8 94       	clt
    34c2:	6f 93       	push	r22
    34c4:	6e 7f       	andi	r22, 0xFE	; 254
    34c6:	6e 5f       	subi	r22, 0xFE	; 254
    34c8:	7f 4f       	sbci	r23, 0xFF	; 255
    34ca:	8f 4f       	sbci	r24, 0xFF	; 255
    34cc:	9f 4f       	sbci	r25, 0xFF	; 255
    34ce:	af 4f       	sbci	r26, 0xFF	; 255
    34d0:	b1 e0       	ldi	r27, 0x01	; 1
    34d2:	3e d0       	rcall	.+124    	; 0x3550 <__ultoa_invert+0x9c>
    34d4:	b4 e0       	ldi	r27, 0x04	; 4
    34d6:	3c d0       	rcall	.+120    	; 0x3550 <__ultoa_invert+0x9c>
    34d8:	67 0f       	add	r22, r23
    34da:	78 1f       	adc	r23, r24
    34dc:	89 1f       	adc	r24, r25
    34de:	9a 1f       	adc	r25, r26
    34e0:	a1 1d       	adc	r26, r1
    34e2:	68 0f       	add	r22, r24
    34e4:	79 1f       	adc	r23, r25
    34e6:	8a 1f       	adc	r24, r26
    34e8:	91 1d       	adc	r25, r1
    34ea:	a1 1d       	adc	r26, r1
    34ec:	6a 0f       	add	r22, r26
    34ee:	71 1d       	adc	r23, r1
    34f0:	81 1d       	adc	r24, r1
    34f2:	91 1d       	adc	r25, r1
    34f4:	a1 1d       	adc	r26, r1
    34f6:	20 d0       	rcall	.+64     	; 0x3538 <__ultoa_invert+0x84>
    34f8:	09 f4       	brne	.+2      	; 0x34fc <__ultoa_invert+0x48>
    34fa:	68 94       	set
    34fc:	3f 91       	pop	r19
    34fe:	2a e0       	ldi	r18, 0x0A	; 10
    3500:	26 9f       	mul	r18, r22
    3502:	11 24       	eor	r1, r1
    3504:	30 19       	sub	r19, r0
    3506:	30 5d       	subi	r19, 0xD0	; 208
    3508:	31 93       	st	Z+, r19
    350a:	de f6       	brtc	.-74     	; 0x34c2 <__ultoa_invert+0xe>
    350c:	cf 01       	movw	r24, r30
    350e:	08 95       	ret
    3510:	46 2f       	mov	r20, r22
    3512:	47 70       	andi	r20, 0x07	; 7
    3514:	40 5d       	subi	r20, 0xD0	; 208
    3516:	41 93       	st	Z+, r20
    3518:	b3 e0       	ldi	r27, 0x03	; 3
    351a:	0f d0       	rcall	.+30     	; 0x353a <__ultoa_invert+0x86>
    351c:	c9 f7       	brne	.-14     	; 0x3510 <__ultoa_invert+0x5c>
    351e:	f6 cf       	rjmp	.-20     	; 0x350c <__ultoa_invert+0x58>
    3520:	46 2f       	mov	r20, r22
    3522:	4f 70       	andi	r20, 0x0F	; 15
    3524:	40 5d       	subi	r20, 0xD0	; 208
    3526:	4a 33       	cpi	r20, 0x3A	; 58
    3528:	18 f0       	brcs	.+6      	; 0x3530 <__ultoa_invert+0x7c>
    352a:	49 5d       	subi	r20, 0xD9	; 217
    352c:	31 fd       	sbrc	r19, 1
    352e:	40 52       	subi	r20, 0x20	; 32
    3530:	41 93       	st	Z+, r20
    3532:	02 d0       	rcall	.+4      	; 0x3538 <__ultoa_invert+0x84>
    3534:	a9 f7       	brne	.-22     	; 0x3520 <__ultoa_invert+0x6c>
    3536:	ea cf       	rjmp	.-44     	; 0x350c <__ultoa_invert+0x58>
    3538:	b4 e0       	ldi	r27, 0x04	; 4
    353a:	a6 95       	lsr	r26
    353c:	97 95       	ror	r25
    353e:	87 95       	ror	r24
    3540:	77 95       	ror	r23
    3542:	67 95       	ror	r22
    3544:	ba 95       	dec	r27
    3546:	c9 f7       	brne	.-14     	; 0x353a <__ultoa_invert+0x86>
    3548:	00 97       	sbiw	r24, 0x00	; 0
    354a:	61 05       	cpc	r22, r1
    354c:	71 05       	cpc	r23, r1
    354e:	08 95       	ret
    3550:	9b 01       	movw	r18, r22
    3552:	ac 01       	movw	r20, r24
    3554:	0a 2e       	mov	r0, r26
    3556:	06 94       	lsr	r0
    3558:	57 95       	ror	r21
    355a:	47 95       	ror	r20
    355c:	37 95       	ror	r19
    355e:	27 95       	ror	r18
    3560:	ba 95       	dec	r27
    3562:	c9 f7       	brne	.-14     	; 0x3556 <__ultoa_invert+0xa2>
    3564:	62 0f       	add	r22, r18
    3566:	73 1f       	adc	r23, r19
    3568:	84 1f       	adc	r24, r20
    356a:	95 1f       	adc	r25, r21
    356c:	a0 1d       	adc	r26, r0
    356e:	08 95       	ret

00003570 <_exit>:
    3570:	f8 94       	cli

00003572 <__stop_program>:
    3572:	ff cf       	rjmp	.-2      	; 0x3572 <__stop_program>
