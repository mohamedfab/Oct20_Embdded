
Oct20_Amit_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  000038fc  00003970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003fe4  00000000  00000000  00003a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001f8e  00000000  00000000  00007a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000099fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00009b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00009d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000c19b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000d521  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000e6f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000ebae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000f51c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 07 	call	0xe1e	; 0xe1e <main>
      7a:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a3 e6       	ldi	r26, 0x63	; 99
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	63 e6       	ldi	r22, 0x63	; 99
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 c8 19 	jmp	0x3390	; 0x3390 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 b4 19 	jmp	0x3368	; 0x3368 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 d0 19 	jmp	0x33a0	; 0x33a0 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 c8 19 	jmp	0x3390	; 0x3390 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e5 59       	subi	r30, 0x95	; 149
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <main>:
#include "Uart.h"


/*	Slave Code*/
int main()
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	0f 92       	push	r0
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	u8 loc_spiReceive = 0;
     e28:	19 82       	std	Y+1, r1	; 0x01
	Spi_vidSlaveInit();
     e2a:	0e 94 05 14 	call	0x280a	; 0x280a <Spi_vidSlaveInit>
	Led_vidledInit();
     e2e:	0e 94 43 09 	call	0x1286	; 0x1286 <Led_vidledInit>

	while (1)
	{
		loc_spiReceive = Spi_u8SlaveRead();
     e32:	0e 94 73 14 	call	0x28e6	; 0x28e6 <Spi_u8SlaveRead>
     e36:	89 83       	std	Y+1, r24	; 0x01

		if (loc_spiReceive == 'a')
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	81 36       	cpi	r24, 0x61	; 97
     e3c:	d1 f7       	brne	.-12     	; 0xe32 <main+0x14>
		{
			Led_vidledToggle(LED0);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	0e 94 bb 09 	call	0x1376	; 0x1376 <Led_vidledToggle>
     e44:	f6 cf       	rjmp	.-20     	; 0xe32 <main+0x14>

00000e46 <SSD_vidinit>:
#include "SSD.h"
#include "Dio.h"
#include <util/delay.h>

void SSD_vidinit(void)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	41 e0       	ldi	r20, 0x01	; 1
     e54:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	62 e0       	ldi	r22, 0x02	; 2
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>

	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	64 e0       	ldi	r22, 0x04	; 4
     e66:	41 e0       	ldi	r20, 0x01	; 1
     e68:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	65 e0       	ldi	r22, 0x05	; 5
     e70:	41 e0       	ldi	r20, 0x01	; 1
     e72:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	66 e0       	ldi	r22, 0x06	; 6
     e7a:	41 e0       	ldi	r20, 0x01	; 1
     e7c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	67 e0       	ldi	r22, 0x07	; 7
     e84:	41 e0       	ldi	r20, 0x01	; 1
     e86:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <SSD_viddisplyNum>:

void SSD_viddisplyNum(u8 num)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	e3 97       	sbiw	r28, 0x33	; 51
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	8b ab       	std	Y+51, r24	; 0x33
	u8 loc_secondDigit =  (num%10)<<4;
     ea6:	8b a9       	ldd	r24, Y+51	; 0x33
     ea8:	9a e0       	ldi	r25, 0x0A	; 10
     eaa:	69 2f       	mov	r22, r25
     eac:	0e 94 76 19 	call	0x32ec	; 0x32ec <__udivmodqi4>
     eb0:	89 2f       	mov	r24, r25
     eb2:	82 95       	swap	r24
     eb4:	80 7f       	andi	r24, 0xF0	; 240
     eb6:	8a ab       	std	Y+50, r24	; 0x32
	u8 loc_firstDigit = (num/10)<<4;
     eb8:	8b a9       	ldd	r24, Y+51	; 0x33
     eba:	9a e0       	ldi	r25, 0x0A	; 10
     ebc:	69 2f       	mov	r22, r25
     ebe:	0e 94 76 19 	call	0x32ec	; 0x32ec <__udivmodqi4>
     ec2:	82 95       	swap	r24
     ec4:	80 7f       	andi	r24, 0xF0	; 240
     ec6:	89 ab       	std	Y+49, r24	; 0x31

	/* Enable SSD 1	-> EN1 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_HIGH);
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	62 e0       	ldi	r22, 0x02	; 2
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
	/* Disable SSD 2 -> EN2 =Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
	/* Write first digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_firstDigit, SSD_MASK);
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	69 a9       	ldd	r22, Y+49	; 0x31
     ee0:	4f e0       	ldi	r20, 0x0F	; 15
     ee2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <Dio_vidWriteChanelGroup>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a8 ec       	ldi	r26, 0xC8	; 200
     eec:	b2 e4       	ldi	r27, 0x42	; 66
     eee:	8d a7       	std	Y+45, r24	; 0x2d
     ef0:	9e a7       	std	Y+46, r25	; 0x2e
     ef2:	af a7       	std	Y+47, r26	; 0x2f
     ef4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     ef6:	6d a5       	ldd	r22, Y+45	; 0x2d
     ef8:	7e a5       	ldd	r23, Y+46	; 0x2e
     efa:	8f a5       	ldd	r24, Y+47	; 0x2f
     efc:	98 a9       	ldd	r25, Y+48	; 0x30
     efe:	2b ea       	ldi	r18, 0xAB	; 171
     f00:	3a ea       	ldi	r19, 0xAA	; 170
     f02:	4a ea       	ldi	r20, 0xAA	; 170
     f04:	50 e4       	ldi	r21, 0x40	; 64
     f06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	89 a7       	std	Y+41, r24	; 0x29
     f10:	9a a7       	std	Y+42, r25	; 0x2a
     f12:	ab a7       	std	Y+43, r26	; 0x2b
     f14:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     f16:	69 a5       	ldd	r22, Y+41	; 0x29
     f18:	7a a5       	ldd	r23, Y+42	; 0x2a
     f1a:	8b a5       	ldd	r24, Y+43	; 0x2b
     f1c:	9c a5       	ldd	r25, Y+44	; 0x2c
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e8       	ldi	r20, 0x80	; 128
     f24:	5f e3       	ldi	r21, 0x3F	; 63
     f26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f2a:	88 23       	and	r24, r24
     f2c:	1c f4       	brge	.+6      	; 0xf34 <SSD_viddisplyNum+0xa4>
		__ticks = 1;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	88 a7       	std	Y+40, r24	; 0x28
     f32:	91 c0       	rjmp	.+290    	; 0x1056 <SSD_viddisplyNum+0x1c6>
	else if (__tmp > 255)
     f34:	69 a5       	ldd	r22, Y+41	; 0x29
     f36:	7a a5       	ldd	r23, Y+42	; 0x2a
     f38:	8b a5       	ldd	r24, Y+43	; 0x2b
     f3a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	4f e7       	ldi	r20, 0x7F	; 127
     f42:	53 e4       	ldi	r21, 0x43	; 67
     f44:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f48:	18 16       	cp	r1, r24
     f4a:	0c f0       	brlt	.+2      	; 0xf4e <SSD_viddisplyNum+0xbe>
     f4c:	7b c0       	rjmp	.+246    	; 0x1044 <SSD_viddisplyNum+0x1b4>
	{
		_delay_ms(__us / 1000.0);
     f4e:	6d a5       	ldd	r22, Y+45	; 0x2d
     f50:	7e a5       	ldd	r23, Y+46	; 0x2e
     f52:	8f a5       	ldd	r24, Y+47	; 0x2f
     f54:	98 a9       	ldd	r25, Y+48	; 0x30
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	4a e7       	ldi	r20, 0x7A	; 122
     f5c:	54 e4       	ldi	r21, 0x44	; 68
     f5e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	8c a3       	std	Y+36, r24	; 0x24
     f68:	9d a3       	std	Y+37, r25	; 0x25
     f6a:	ae a3       	std	Y+38, r26	; 0x26
     f6c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f6e:	6c a1       	ldd	r22, Y+36	; 0x24
     f70:	7d a1       	ldd	r23, Y+37	; 0x25
     f72:	8e a1       	ldd	r24, Y+38	; 0x26
     f74:	9f a1       	ldd	r25, Y+39	; 0x27
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	4a e7       	ldi	r20, 0x7A	; 122
     f7c:	55 e4       	ldi	r21, 0x45	; 69
     f7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	88 a3       	std	Y+32, r24	; 0x20
     f88:	99 a3       	std	Y+33, r25	; 0x21
     f8a:	aa a3       	std	Y+34, r26	; 0x22
     f8c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f8e:	68 a1       	ldd	r22, Y+32	; 0x20
     f90:	79 a1       	ldd	r23, Y+33	; 0x21
     f92:	8a a1       	ldd	r24, Y+34	; 0x22
     f94:	9b a1       	ldd	r25, Y+35	; 0x23
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e8       	ldi	r20, 0x80	; 128
     f9c:	5f e3       	ldi	r21, 0x3F	; 63
     f9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fa2:	88 23       	and	r24, r24
     fa4:	2c f4       	brge	.+10     	; 0xfb0 <SSD_viddisplyNum+0x120>
		__ticks = 1;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	9f 8f       	std	Y+31, r25	; 0x1f
     fac:	8e 8f       	std	Y+30, r24	; 0x1e
     fae:	3f c0       	rjmp	.+126    	; 0x102e <SSD_viddisplyNum+0x19e>
	else if (__tmp > 65535)
     fb0:	68 a1       	ldd	r22, Y+32	; 0x20
     fb2:	79 a1       	ldd	r23, Y+33	; 0x21
     fb4:	8a a1       	ldd	r24, Y+34	; 0x22
     fb6:	9b a1       	ldd	r25, Y+35	; 0x23
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	3f ef       	ldi	r19, 0xFF	; 255
     fbc:	4f e7       	ldi	r20, 0x7F	; 127
     fbe:	57 e4       	ldi	r21, 0x47	; 71
     fc0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fc4:	18 16       	cp	r1, r24
     fc6:	4c f5       	brge	.+82     	; 0x101a <SSD_viddisplyNum+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc8:	6c a1       	ldd	r22, Y+36	; 0x24
     fca:	7d a1       	ldd	r23, Y+37	; 0x25
     fcc:	8e a1       	ldd	r24, Y+38	; 0x26
     fce:	9f a1       	ldd	r25, Y+39	; 0x27
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e2       	ldi	r20, 0x20	; 32
     fd6:	51 e4       	ldi	r21, 0x41	; 65
     fd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	bc 01       	movw	r22, r24
     fe2:	cd 01       	movw	r24, r26
     fe4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	9f 8f       	std	Y+31, r25	; 0x1f
     fee:	8e 8f       	std	Y+30, r24	; 0x1e
     ff0:	0f c0       	rjmp	.+30     	; 0x1010 <SSD_viddisplyNum+0x180>
     ff2:	80 e9       	ldi	r24, 0x90	; 144
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	9d 8f       	std	Y+29, r25	; 0x1d
     ff8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ffa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ffc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <SSD_viddisplyNum+0x16e>
    1002:	9d 8f       	std	Y+29, r25	; 0x1d
    1004:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1006:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1008:	9f 8d       	ldd	r25, Y+31	; 0x1f
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	9f 8f       	std	Y+31, r25	; 0x1f
    100e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1010:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1012:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	69 f7       	brne	.-38     	; 0xff2 <SSD_viddisplyNum+0x162>
    1018:	24 c0       	rjmp	.+72     	; 0x1062 <SSD_viddisplyNum+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    101a:	68 a1       	ldd	r22, Y+32	; 0x20
    101c:	79 a1       	ldd	r23, Y+33	; 0x21
    101e:	8a a1       	ldd	r24, Y+34	; 0x22
    1020:	9b a1       	ldd	r25, Y+35	; 0x23
    1022:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	9f 8f       	std	Y+31, r25	; 0x1f
    102c:	8e 8f       	std	Y+30, r24	; 0x1e
    102e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1030:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1032:	9b 8f       	std	Y+27, r25	; 0x1b
    1034:	8a 8f       	std	Y+26, r24	; 0x1a
    1036:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1038:	9b 8d       	ldd	r25, Y+27	; 0x1b
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <SSD_viddisplyNum+0x1aa>
    103e:	9b 8f       	std	Y+27, r25	; 0x1b
    1040:	8a 8f       	std	Y+26, r24	; 0x1a
    1042:	0f c0       	rjmp	.+30     	; 0x1062 <SSD_viddisplyNum+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1044:	69 a5       	ldd	r22, Y+41	; 0x29
    1046:	7a a5       	ldd	r23, Y+42	; 0x2a
    1048:	8b a5       	ldd	r24, Y+43	; 0x2b
    104a:	9c a5       	ldd	r25, Y+44	; 0x2c
    104c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	88 a7       	std	Y+40, r24	; 0x28
    1056:	88 a5       	ldd	r24, Y+40	; 0x28
    1058:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    105a:	89 8d       	ldd	r24, Y+25	; 0x19
    105c:	8a 95       	dec	r24
    105e:	f1 f7       	brne	.-4      	; 0x105c <SSD_viddisplyNum+0x1cc>
    1060:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(100);

	/* Disable SSD 1	-> EN1 = Low	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	62 e0       	ldi	r22, 0x02	; 2
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
	/* Enable SSD 2 -> EN2 = High	*/
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	61 e0       	ldi	r22, 0x01	; 1
    1070:	41 e0       	ldi	r20, 0x01	; 1
    1072:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
	/* Write second digit */
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_secondDigit, SSD_MASK);
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	6a a9       	ldd	r22, Y+50	; 0x32
    107a:	4f e0       	ldi	r20, 0x0F	; 15
    107c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <Dio_vidWriteChanelGroup>
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	a8 ec       	ldi	r26, 0xC8	; 200
    1086:	b2 e4       	ldi	r27, 0x42	; 66
    1088:	8d 8b       	std	Y+21, r24	; 0x15
    108a:	9e 8b       	std	Y+22, r25	; 0x16
    108c:	af 8b       	std	Y+23, r26	; 0x17
    108e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1090:	6d 89       	ldd	r22, Y+21	; 0x15
    1092:	7e 89       	ldd	r23, Y+22	; 0x16
    1094:	8f 89       	ldd	r24, Y+23	; 0x17
    1096:	98 8d       	ldd	r25, Y+24	; 0x18
    1098:	2b ea       	ldi	r18, 0xAB	; 171
    109a:	3a ea       	ldi	r19, 0xAA	; 170
    109c:	4a ea       	ldi	r20, 0xAA	; 170
    109e:	50 e4       	ldi	r21, 0x40	; 64
    10a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	89 8b       	std	Y+17, r24	; 0x11
    10aa:	9a 8b       	std	Y+18, r25	; 0x12
    10ac:	ab 8b       	std	Y+19, r26	; 0x13
    10ae:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    10b0:	69 89       	ldd	r22, Y+17	; 0x11
    10b2:	7a 89       	ldd	r23, Y+18	; 0x12
    10b4:	8b 89       	ldd	r24, Y+19	; 0x13
    10b6:	9c 89       	ldd	r25, Y+20	; 0x14
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	40 e8       	ldi	r20, 0x80	; 128
    10be:	5f e3       	ldi	r21, 0x3F	; 63
    10c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10c4:	88 23       	and	r24, r24
    10c6:	1c f4       	brge	.+6      	; 0x10ce <SSD_viddisplyNum+0x23e>
		__ticks = 1;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	88 8b       	std	Y+16, r24	; 0x10
    10cc:	91 c0       	rjmp	.+290    	; 0x11f0 <SSD_viddisplyNum+0x360>
	else if (__tmp > 255)
    10ce:	69 89       	ldd	r22, Y+17	; 0x11
    10d0:	7a 89       	ldd	r23, Y+18	; 0x12
    10d2:	8b 89       	ldd	r24, Y+19	; 0x13
    10d4:	9c 89       	ldd	r25, Y+20	; 0x14
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	4f e7       	ldi	r20, 0x7F	; 127
    10dc:	53 e4       	ldi	r21, 0x43	; 67
    10de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10e2:	18 16       	cp	r1, r24
    10e4:	0c f0       	brlt	.+2      	; 0x10e8 <SSD_viddisplyNum+0x258>
    10e6:	7b c0       	rjmp	.+246    	; 0x11de <SSD_viddisplyNum+0x34e>
	{
		_delay_ms(__us / 1000.0);
    10e8:	6d 89       	ldd	r22, Y+21	; 0x15
    10ea:	7e 89       	ldd	r23, Y+22	; 0x16
    10ec:	8f 89       	ldd	r24, Y+23	; 0x17
    10ee:	98 8d       	ldd	r25, Y+24	; 0x18
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	4a e7       	ldi	r20, 0x7A	; 122
    10f6:	54 e4       	ldi	r21, 0x44	; 68
    10f8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	8c 87       	std	Y+12, r24	; 0x0c
    1102:	9d 87       	std	Y+13, r25	; 0x0d
    1104:	ae 87       	std	Y+14, r26	; 0x0e
    1106:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1108:	6c 85       	ldd	r22, Y+12	; 0x0c
    110a:	7d 85       	ldd	r23, Y+13	; 0x0d
    110c:	8e 85       	ldd	r24, Y+14	; 0x0e
    110e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	4a e7       	ldi	r20, 0x7A	; 122
    1116:	55 e4       	ldi	r21, 0x45	; 69
    1118:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	88 87       	std	Y+8, r24	; 0x08
    1122:	99 87       	std	Y+9, r25	; 0x09
    1124:	aa 87       	std	Y+10, r26	; 0x0a
    1126:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1128:	68 85       	ldd	r22, Y+8	; 0x08
    112a:	79 85       	ldd	r23, Y+9	; 0x09
    112c:	8a 85       	ldd	r24, Y+10	; 0x0a
    112e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e8       	ldi	r20, 0x80	; 128
    1136:	5f e3       	ldi	r21, 0x3F	; 63
    1138:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    113c:	88 23       	and	r24, r24
    113e:	2c f4       	brge	.+10     	; 0x114a <SSD_viddisplyNum+0x2ba>
		__ticks = 1;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	9f 83       	std	Y+7, r25	; 0x07
    1146:	8e 83       	std	Y+6, r24	; 0x06
    1148:	3f c0       	rjmp	.+126    	; 0x11c8 <SSD_viddisplyNum+0x338>
	else if (__tmp > 65535)
    114a:	68 85       	ldd	r22, Y+8	; 0x08
    114c:	79 85       	ldd	r23, Y+9	; 0x09
    114e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1150:	9b 85       	ldd	r25, Y+11	; 0x0b
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	3f ef       	ldi	r19, 0xFF	; 255
    1156:	4f e7       	ldi	r20, 0x7F	; 127
    1158:	57 e4       	ldi	r21, 0x47	; 71
    115a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    115e:	18 16       	cp	r1, r24
    1160:	4c f5       	brge	.+82     	; 0x11b4 <SSD_viddisplyNum+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1162:	6c 85       	ldd	r22, Y+12	; 0x0c
    1164:	7d 85       	ldd	r23, Y+13	; 0x0d
    1166:	8e 85       	ldd	r24, Y+14	; 0x0e
    1168:	9f 85       	ldd	r25, Y+15	; 0x0f
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e2       	ldi	r20, 0x20	; 32
    1170:	51 e4       	ldi	r21, 0x41	; 65
    1172:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	9f 83       	std	Y+7, r25	; 0x07
    1188:	8e 83       	std	Y+6, r24	; 0x06
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <SSD_viddisplyNum+0x31a>
    118c:	80 e9       	ldi	r24, 0x90	; 144
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	9d 83       	std	Y+5, r25	; 0x05
    1192:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	9d 81       	ldd	r25, Y+5	; 0x05
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <SSD_viddisplyNum+0x308>
    119c:	9d 83       	std	Y+5, r25	; 0x05
    119e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a0:	8e 81       	ldd	r24, Y+6	; 0x06
    11a2:	9f 81       	ldd	r25, Y+7	; 0x07
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	9f 83       	std	Y+7, r25	; 0x07
    11a8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11aa:	8e 81       	ldd	r24, Y+6	; 0x06
    11ac:	9f 81       	ldd	r25, Y+7	; 0x07
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	69 f7       	brne	.-38     	; 0x118c <SSD_viddisplyNum+0x2fc>
    11b2:	24 c0       	rjmp	.+72     	; 0x11fc <SSD_viddisplyNum+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b4:	68 85       	ldd	r22, Y+8	; 0x08
    11b6:	79 85       	ldd	r23, Y+9	; 0x09
    11b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    11bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9f 83       	std	Y+7, r25	; 0x07
    11c6:	8e 83       	std	Y+6, r24	; 0x06
    11c8:	8e 81       	ldd	r24, Y+6	; 0x06
    11ca:	9f 81       	ldd	r25, Y+7	; 0x07
    11cc:	9b 83       	std	Y+3, r25	; 0x03
    11ce:	8a 83       	std	Y+2, r24	; 0x02
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	9b 81       	ldd	r25, Y+3	; 0x03
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <SSD_viddisplyNum+0x344>
    11d8:	9b 83       	std	Y+3, r25	; 0x03
    11da:	8a 83       	std	Y+2, r24	; 0x02
    11dc:	0f c0       	rjmp	.+30     	; 0x11fc <SSD_viddisplyNum+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11de:	69 89       	ldd	r22, Y+17	; 0x11
    11e0:	7a 89       	ldd	r23, Y+18	; 0x12
    11e2:	8b 89       	ldd	r24, Y+19	; 0x13
    11e4:	9c 89       	ldd	r25, Y+20	; 0x14
    11e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	88 8b       	std	Y+16, r24	; 0x10
    11f0:	88 89       	ldd	r24, Y+16	; 0x10
    11f2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	8a 95       	dec	r24
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <SSD_viddisplyNum+0x366>
    11fa:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(100);
}
    11fc:	e3 96       	adiw	r28, 0x33	; 51
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <SSD_vidDelayWithDisply_ms>:

void SSD_vidDelayWithDisply_ms(u8 num,u32 delay)
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	29 97       	sbiw	r28, 0x09	; 9
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	8d 83       	std	Y+5, r24	; 0x05
    1224:	4e 83       	std	Y+6, r20	; 0x06
    1226:	5f 83       	std	Y+7, r21	; 0x07
    1228:	68 87       	std	Y+8, r22	; 0x08
    122a:	79 87       	std	Y+9, r23	; 0x09
	u32 cnt=0;
    122c:	19 82       	std	Y+1, r1	; 0x01
    122e:	1a 82       	std	Y+2, r1	; 0x02
    1230:	1b 82       	std	Y+3, r1	; 0x03
    1232:	1c 82       	std	Y+4, r1	; 0x04
	for (cnt=0; cnt<delay; cnt++)
    1234:	19 82       	std	Y+1, r1	; 0x01
    1236:	1a 82       	std	Y+2, r1	; 0x02
    1238:	1b 82       	std	Y+3, r1	; 0x03
    123a:	1c 82       	std	Y+4, r1	; 0x04
    123c:	0e c0       	rjmp	.+28     	; 0x125a <SSD_vidDelayWithDisply_ms+0x4c>
		 {
			 SSD_viddisplyNum(num);
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	0e 94 48 07 	call	0xe90	; 0xe90 <SSD_viddisplyNum>
}

void SSD_vidDelayWithDisply_ms(u8 num,u32 delay)
{
	u32 cnt=0;
	for (cnt=0; cnt<delay; cnt++)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	ab 81       	ldd	r26, Y+3	; 0x03
    124a:	bc 81       	ldd	r27, Y+4	; 0x04
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	a1 1d       	adc	r26, r1
    1250:	b1 1d       	adc	r27, r1
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	9a 83       	std	Y+2, r25	; 0x02
    1256:	ab 83       	std	Y+3, r26	; 0x03
    1258:	bc 83       	std	Y+4, r27	; 0x04
    125a:	29 81       	ldd	r18, Y+1	; 0x01
    125c:	3a 81       	ldd	r19, Y+2	; 0x02
    125e:	4b 81       	ldd	r20, Y+3	; 0x03
    1260:	5c 81       	ldd	r21, Y+4	; 0x04
    1262:	8e 81       	ldd	r24, Y+6	; 0x06
    1264:	9f 81       	ldd	r25, Y+7	; 0x07
    1266:	a8 85       	ldd	r26, Y+8	; 0x08
    1268:	b9 85       	ldd	r27, Y+9	; 0x09
    126a:	28 17       	cp	r18, r24
    126c:	39 07       	cpc	r19, r25
    126e:	4a 07       	cpc	r20, r26
    1270:	5b 07       	cpc	r21, r27
    1272:	28 f3       	brcs	.-54     	; 0x123e <SSD_vidDelayWithDisply_ms+0x30>
		 {
			 SSD_viddisplyNum(num);
		 }
}
    1274:	29 96       	adiw	r28, 0x09	; 9
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <Led_vidledInit>:
#include "Led.h"
#include "Dio.h"


void Led_vidledInit(void)
{
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_OUTPUT);
    128e:	82 e0       	ldi	r24, 0x02	; 2
    1290:	62 e0       	ldi	r22, 0x02	; 2
    1292:	41 e0       	ldi	r20, 0x01	; 1
    1294:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	67 e0       	ldi	r22, 0x07	; 7
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD, DIO_PIN3, DIO_OUTPUT);
    12a2:	83 e0       	ldi	r24, 0x03	; 3
    12a4:	63 e0       	ldi	r22, 0x03	; 3
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
}
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <Led_vidledOn>:

void Led_vidledOn(led_ledId_t led)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <Led_vidledOn+0x6>
    12b8:	0f 92       	push	r0
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	3b 83       	std	Y+3, r19	; 0x03
    12c8:	2a 83       	std	Y+2, r18	; 0x02
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	9b 81       	ldd	r25, Y+3	; 0x03
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	91 05       	cpc	r25, r1
    12d2:	79 f0       	breq	.+30     	; 0x12f2 <Led_vidledOn+0x40>
    12d4:	2a 81       	ldd	r18, Y+2	; 0x02
    12d6:	3b 81       	ldd	r19, Y+3	; 0x03
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	81 f0       	breq	.+32     	; 0x12fe <Led_vidledOn+0x4c>
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	9b 81       	ldd	r25, Y+3	; 0x03
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	89 f4       	brne	.+34     	; 0x1308 <Led_vidledOn+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_HIGH);
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	62 e0       	ldi	r22, 0x02	; 2
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
    12f0:	0b c0       	rjmp	.+22     	; 0x1308 <Led_vidledOn+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	67 e0       	ldi	r22, 0x07	; 7
    12f6:	41 e0       	ldi	r20, 0x01	; 1
    12f8:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
    12fc:	05 c0       	rjmp	.+10     	; 0x1308 <Led_vidledOn+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_HIGH);
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	63 e0       	ldi	r22, 0x03	; 3
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
		break;
	}
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <Led_vidledOff>:

void Led_vidledOff(led_ledId_t led)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <Led_vidledOff+0x6>
    131a:	0f 92       	push	r0
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    1322:	89 81       	ldd	r24, Y+1	; 0x01
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	3b 83       	std	Y+3, r19	; 0x03
    132a:	2a 83       	std	Y+2, r18	; 0x02
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	9b 81       	ldd	r25, Y+3	; 0x03
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	91 05       	cpc	r25, r1
    1334:	79 f0       	breq	.+30     	; 0x1354 <Led_vidledOff+0x40>
    1336:	2a 81       	ldd	r18, Y+2	; 0x02
    1338:	3b 81       	ldd	r19, Y+3	; 0x03
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	81 f0       	breq	.+32     	; 0x1360 <Led_vidledOff+0x4c>
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	9b 81       	ldd	r25, Y+3	; 0x03
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	89 f4       	brne	.+34     	; 0x136a <Led_vidledOff+0x56>
	{
	case LED0:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN2, DIO_LOW);
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	62 e0       	ldi	r22, 0x02	; 2
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
    1352:	0b c0       	rjmp	.+22     	; 0x136a <Led_vidledOff+0x56>
		break;

	case LED1:
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	67 e0       	ldi	r22, 0x07	; 7
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
    135e:	05 c0       	rjmp	.+10     	; 0x136a <Led_vidledOff+0x56>
		break;

	case LED2:
		Dio_vidwriteChanel(DIO_PORTD, DIO_PIN3, DIO_LOW);
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	63 e0       	ldi	r22, 0x03	; 3
    1364:	40 e0       	ldi	r20, 0x00	; 0
    1366:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
		break;
	}
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <Led_vidledToggle>:

void Led_vidledToggle(led_ledId_t ledId)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <Led_vidledToggle+0x6>
    137c:	0f 92       	push	r0
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	3b 83       	std	Y+3, r19	; 0x03
    138c:	2a 83       	std	Y+2, r18	; 0x02
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	9b 81       	ldd	r25, Y+3	; 0x03
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	91 05       	cpc	r25, r1
    1396:	71 f0       	breq	.+28     	; 0x13b4 <Led_vidledToggle+0x3e>
    1398:	2a 81       	ldd	r18, Y+2	; 0x02
    139a:	3b 81       	ldd	r19, Y+3	; 0x03
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	71 f0       	breq	.+28     	; 0x13be <Led_vidledToggle+0x48>
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	9b 81       	ldd	r25, Y+3	; 0x03
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	71 f4       	brne	.+28     	; 0x13c6 <Led_vidledToggle+0x50>
	{
	case LED0:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN2);
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	62 e0       	ldi	r22, 0x02	; 2
    13ae:	0e 94 6d 18 	call	0x30da	; 0x30da <Dio_vidflipChanel>
    13b2:	09 c0       	rjmp	.+18     	; 0x13c6 <Led_vidledToggle+0x50>
		break;

	case LED1:
		Dio_vidflipChanel(DIO_PORTC, DIO_PIN7);
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	67 e0       	ldi	r22, 0x07	; 7
    13b8:	0e 94 6d 18 	call	0x30da	; 0x30da <Dio_vidflipChanel>
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <Led_vidledToggle+0x50>
		break;

	case LED2:
		Dio_vidflipChanel(DIO_PORTD, DIO_PIN3);
    13be:	83 e0       	ldi	r24, 0x03	; 3
    13c0:	63 e0       	ldi	r22, 0x03	; 3
    13c2:	0e 94 6d 18 	call	0x30da	; 0x30da <Dio_vidflipChanel>
		break;
	}
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <Lm35_vidInit>:

#include "Std_Types.h"
#include "Adc.h"

void Lm35_vidInit(void)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
	Adc_vidInit();
    13da:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <Adc_vidInit>
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <Lm35_u8TempRead>:
u16 Lm35_u8TempRead(void)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <Lm35_u8TempRead+0x6>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <Lm35_u8TempRead+0x8>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <Lm35_u8TempRead+0xa>
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
	f64 loc_adcRead = 0;
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a0 e0       	ldi	r26, 0x00	; 0
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	8b 83       	std	Y+3, r24	; 0x03
    13fc:	9c 83       	std	Y+4, r25	; 0x04
    13fe:	ad 83       	std	Y+5, r26	; 0x05
    1400:	be 83       	std	Y+6, r27	; 0x06
	u16 loc_temp = 0;
    1402:	1a 82       	std	Y+2, r1	; 0x02
    1404:	19 82       	std	Y+1, r1	; 0x01

	loc_adcRead = Adc_u16AdcRead(ADC_CHANNEL1);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	0e 94 06 19 	call	0x320c	; 0x320c <Adc_u16AdcRead>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	8b 83       	std	Y+3, r24	; 0x03
    1412:	9c 83       	std	Y+4, r25	; 0x04
    1414:	ad 83       	std	Y+5, r26	; 0x05
    1416:	be 83       	std	Y+6, r27	; 0x06
	loc_temp = loc_adcRead/10;
    1418:	6b 81       	ldd	r22, Y+3	; 0x03
    141a:	7c 81       	ldd	r23, Y+4	; 0x04
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	40 e2       	ldi	r20, 0x20	; 32
    1426:	51 e4       	ldi	r21, 0x41	; 65
    1428:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	bc 01       	movw	r22, r24
    1432:	cd 01       	movw	r24, r26
    1434:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01

	return loc_temp;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1444:	26 96       	adiw	r28, 0x06	; 6
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <Lcd_vidinit>:
#include "util/delay.h"
#include <stdio.h>


void Lcd_vidinit(void)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	e4 97       	sbiw	r28, 0x34	; 52
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
	/*	configure control pins as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN1, DIO_OUTPUT);
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	41 e0       	ldi	r20, 0x01	; 1
    1470:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN2, DIO_OUTPUT);
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	62 e0       	ldi	r22, 0x02	; 2
    1478:	41 e0       	ldi	r20, 0x01	; 1
    147a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN3, DIO_OUTPUT);
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	63 e0       	ldi	r22, 0x03	; 3
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>

	/*	configure data pins as output	*/
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN4, DIO_OUTPUT);
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	64 e0       	ldi	r22, 0x04	; 4
    148c:	41 e0       	ldi	r20, 0x01	; 1
    148e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN5, DIO_OUTPUT);
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	65 e0       	ldi	r22, 0x05	; 5
    1496:	41 e0       	ldi	r20, 0x01	; 1
    1498:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN6, DIO_OUTPUT);
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	66 e0       	ldi	r22, 0x06	; 6
    14a0:	41 e0       	ldi	r20, 0x01	; 1
    14a2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTA, DIO_PIN7, DIO_OUTPUT);
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	67 e0       	ldi	r22, 0x07	; 7
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>

	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN2, DIO_LOW);
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	62 e0       	ldi	r22, 0x02	; 2
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a0 e7       	ldi	r26, 0x70	; 112
    14c0:	b1 e4       	ldi	r27, 0x41	; 65
    14c2:	89 ab       	std	Y+49, r24	; 0x31
    14c4:	9a ab       	std	Y+50, r25	; 0x32
    14c6:	ab ab       	std	Y+51, r26	; 0x33
    14c8:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ca:	69 a9       	ldd	r22, Y+49	; 0x31
    14cc:	7a a9       	ldd	r23, Y+50	; 0x32
    14ce:	8b a9       	ldd	r24, Y+51	; 0x33
    14d0:	9c a9       	ldd	r25, Y+52	; 0x34
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	4a e7       	ldi	r20, 0x7A	; 122
    14d8:	55 e4       	ldi	r21, 0x45	; 69
    14da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8d a7       	std	Y+45, r24	; 0x2d
    14e4:	9e a7       	std	Y+46, r25	; 0x2e
    14e6:	af a7       	std	Y+47, r26	; 0x2f
    14e8:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    14ea:	6d a5       	ldd	r22, Y+45	; 0x2d
    14ec:	7e a5       	ldd	r23, Y+46	; 0x2e
    14ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    14f0:	98 a9       	ldd	r25, Y+48	; 0x30
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	5f e3       	ldi	r21, 0x3F	; 63
    14fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14fe:	88 23       	and	r24, r24
    1500:	2c f4       	brge	.+10     	; 0x150c <Lcd_vidinit+0xb6>
		__ticks = 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9c a7       	std	Y+44, r25	; 0x2c
    1508:	8b a7       	std	Y+43, r24	; 0x2b
    150a:	3f c0       	rjmp	.+126    	; 0x158a <Lcd_vidinit+0x134>
	else if (__tmp > 65535)
    150c:	6d a5       	ldd	r22, Y+45	; 0x2d
    150e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1510:	8f a5       	ldd	r24, Y+47	; 0x2f
    1512:	98 a9       	ldd	r25, Y+48	; 0x30
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1520:	18 16       	cp	r1, r24
    1522:	4c f5       	brge	.+82     	; 0x1576 <Lcd_vidinit+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1524:	69 a9       	ldd	r22, Y+49	; 0x31
    1526:	7a a9       	ldd	r23, Y+50	; 0x32
    1528:	8b a9       	ldd	r24, Y+51	; 0x33
    152a:	9c a9       	ldd	r25, Y+52	; 0x34
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e2       	ldi	r20, 0x20	; 32
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9c a7       	std	Y+44, r25	; 0x2c
    154a:	8b a7       	std	Y+43, r24	; 0x2b
    154c:	0f c0       	rjmp	.+30     	; 0x156c <Lcd_vidinit+0x116>
    154e:	80 e9       	ldi	r24, 0x90	; 144
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	9a a7       	std	Y+42, r25	; 0x2a
    1554:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1556:	89 a5       	ldd	r24, Y+41	; 0x29
    1558:	9a a5       	ldd	r25, Y+42	; 0x2a
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <Lcd_vidinit+0x104>
    155e:	9a a7       	std	Y+42, r25	; 0x2a
    1560:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1562:	8b a5       	ldd	r24, Y+43	; 0x2b
    1564:	9c a5       	ldd	r25, Y+44	; 0x2c
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	9c a7       	std	Y+44, r25	; 0x2c
    156a:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156c:	8b a5       	ldd	r24, Y+43	; 0x2b
    156e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	69 f7       	brne	.-38     	; 0x154e <Lcd_vidinit+0xf8>
    1574:	14 c0       	rjmp	.+40     	; 0x159e <Lcd_vidinit+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1576:	6d a5       	ldd	r22, Y+45	; 0x2d
    1578:	7e a5       	ldd	r23, Y+46	; 0x2e
    157a:	8f a5       	ldd	r24, Y+47	; 0x2f
    157c:	98 a9       	ldd	r25, Y+48	; 0x30
    157e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9c a7       	std	Y+44, r25	; 0x2c
    1588:	8b a7       	std	Y+43, r24	; 0x2b
    158a:	8b a5       	ldd	r24, Y+43	; 0x2b
    158c:	9c a5       	ldd	r25, Y+44	; 0x2c
    158e:	98 a7       	std	Y+40, r25	; 0x28
    1590:	8f a3       	std	Y+39, r24	; 0x27
    1592:	8f a1       	ldd	r24, Y+39	; 0x27
    1594:	98 a5       	ldd	r25, Y+40	; 0x28
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <Lcd_vidinit+0x140>
    159a:	98 a7       	std	Y+40, r25	; 0x28
    159c:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_vidCmd(0x03);
    159e:	83 e0       	ldi	r24, 0x03	; 3
    15a0:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Lcd_vidCmd>
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a0 ea       	ldi	r26, 0xA0	; 160
    15aa:	b0 e4       	ldi	r27, 0x40	; 64
    15ac:	8b a3       	std	Y+35, r24	; 0x23
    15ae:	9c a3       	std	Y+36, r25	; 0x24
    15b0:	ad a3       	std	Y+37, r26	; 0x25
    15b2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b4:	6b a1       	ldd	r22, Y+35	; 0x23
    15b6:	7c a1       	ldd	r23, Y+36	; 0x24
    15b8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ba:	9e a1       	ldd	r25, Y+38	; 0x26
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	4a e7       	ldi	r20, 0x7A	; 122
    15c2:	55 e4       	ldi	r21, 0x45	; 69
    15c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	8f 8f       	std	Y+31, r24	; 0x1f
    15ce:	98 a3       	std	Y+32, r25	; 0x20
    15d0:	a9 a3       	std	Y+33, r26	; 0x21
    15d2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    15d4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15d6:	78 a1       	ldd	r23, Y+32	; 0x20
    15d8:	89 a1       	ldd	r24, Y+33	; 0x21
    15da:	9a a1       	ldd	r25, Y+34	; 0x22
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e8       	ldi	r20, 0x80	; 128
    15e2:	5f e3       	ldi	r21, 0x3F	; 63
    15e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15e8:	88 23       	and	r24, r24
    15ea:	2c f4       	brge	.+10     	; 0x15f6 <Lcd_vidinit+0x1a0>
		__ticks = 1;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	9e 8f       	std	Y+30, r25	; 0x1e
    15f2:	8d 8f       	std	Y+29, r24	; 0x1d
    15f4:	3f c0       	rjmp	.+126    	; 0x1674 <Lcd_vidinit+0x21e>
	else if (__tmp > 65535)
    15f6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15f8:	78 a1       	ldd	r23, Y+32	; 0x20
    15fa:	89 a1       	ldd	r24, Y+33	; 0x21
    15fc:	9a a1       	ldd	r25, Y+34	; 0x22
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	3f ef       	ldi	r19, 0xFF	; 255
    1602:	4f e7       	ldi	r20, 0x7F	; 127
    1604:	57 e4       	ldi	r21, 0x47	; 71
    1606:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    160a:	18 16       	cp	r1, r24
    160c:	4c f5       	brge	.+82     	; 0x1660 <Lcd_vidinit+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160e:	6b a1       	ldd	r22, Y+35	; 0x23
    1610:	7c a1       	ldd	r23, Y+36	; 0x24
    1612:	8d a1       	ldd	r24, Y+37	; 0x25
    1614:	9e a1       	ldd	r25, Y+38	; 0x26
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e2       	ldi	r20, 0x20	; 32
    161c:	51 e4       	ldi	r21, 0x41	; 65
    161e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	bc 01       	movw	r22, r24
    1628:	cd 01       	movw	r24, r26
    162a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	9e 8f       	std	Y+30, r25	; 0x1e
    1634:	8d 8f       	std	Y+29, r24	; 0x1d
    1636:	0f c0       	rjmp	.+30     	; 0x1656 <Lcd_vidinit+0x200>
    1638:	80 e9       	ldi	r24, 0x90	; 144
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	9c 8f       	std	Y+28, r25	; 0x1c
    163e:	8b 8f       	std	Y+27, r24	; 0x1b
    1640:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1642:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <Lcd_vidinit+0x1ee>
    1648:	9c 8f       	std	Y+28, r25	; 0x1c
    164a:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    164e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	9e 8f       	std	Y+30, r25	; 0x1e
    1654:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1656:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1658:	9e 8d       	ldd	r25, Y+30	; 0x1e
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	69 f7       	brne	.-38     	; 0x1638 <Lcd_vidinit+0x1e2>
    165e:	14 c0       	rjmp	.+40     	; 0x1688 <Lcd_vidinit+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1660:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1662:	78 a1       	ldd	r23, Y+32	; 0x20
    1664:	89 a1       	ldd	r24, Y+33	; 0x21
    1666:	9a a1       	ldd	r25, Y+34	; 0x22
    1668:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	9e 8f       	std	Y+30, r25	; 0x1e
    1672:	8d 8f       	std	Y+29, r24	; 0x1d
    1674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1676:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1678:	9a 8f       	std	Y+26, r25	; 0x1a
    167a:	89 8f       	std	Y+25, r24	; 0x19
    167c:	89 8d       	ldd	r24, Y+25	; 0x19
    167e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <Lcd_vidinit+0x22a>
    1684:	9a 8f       	std	Y+26, r25	; 0x1a
    1686:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_vidCmd(0x03);
    1688:	83 e0       	ldi	r24, 0x03	; 3
    168a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Lcd_vidCmd>
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a8 ec       	ldi	r26, 0xC8	; 200
    1694:	b2 e4       	ldi	r27, 0x42	; 66
    1696:	8d 8b       	std	Y+21, r24	; 0x15
    1698:	9e 8b       	std	Y+22, r25	; 0x16
    169a:	af 8b       	std	Y+23, r26	; 0x17
    169c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    169e:	6d 89       	ldd	r22, Y+21	; 0x15
    16a0:	7e 89       	ldd	r23, Y+22	; 0x16
    16a2:	8f 89       	ldd	r24, Y+23	; 0x17
    16a4:	98 8d       	ldd	r25, Y+24	; 0x18
    16a6:	2b ea       	ldi	r18, 0xAB	; 171
    16a8:	3a ea       	ldi	r19, 0xAA	; 170
    16aa:	4a ea       	ldi	r20, 0xAA	; 170
    16ac:	50 e4       	ldi	r21, 0x40	; 64
    16ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	89 8b       	std	Y+17, r24	; 0x11
    16b8:	9a 8b       	std	Y+18, r25	; 0x12
    16ba:	ab 8b       	std	Y+19, r26	; 0x13
    16bc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16be:	69 89       	ldd	r22, Y+17	; 0x11
    16c0:	7a 89       	ldd	r23, Y+18	; 0x12
    16c2:	8b 89       	ldd	r24, Y+19	; 0x13
    16c4:	9c 89       	ldd	r25, Y+20	; 0x14
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	1c f4       	brge	.+6      	; 0x16dc <Lcd_vidinit+0x286>
		__ticks = 1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	88 8b       	std	Y+16, r24	; 0x10
    16da:	91 c0       	rjmp	.+290    	; 0x17fe <Lcd_vidinit+0x3a8>
	else if (__tmp > 255)
    16dc:	69 89       	ldd	r22, Y+17	; 0x11
    16de:	7a 89       	ldd	r23, Y+18	; 0x12
    16e0:	8b 89       	ldd	r24, Y+19	; 0x13
    16e2:	9c 89       	ldd	r25, Y+20	; 0x14
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4f e7       	ldi	r20, 0x7F	; 127
    16ea:	53 e4       	ldi	r21, 0x43	; 67
    16ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16f0:	18 16       	cp	r1, r24
    16f2:	0c f0       	brlt	.+2      	; 0x16f6 <Lcd_vidinit+0x2a0>
    16f4:	7b c0       	rjmp	.+246    	; 0x17ec <Lcd_vidinit+0x396>
	{
		_delay_ms(__us / 1000.0);
    16f6:	6d 89       	ldd	r22, Y+21	; 0x15
    16f8:	7e 89       	ldd	r23, Y+22	; 0x16
    16fa:	8f 89       	ldd	r24, Y+23	; 0x17
    16fc:	98 8d       	ldd	r25, Y+24	; 0x18
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	4a e7       	ldi	r20, 0x7A	; 122
    1704:	54 e4       	ldi	r21, 0x44	; 68
    1706:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	8c 87       	std	Y+12, r24	; 0x0c
    1710:	9d 87       	std	Y+13, r25	; 0x0d
    1712:	ae 87       	std	Y+14, r26	; 0x0e
    1714:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1716:	6c 85       	ldd	r22, Y+12	; 0x0c
    1718:	7d 85       	ldd	r23, Y+13	; 0x0d
    171a:	8e 85       	ldd	r24, Y+14	; 0x0e
    171c:	9f 85       	ldd	r25, Y+15	; 0x0f
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	4a e7       	ldi	r20, 0x7A	; 122
    1724:	55 e4       	ldi	r21, 0x45	; 69
    1726:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	88 87       	std	Y+8, r24	; 0x08
    1730:	99 87       	std	Y+9, r25	; 0x09
    1732:	aa 87       	std	Y+10, r26	; 0x0a
    1734:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1736:	68 85       	ldd	r22, Y+8	; 0x08
    1738:	79 85       	ldd	r23, Y+9	; 0x09
    173a:	8a 85       	ldd	r24, Y+10	; 0x0a
    173c:	9b 85       	ldd	r25, Y+11	; 0x0b
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e8       	ldi	r20, 0x80	; 128
    1744:	5f e3       	ldi	r21, 0x3F	; 63
    1746:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    174a:	88 23       	and	r24, r24
    174c:	2c f4       	brge	.+10     	; 0x1758 <Lcd_vidinit+0x302>
		__ticks = 1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	9f 83       	std	Y+7, r25	; 0x07
    1754:	8e 83       	std	Y+6, r24	; 0x06
    1756:	3f c0       	rjmp	.+126    	; 0x17d6 <Lcd_vidinit+0x380>
	else if (__tmp > 65535)
    1758:	68 85       	ldd	r22, Y+8	; 0x08
    175a:	79 85       	ldd	r23, Y+9	; 0x09
    175c:	8a 85       	ldd	r24, Y+10	; 0x0a
    175e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	3f ef       	ldi	r19, 0xFF	; 255
    1764:	4f e7       	ldi	r20, 0x7F	; 127
    1766:	57 e4       	ldi	r21, 0x47	; 71
    1768:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    176c:	18 16       	cp	r1, r24
    176e:	4c f5       	brge	.+82     	; 0x17c2 <Lcd_vidinit+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1770:	6c 85       	ldd	r22, Y+12	; 0x0c
    1772:	7d 85       	ldd	r23, Y+13	; 0x0d
    1774:	8e 85       	ldd	r24, Y+14	; 0x0e
    1776:	9f 85       	ldd	r25, Y+15	; 0x0f
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e2       	ldi	r20, 0x20	; 32
    177e:	51 e4       	ldi	r21, 0x41	; 65
    1780:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	bc 01       	movw	r22, r24
    178a:	cd 01       	movw	r24, r26
    178c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	9f 83       	std	Y+7, r25	; 0x07
    1796:	8e 83       	std	Y+6, r24	; 0x06
    1798:	0f c0       	rjmp	.+30     	; 0x17b8 <Lcd_vidinit+0x362>
    179a:	80 e9       	ldi	r24, 0x90	; 144
    179c:	91 e0       	ldi	r25, 0x01	; 1
    179e:	9d 83       	std	Y+5, r25	; 0x05
    17a0:	8c 83       	std	Y+4, r24	; 0x04
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	9d 81       	ldd	r25, Y+5	; 0x05
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <Lcd_vidinit+0x350>
    17aa:	9d 83       	std	Y+5, r25	; 0x05
    17ac:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ae:	8e 81       	ldd	r24, Y+6	; 0x06
    17b0:	9f 81       	ldd	r25, Y+7	; 0x07
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	9f 83       	std	Y+7, r25	; 0x07
    17b6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ba:	9f 81       	ldd	r25, Y+7	; 0x07
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	69 f7       	brne	.-38     	; 0x179a <Lcd_vidinit+0x344>
    17c0:	24 c0       	rjmp	.+72     	; 0x180a <Lcd_vidinit+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c2:	68 85       	ldd	r22, Y+8	; 0x08
    17c4:	79 85       	ldd	r23, Y+9	; 0x09
    17c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    17c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	9f 83       	std	Y+7, r25	; 0x07
    17d4:	8e 83       	std	Y+6, r24	; 0x06
    17d6:	8e 81       	ldd	r24, Y+6	; 0x06
    17d8:	9f 81       	ldd	r25, Y+7	; 0x07
    17da:	9b 83       	std	Y+3, r25	; 0x03
    17dc:	8a 83       	std	Y+2, r24	; 0x02
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	9b 81       	ldd	r25, Y+3	; 0x03
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <Lcd_vidinit+0x38c>
    17e6:	9b 83       	std	Y+3, r25	; 0x03
    17e8:	8a 83       	std	Y+2, r24	; 0x02
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <Lcd_vidinit+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17ec:	69 89       	ldd	r22, Y+17	; 0x11
    17ee:	7a 89       	ldd	r23, Y+18	; 0x12
    17f0:	8b 89       	ldd	r24, Y+19	; 0x13
    17f2:	9c 89       	ldd	r25, Y+20	; 0x14
    17f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	88 8b       	std	Y+16, r24	; 0x10
    17fe:	88 89       	ldd	r24, Y+16	; 0x10
    1800:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	8a 95       	dec	r24
    1806:	f1 f7       	brne	.-4      	; 0x1804 <Lcd_vidinit+0x3ae>
    1808:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_vidCmd(0x03);
    180a:	83 e0       	ldi	r24, 0x03	; 3
    180c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Lcd_vidCmd>
	Lcd_vidCmd(0x02);
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Lcd_vidCmd>
	Lcd_vidCmd(_LCD_4BIT_MODE);
    1816:	88 e2       	ldi	r24, 0x28	; 40
    1818:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Lcd_vidCmd>
}
    181c:	e4 96       	adiw	r28, 0x34	; 52
    181e:	0f b6       	in	r0, 0x3f	; 63
    1820:	f8 94       	cli
    1822:	de bf       	out	0x3e, r29	; 62
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	cd bf       	out	0x3d, r28	; 61
    1828:	cf 91       	pop	r28
    182a:	df 91       	pop	r29
    182c:	08 95       	ret

0000182e <Lcd_videnablePulse>:

static void Lcd_videnablePulse(void)
{
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	a6 97       	sbiw	r28, 0x26	; 38
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
	//send Enable pulse
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_HIGH);
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	63 e0       	ldi	r22, 0x03	; 3
    1846:	41 e0       	ldi	r20, 0x01	; 1
    1848:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	a0 e8       	ldi	r26, 0x80	; 128
    1852:	bf e3       	ldi	r27, 0x3F	; 63
    1854:	8b a3       	std	Y+35, r24	; 0x23
    1856:	9c a3       	std	Y+36, r25	; 0x24
    1858:	ad a3       	std	Y+37, r26	; 0x25
    185a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    185c:	6b a1       	ldd	r22, Y+35	; 0x23
    185e:	7c a1       	ldd	r23, Y+36	; 0x24
    1860:	8d a1       	ldd	r24, Y+37	; 0x25
    1862:	9e a1       	ldd	r25, Y+38	; 0x26
    1864:	2b ea       	ldi	r18, 0xAB	; 171
    1866:	3a ea       	ldi	r19, 0xAA	; 170
    1868:	4a ea       	ldi	r20, 0xAA	; 170
    186a:	50 e4       	ldi	r21, 0x40	; 64
    186c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	8f 8f       	std	Y+31, r24	; 0x1f
    1876:	98 a3       	std	Y+32, r25	; 0x20
    1878:	a9 a3       	std	Y+33, r26	; 0x21
    187a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    187c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    187e:	78 a1       	ldd	r23, Y+32	; 0x20
    1880:	89 a1       	ldd	r24, Y+33	; 0x21
    1882:	9a a1       	ldd	r25, Y+34	; 0x22
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	5f e3       	ldi	r21, 0x3F	; 63
    188c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1890:	88 23       	and	r24, r24
    1892:	1c f4       	brge	.+6      	; 0x189a <Lcd_videnablePulse+0x6c>
		__ticks = 1;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	8e 8f       	std	Y+30, r24	; 0x1e
    1898:	91 c0       	rjmp	.+290    	; 0x19bc <Lcd_videnablePulse+0x18e>
	else if (__tmp > 255)
    189a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    189c:	78 a1       	ldd	r23, Y+32	; 0x20
    189e:	89 a1       	ldd	r24, Y+33	; 0x21
    18a0:	9a a1       	ldd	r25, Y+34	; 0x22
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	53 e4       	ldi	r21, 0x43	; 67
    18aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18ae:	18 16       	cp	r1, r24
    18b0:	0c f0       	brlt	.+2      	; 0x18b4 <Lcd_videnablePulse+0x86>
    18b2:	7b c0       	rjmp	.+246    	; 0x19aa <Lcd_videnablePulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    18b4:	6b a1       	ldd	r22, Y+35	; 0x23
    18b6:	7c a1       	ldd	r23, Y+36	; 0x24
    18b8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ba:	9e a1       	ldd	r25, Y+38	; 0x26
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	4a e7       	ldi	r20, 0x7A	; 122
    18c2:	54 e4       	ldi	r21, 0x44	; 68
    18c4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	8a 8f       	std	Y+26, r24	; 0x1a
    18ce:	9b 8f       	std	Y+27, r25	; 0x1b
    18d0:	ac 8f       	std	Y+28, r26	; 0x1c
    18d2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18d6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18da:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	4a e7       	ldi	r20, 0x7A	; 122
    18e2:	55 e4       	ldi	r21, 0x45	; 69
    18e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	8e 8b       	std	Y+22, r24	; 0x16
    18ee:	9f 8b       	std	Y+23, r25	; 0x17
    18f0:	a8 8f       	std	Y+24, r26	; 0x18
    18f2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    18f4:	6e 89       	ldd	r22, Y+22	; 0x16
    18f6:	7f 89       	ldd	r23, Y+23	; 0x17
    18f8:	88 8d       	ldd	r24, Y+24	; 0x18
    18fa:	99 8d       	ldd	r25, Y+25	; 0x19
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e8       	ldi	r20, 0x80	; 128
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1908:	88 23       	and	r24, r24
    190a:	2c f4       	brge	.+10     	; 0x1916 <Lcd_videnablePulse+0xe8>
		__ticks = 1;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	9d 8b       	std	Y+21, r25	; 0x15
    1912:	8c 8b       	std	Y+20, r24	; 0x14
    1914:	3f c0       	rjmp	.+126    	; 0x1994 <Lcd_videnablePulse+0x166>
	else if (__tmp > 65535)
    1916:	6e 89       	ldd	r22, Y+22	; 0x16
    1918:	7f 89       	ldd	r23, Y+23	; 0x17
    191a:	88 8d       	ldd	r24, Y+24	; 0x18
    191c:	99 8d       	ldd	r25, Y+25	; 0x19
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	3f ef       	ldi	r19, 0xFF	; 255
    1922:	4f e7       	ldi	r20, 0x7F	; 127
    1924:	57 e4       	ldi	r21, 0x47	; 71
    1926:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    192a:	18 16       	cp	r1, r24
    192c:	4c f5       	brge	.+82     	; 0x1980 <Lcd_videnablePulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1930:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1932:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1934:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e2       	ldi	r20, 0x20	; 32
    193c:	51 e4       	ldi	r21, 0x41	; 65
    193e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9d 8b       	std	Y+21, r25	; 0x15
    1954:	8c 8b       	std	Y+20, r24	; 0x14
    1956:	0f c0       	rjmp	.+30     	; 0x1976 <Lcd_videnablePulse+0x148>
    1958:	80 e9       	ldi	r24, 0x90	; 144
    195a:	91 e0       	ldi	r25, 0x01	; 1
    195c:	9b 8b       	std	Y+19, r25	; 0x13
    195e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1960:	8a 89       	ldd	r24, Y+18	; 0x12
    1962:	9b 89       	ldd	r25, Y+19	; 0x13
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <Lcd_videnablePulse+0x136>
    1968:	9b 8b       	std	Y+19, r25	; 0x13
    196a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196c:	8c 89       	ldd	r24, Y+20	; 0x14
    196e:	9d 89       	ldd	r25, Y+21	; 0x15
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	9d 8b       	std	Y+21, r25	; 0x15
    1974:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1976:	8c 89       	ldd	r24, Y+20	; 0x14
    1978:	9d 89       	ldd	r25, Y+21	; 0x15
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	69 f7       	brne	.-38     	; 0x1958 <Lcd_videnablePulse+0x12a>
    197e:	24 c0       	rjmp	.+72     	; 0x19c8 <Lcd_videnablePulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1980:	6e 89       	ldd	r22, Y+22	; 0x16
    1982:	7f 89       	ldd	r23, Y+23	; 0x17
    1984:	88 8d       	ldd	r24, Y+24	; 0x18
    1986:	99 8d       	ldd	r25, Y+25	; 0x19
    1988:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	9d 8b       	std	Y+21, r25	; 0x15
    1992:	8c 8b       	std	Y+20, r24	; 0x14
    1994:	8c 89       	ldd	r24, Y+20	; 0x14
    1996:	9d 89       	ldd	r25, Y+21	; 0x15
    1998:	99 8b       	std	Y+17, r25	; 0x11
    199a:	88 8b       	std	Y+16, r24	; 0x10
    199c:	88 89       	ldd	r24, Y+16	; 0x10
    199e:	99 89       	ldd	r25, Y+17	; 0x11
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <Lcd_videnablePulse+0x172>
    19a4:	99 8b       	std	Y+17, r25	; 0x11
    19a6:	88 8b       	std	Y+16, r24	; 0x10
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <Lcd_videnablePulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19aa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19ac:	78 a1       	ldd	r23, Y+32	; 0x20
    19ae:	89 a1       	ldd	r24, Y+33	; 0x21
    19b0:	9a a1       	ldd	r25, Y+34	; 0x22
    19b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	8e 8f       	std	Y+30, r24	; 0x1e
    19bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19be:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c2:	8a 95       	dec	r24
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <Lcd_videnablePulse+0x194>
    19c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN3, DIO_LOW);
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	63 e0       	ldi	r22, 0x03	; 3
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a0 e0       	ldi	r26, 0x00	; 0
    19d8:	b0 e4       	ldi	r27, 0x40	; 64
    19da:	8b 87       	std	Y+11, r24	; 0x0b
    19dc:	9c 87       	std	Y+12, r25	; 0x0c
    19de:	ad 87       	std	Y+13, r26	; 0x0d
    19e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a e7       	ldi	r20, 0x7A	; 122
    19f0:	55 e4       	ldi	r21, 0x45	; 69
    19f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	8f 83       	std	Y+7, r24	; 0x07
    19fc:	98 87       	std	Y+8, r25	; 0x08
    19fe:	a9 87       	std	Y+9, r26	; 0x09
    1a00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a02:	6f 81       	ldd	r22, Y+7	; 0x07
    1a04:	78 85       	ldd	r23, Y+8	; 0x08
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e8       	ldi	r20, 0x80	; 128
    1a10:	5f e3       	ldi	r21, 0x3F	; 63
    1a12:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a16:	88 23       	and	r24, r24
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <Lcd_videnablePulse+0x1f6>
		__ticks = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	8d 83       	std	Y+5, r24	; 0x05
    1a22:	3f c0       	rjmp	.+126    	; 0x1aa2 <Lcd_videnablePulse+0x274>
	else if (__tmp > 65535)
    1a24:	6f 81       	ldd	r22, Y+7	; 0x07
    1a26:	78 85       	ldd	r23, Y+8	; 0x08
    1a28:	89 85       	ldd	r24, Y+9	; 0x09
    1a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	3f ef       	ldi	r19, 0xFF	; 255
    1a30:	4f e7       	ldi	r20, 0x7F	; 127
    1a32:	57 e4       	ldi	r21, 0x47	; 71
    1a34:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a38:	18 16       	cp	r1, r24
    1a3a:	4c f5       	brge	.+82     	; 0x1a8e <Lcd_videnablePulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e2       	ldi	r20, 0x20	; 32
    1a4a:	51 e4       	ldi	r21, 0x41	; 65
    1a4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	0f c0       	rjmp	.+30     	; 0x1a84 <Lcd_videnablePulse+0x256>
    1a66:	80 e9       	ldi	r24, 0x90	; 144
    1a68:	91 e0       	ldi	r25, 0x01	; 1
    1a6a:	9c 83       	std	Y+4, r25	; 0x04
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	9c 81       	ldd	r25, Y+4	; 0x04
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <Lcd_videnablePulse+0x244>
    1a76:	9c 83       	std	Y+4, r25	; 0x04
    1a78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	69 f7       	brne	.-38     	; 0x1a66 <Lcd_videnablePulse+0x238>
    1a8c:	14 c0       	rjmp	.+40     	; 0x1ab6 <Lcd_videnablePulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a90:	78 85       	ldd	r23, Y+8	; 0x08
    1a92:	89 85       	ldd	r24, Y+9	; 0x09
    1a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <Lcd_videnablePulse+0x280>
    1ab2:	9a 83       	std	Y+2, r25	; 0x02
    1ab4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1ab6:	a6 96       	adiw	r28, 0x26	; 38
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <Lcd_vidDisplayChar>:
void Lcd_vidDisplayChar(u8 chr)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <Lcd_vidDisplayChar+0x6>
    1ace:	0f 92       	push	r0
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
	0b1101  1001

	1101   0000
	1001   0000
*/
	u8 loc_MSB = (chr & ~LCD_MASK);
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	80 7f       	andi	r24, 0xF0	; 240
    1ada:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = (chr<<4);
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	82 95       	swap	r24
    1ae0:	80 7f       	andi	r24, 0xF0	; 240
    1ae2:	89 83       	std	Y+1, r24	; 0x01
	//RS->1
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_HIGH);
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	61 e0       	ldi	r22, 0x01	; 1
    1ae8:	41 e0       	ldi	r20, 0x01	; 1
    1aea:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	6a 81       	ldd	r22, Y+2	; 0x02
    1af2:	4f e0       	ldi	r20, 0x0F	; 15
    1af4:	0e 94 7e 17 	call	0x2efc	; 0x2efc <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1af8:	0e 94 17 0c 	call	0x182e	; 0x182e <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	69 81       	ldd	r22, Y+1	; 0x01
    1b00:	4f e0       	ldi	r20, 0x0F	; 15
    1b02:	0e 94 7e 17 	call	0x2efc	; 0x2efc <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1b06:	0e 94 17 0c 	call	0x182e	; 0x182e <Lcd_videnablePulse>
}
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <Lcd_vidCmd>:
void Lcd_vidCmd(lcd_Cmd_t cmd)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <Lcd_vidCmd+0x6>
    1b1c:	0f 92       	push	r0
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_MSB = cmd & ~LCD_MASK;
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	80 7f       	andi	r24, 0xF0	; 240
    1b28:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_LSB = cmd<<4;
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	82 95       	swap	r24
    1b2e:	80 7f       	andi	r24, 0xF0	; 240
    1b30:	89 83       	std	Y+1, r24	; 0x01
	//RS->0
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN1, DIO_LOW);
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	61 e0       	ldi	r22, 0x01	; 1
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>

	//write data MSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_MSB, LCD_MASK);
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	6a 81       	ldd	r22, Y+2	; 0x02
    1b40:	4f e0       	ldi	r20, 0x0F	; 15
    1b42:	0e 94 7e 17 	call	0x2efc	; 0x2efc <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1b46:	0e 94 17 0c 	call	0x182e	; 0x182e <Lcd_videnablePulse>

	//write data LSB to LCD
	Dio_vidWriteChanelGroup(DIO_PORTA, loc_LSB, LCD_MASK);
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	69 81       	ldd	r22, Y+1	; 0x01
    1b4e:	4f e0       	ldi	r20, 0x0F	; 15
    1b50:	0e 94 7e 17 	call	0x2efc	; 0x2efc <Dio_vidWriteChanelGroup>
	//send Enable pulse
	Lcd_videnablePulse();
    1b54:	0e 94 17 0c 	call	0x182e	; 0x182e <Lcd_videnablePulse>
}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <Lcd_vidRowColumn>:

void Lcd_vidRowColumn(u8 row, u8 col)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <Lcd_vidRowColumn+0x6>
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <Lcd_vidRowColumn+0x8>
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	3c 83       	std	Y+4, r19	; 0x04
    1b7c:	2b 83       	std	Y+3, r18	; 0x03
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	31 f0       	breq	.+12     	; 0x1b92 <Lcd_vidRowColumn+0x2e>
    1b86:	2b 81       	ldd	r18, Y+3	; 0x03
    1b88:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8a:	21 30       	cpi	r18, 0x01	; 1
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	31 f0       	breq	.+12     	; 0x1b9c <Lcd_vidRowColumn+0x38>
    1b90:	09 c0       	rjmp	.+18     	; 0x1ba4 <Lcd_vidRowColumn+0x40>
	{
	case 0:
		Lcd_vidCmd(0x80 + col);
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	80 58       	subi	r24, 0x80	; 128
    1b96:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Lcd_vidCmd>
    1b9a:	04 c0       	rjmp	.+8      	; 0x1ba4 <Lcd_vidRowColumn+0x40>
		break;

	case 1:
		Lcd_vidCmd(0xC0 + col);
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	80 54       	subi	r24, 0x40	; 64
    1ba0:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Lcd_vidCmd>
		break;
	}
}
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <Lcd_vidDisplyStr>:
void Lcd_vidDisplyStr(u8* str)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <Lcd_vidDisplyStr+0x6>
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	0a c0       	rjmp	.+20     	; 0x1bd6 <Lcd_vidDisplyStr+0x24>
	while (*str != '\0')
	{
		Lcd_vidDisplayChar(*str);
    1bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc6:	80 81       	ld	r24, Z
    1bc8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <Lcd_vidDisplayChar>
		str++;
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	9a 83       	std	Y+2, r25	; 0x02
    1bd4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
}
void Lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
    1bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bda:	80 81       	ld	r24, Z
    1bdc:	88 23       	and	r24, r24
    1bde:	89 f7       	brne	.-30     	; 0x1bc2 <Lcd_vidDisplyStr+0x10>
	{
		Lcd_vidDisplayChar(*str);
		str++;
	}
}
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <Lcd_vidDisplyInt>:

void Lcd_vidDisplyInt(u32 num)
{
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
    1bf2:	29 97       	sbiw	r28, 0x09	; 9
    1bf4:	0f b6       	in	r0, 0x3f	; 63
    1bf6:	f8 94       	cli
    1bf8:	de bf       	out	0x3e, r29	; 62
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	cd bf       	out	0x3d, r28	; 61
    1bfe:	6e 83       	std	Y+6, r22	; 0x06
    1c00:	7f 83       	std	Y+7, r23	; 0x07
    1c02:	88 87       	std	Y+8, r24	; 0x08
    1c04:	99 87       	std	Y+9, r25	; 0x09
	u8 buffer[5];
	sprintf(buffer,"%d",num);
    1c06:	8d b7       	in	r24, 0x3d	; 61
    1c08:	9e b7       	in	r25, 0x3e	; 62
    1c0a:	08 97       	sbiw	r24, 0x08	; 8
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	9e bf       	out	0x3e, r25	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	8d bf       	out	0x3d, r24	; 61
    1c16:	ed b7       	in	r30, 0x3d	; 61
    1c18:	fe b7       	in	r31, 0x3e	; 62
    1c1a:	31 96       	adiw	r30, 0x01	; 1
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	91 83       	std	Z+1, r25	; 0x01
    1c22:	80 83       	st	Z, r24
    1c24:	80 e6       	ldi	r24, 0x60	; 96
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	93 83       	std	Z+3, r25	; 0x03
    1c2a:	82 83       	std	Z+2, r24	; 0x02
    1c2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c30:	a8 85       	ldd	r26, Y+8	; 0x08
    1c32:	b9 85       	ldd	r27, Y+9	; 0x09
    1c34:	84 83       	std	Z+4, r24	; 0x04
    1c36:	95 83       	std	Z+5, r25	; 0x05
    1c38:	a6 83       	std	Z+6, r26	; 0x06
    1c3a:	b7 83       	std	Z+7, r27	; 0x07
    1c3c:	0e 94 db 19 	call	0x33b6	; 0x33b6 <sprintf>
    1c40:	8d b7       	in	r24, 0x3d	; 61
    1c42:	9e b7       	in	r25, 0x3e	; 62
    1c44:	08 96       	adiw	r24, 0x08	; 8
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	9e bf       	out	0x3e, r25	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	8d bf       	out	0x3d, r24	; 61
	Lcd_vidDisplyStr(buffer);
    1c50:	ce 01       	movw	r24, r28
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <Lcd_vidDisplyStr>
}
    1c58:	29 96       	adiw	r28, 0x09	; 9
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <Keypad_vidinit>:
		{'7','8','9','C'},
		{'*','0','#','D'}
};

void Keypad_vidinit(void)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Rows Pins as input	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN0, DIO_INPUT);
    1c72:	82 e0       	ldi	r24, 0x02	; 2
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN1, DIO_INPUT);
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN2, DIO_INPUT);
    1c86:	82 e0       	ldi	r24, 0x02	; 2
    1c88:	62 e0       	ldi	r22, 0x02	; 2
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN3, DIO_INPUT);
    1c90:	82 e0       	ldi	r24, 0x02	; 2
    1c92:	63 e0       	ldi	r22, 0x03	; 3
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>

	/*	Configure Columns Pins as output	*/
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN4, DIO_OUTPUT);
    1c9a:	82 e0       	ldi	r24, 0x02	; 2
    1c9c:	64 e0       	ldi	r22, 0x04	; 4
    1c9e:	41 e0       	ldi	r20, 0x01	; 1
    1ca0:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN5, DIO_OUTPUT);
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	65 e0       	ldi	r22, 0x05	; 5
    1ca8:	41 e0       	ldi	r20, 0x01	; 1
    1caa:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN6, DIO_OUTPUT);
    1cae:	82 e0       	ldi	r24, 0x02	; 2
    1cb0:	66 e0       	ldi	r22, 0x06	; 6
    1cb2:	41 e0       	ldi	r20, 0x01	; 1
    1cb4:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTC, DIO_PIN7, DIO_OUTPUT);
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	67 e0       	ldi	r22, 0x07	; 7
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>

	/*	initialize output columns with high	*/
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	64 e0       	ldi	r22, 0x04	; 4
    1cc6:	41 e0       	ldi	r20, 0x01	; 1
    1cc8:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	65 e0       	ldi	r22, 0x05	; 5
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1cd6:	82 e0       	ldi	r24, 0x02	; 2
    1cd8:	66 e0       	ldi	r22, 0x06	; 6
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	67 e0       	ldi	r22, 0x07	; 7
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
}
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <Keypad_udtIsPressed>:

boolean Keypad_udtIsPressed()
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	0f 92       	push	r0
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
	if (
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <Dio_udtreadChanel>
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	91 f0       	breq	.+36     	; 0x1d2a <Keypad_udtIsPressed+0x3a>
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	61 e0       	ldi	r22, 0x01	; 1
    1d0a:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <Dio_udtreadChanel>
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <Keypad_udtIsPressed+0x3a>
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	62 e0       	ldi	r22, 0x02	; 2
    1d16:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <Dio_udtreadChanel>
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	31 f0       	breq	.+12     	; 0x1d2a <Keypad_udtIsPressed+0x3a>
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	63 e0       	ldi	r22, 0x03	; 3
    1d22:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <Dio_udtreadChanel>
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	19 f4       	brne	.+6      	; 0x1d30 <Keypad_udtIsPressed+0x40>
			(Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_HIGH)||
			(Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_HIGH)||
			(Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_HIGH)
	)
	{
		return TRUE;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <Keypad_udtIsPressed+0x42>
	}
	else
	{
		return FALSE;
    1d30:	19 82       	std	Y+1, r1	; 0x01
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <Keypad_udtgetRow>:

kp_row_t Keypad_udtgetRow(void)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_row = KP_NOROW;
    1d46:	84 e0       	ldi	r24, 0x04	; 4
    1d48:	89 83       	std	Y+1, r24	; 0x01

	if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN0) == DIO_HIGH)
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <Dio_udtreadChanel>
    1d52:	81 30       	cpi	r24, 0x01	; 1
    1d54:	11 f4       	brne	.+4      	; 0x1d5a <Keypad_udtgetRow+0x1e>
	{
		loc_row=KP_ROW0;
    1d56:	19 82       	std	Y+1, r1	; 0x01
    1d58:	1d c0       	rjmp	.+58     	; 0x1d94 <Keypad_udtgetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN1) == DIO_HIGH)
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	61 e0       	ldi	r22, 0x01	; 1
    1d5e:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <Dio_udtreadChanel>
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	19 f4       	brne	.+6      	; 0x1d6c <Keypad_udtgetRow+0x30>
	{
		loc_row=KP_ROW1;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	14 c0       	rjmp	.+40     	; 0x1d94 <Keypad_udtgetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN2) == DIO_HIGH)
    1d6c:	82 e0       	ldi	r24, 0x02	; 2
    1d6e:	62 e0       	ldi	r22, 0x02	; 2
    1d70:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <Dio_udtreadChanel>
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	19 f4       	brne	.+6      	; 0x1d7e <Keypad_udtgetRow+0x42>
	{
		loc_row=KP_ROW2;
    1d78:	82 e0       	ldi	r24, 0x02	; 2
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	0b c0       	rjmp	.+22     	; 0x1d94 <Keypad_udtgetRow+0x58>
	}
	else if (Dio_udtreadChanel(DIO_PORTC, DIO_PIN3) == DIO_HIGH)
    1d7e:	82 e0       	ldi	r24, 0x02	; 2
    1d80:	63 e0       	ldi	r22, 0x03	; 3
    1d82:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <Dio_udtreadChanel>
    1d86:	81 30       	cpi	r24, 0x01	; 1
    1d88:	19 f4       	brne	.+6      	; 0x1d90 <Keypad_udtgetRow+0x54>
	{
		loc_row=KP_ROW3;
    1d8a:	83 e0       	ldi	r24, 0x03	; 3
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <Keypad_udtgetRow+0x58>
	}
	else
	{
		loc_row = KP_NOROW;
    1d90:	84 e0       	ldi	r24, 0x04	; 4
    1d92:	89 83       	std	Y+1, r24	; 0x01
	}
	return loc_row;
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d96:	0f 90       	pop	r0
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <Keypad_udtgetCol>:

kp_col_t Keypad_udtgetCol(kp_row_t current_row)
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <Keypad_udtgetCol+0x6>
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	8a 83       	std	Y+2, r24	; 0x02
	kp_col_t loc_column = KP_NOCOL;
    1daa:	84 e0       	ldi	r24, 0x04	; 4
    1dac:	89 83       	std	Y+1, r24	; 0x01

	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_HIGH);
    1dae:	82 e0       	ldi	r24, 0x02	; 2
    1db0:	64 e0       	ldi	r22, 0x04	; 4
    1db2:	41 e0       	ldi	r20, 0x01	; 1
    1db4:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	65 e0       	ldi	r22, 0x05	; 5
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1dc2:	82 e0       	ldi	r24, 0x02	; 2
    1dc4:	66 e0       	ldi	r22, 0x06	; 6
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
	Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1dcc:	82 e0       	ldi	r24, 0x02	; 2
    1dce:	67 e0       	ldi	r22, 0x07	; 7
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>

	if (Keypad_udtgetRow() == current_row)
    1dd6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <Keypad_udtgetRow>
    1dda:	98 2f       	mov	r25, r24
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	98 17       	cp	r25, r24
    1de0:	11 f4       	brne	.+4      	; 0x1de6 <Keypad_udtgetCol+0x48>
	{
		loc_column = KP_COL0;
    1de2:	19 82       	std	Y+1, r1	; 0x01
    1de4:	56 c0       	rjmp	.+172    	; 0x1e92 <Keypad_udtgetCol+0xf4>
	}
	else
	{
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	64 e0       	ldi	r22, 0x04	; 4
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_HIGH);
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	65 e0       	ldi	r22, 0x05	; 5
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	66 e0       	ldi	r22, 0x06	; 6
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
		Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1e04:	82 e0       	ldi	r24, 0x02	; 2
    1e06:	67 e0       	ldi	r22, 0x07	; 7
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>

		if (Keypad_udtgetRow() == current_row)
    1e0e:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <Keypad_udtgetRow>
    1e12:	98 2f       	mov	r25, r24
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	98 17       	cp	r25, r24
    1e18:	19 f4       	brne	.+6      	; 0x1e20 <Keypad_udtgetCol+0x82>
		{
			loc_column = KP_COL1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	39 c0       	rjmp	.+114    	; 0x1e92 <Keypad_udtgetCol+0xf4>
		}
		else
		{
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1e20:	82 e0       	ldi	r24, 0x02	; 2
    1e22:	64 e0       	ldi	r22, 0x04	; 4
    1e24:	40 e0       	ldi	r20, 0x00	; 0
    1e26:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	65 e0       	ldi	r22, 0x05	; 5
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_HIGH);
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	66 e0       	ldi	r22, 0x06	; 6
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
			Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_LOW);
    1e3e:	82 e0       	ldi	r24, 0x02	; 2
    1e40:	67 e0       	ldi	r22, 0x07	; 7
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>

			if (Keypad_udtgetRow() == current_row)
    1e48:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <Keypad_udtgetRow>
    1e4c:	98 2f       	mov	r25, r24
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	98 17       	cp	r25, r24
    1e52:	19 f4       	brne	.+6      	; 0x1e5a <Keypad_udtgetCol+0xbc>
			{
				loc_column = KP_COL2;
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	89 83       	std	Y+1, r24	; 0x01
    1e58:	1c c0       	rjmp	.+56     	; 0x1e92 <Keypad_udtgetCol+0xf4>
			}
			else
			{
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN4, DIO_LOW);
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	64 e0       	ldi	r22, 0x04	; 4
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN5, DIO_LOW);
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	65 e0       	ldi	r22, 0x05	; 5
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN6, DIO_LOW);
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	66 e0       	ldi	r22, 0x06	; 6
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
				Dio_vidwriteChanel(DIO_PORTC, DIO_PIN7, DIO_HIGH);
    1e78:	82 e0       	ldi	r24, 0x02	; 2
    1e7a:	67 e0       	ldi	r22, 0x07	; 7
    1e7c:	41 e0       	ldi	r20, 0x01	; 1
    1e7e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>

				if (Keypad_udtgetRow() == current_row)
    1e82:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <Keypad_udtgetRow>
    1e86:	98 2f       	mov	r25, r24
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	98 17       	cp	r25, r24
    1e8c:	11 f4       	brne	.+4      	; 0x1e92 <Keypad_udtgetCol+0xf4>
				{
					loc_column = KP_COL3;
    1e8e:	83 e0       	ldi	r24, 0x03	; 3
    1e90:	89 83       	std	Y+1, r24	; 0x01

				}
			}
		}
	}
	return loc_column;
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret

00001e9e <Keypad_u8GetButton>:

u8 Keypad_u8GetButton(void)
{
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	00 d0       	rcall	.+0      	; 0x1ea4 <Keypad_u8GetButton+0x6>
    1ea4:	0f 92       	push	r0
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
	kp_row_t loc_row = KP_NOROW;
    1eaa:	84 e0       	ldi	r24, 0x04	; 4
    1eac:	8b 83       	std	Y+3, r24	; 0x03
	kp_col_t loc_col = KP_NOCOL;
    1eae:	84 e0       	ldi	r24, 0x04	; 4
    1eb0:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_button = 0xFF;
    1eb2:	8f ef       	ldi	r24, 0xFF	; 255
    1eb4:	89 83       	std	Y+1, r24	; 0x01

	Keypad_vidinit();
    1eb6:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <Keypad_vidinit>

	if (Keypad_udtIsPressed() == TRUE)
    1eba:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <Keypad_udtIsPressed>
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	c9 f4       	brne	.+50     	; 0x1ef4 <Keypad_u8GetButton+0x56>
	{
		loc_row = Keypad_udtgetRow();
    1ec2:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <Keypad_udtgetRow>
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
		loc_col = Keypad_udtgetCol(loc_row);
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <Keypad_udtgetCol>
    1ece:	8a 83       	std	Y+2, r24	; 0x02
		loc_button = Keypad_Layout[loc_row][loc_col];
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	48 2f       	mov	r20, r24
    1ed4:	50 e0       	ldi	r21, 0x00	; 0
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	ca 01       	movw	r24, r20
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	82 0f       	add	r24, r18
    1ee8:	93 1f       	adc	r25, r19
    1eea:	fc 01       	movw	r30, r24
    1eec:	e5 59       	subi	r30, 0x95	; 149
    1eee:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef0:	80 81       	ld	r24, Z
    1ef2:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return loc_button;
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <Eeprom24C16_Init>:

#include <util/delay.h>
#include "Eeprom24C16.h"
#include "Lcd.h"
void Eeprom24C16_Init(void)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
	I2C_MasterInit();
    1f0a:	0e 94 90 14 	call	0x2920	; 0x2920 <I2C_MasterInit>
}
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <Eeprom24C16_WriteByte>:

/*	addr = 0 to 2047	*/
void Eeprom24C16_WriteByte(u16 addr, u8 data)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	a1 97       	sbiw	r28, 0x21	; 33
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	98 a3       	std	Y+32, r25	; 0x20
    1f2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f2c:	69 a3       	std	Y+33, r22	; 0x21
	u8 loc_pageNo = (addr/256);
    1f2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f30:	98 a1       	ldd	r25, Y+32	; 0x20
    1f32:	89 2f       	mov	r24, r25
    1f34:	99 27       	eor	r25, r25
    1f36:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 loc_byteNo = (addr%256);
    1f38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f3a:	8d 8f       	std	Y+29, r24	; 0x1d

	I2C_StartCondition();
    1f3c:	0e 94 c7 14 	call	0x298e	; 0x298e <I2C_StartCondition>
	I2C_Send_SlaveAddressWriteOperation(0x50 | loc_pageNo);
    1f40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f42:	80 65       	ori	r24, 0x50	; 80
    1f44:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(loc_byteNo);
    1f48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f4a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <I2C_WriteByte>
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	a0 ea       	ldi	r26, 0xA0	; 160
    1f54:	b0 e4       	ldi	r27, 0x40	; 64
    1f56:	89 8f       	std	Y+25, r24	; 0x19
    1f58:	9a 8f       	std	Y+26, r25	; 0x1a
    1f5a:	ab 8f       	std	Y+27, r26	; 0x1b
    1f5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4a e7       	ldi	r20, 0x7A	; 122
    1f6c:	55 e4       	ldi	r21, 0x45	; 69
    1f6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	8d 8b       	std	Y+21, r24	; 0x15
    1f78:	9e 8b       	std	Y+22, r25	; 0x16
    1f7a:	af 8b       	std	Y+23, r26	; 0x17
    1f7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f80:	7e 89       	ldd	r23, Y+22	; 0x16
    1f82:	8f 89       	ldd	r24, Y+23	; 0x17
    1f84:	98 8d       	ldd	r25, Y+24	; 0x18
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e8       	ldi	r20, 0x80	; 128
    1f8c:	5f e3       	ldi	r21, 0x3F	; 63
    1f8e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f92:	88 23       	and	r24, r24
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <Eeprom24C16_WriteByte+0x8c>
		__ticks = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9c 8b       	std	Y+20, r25	; 0x14
    1f9c:	8b 8b       	std	Y+19, r24	; 0x13
    1f9e:	3f c0       	rjmp	.+126    	; 0x201e <Eeprom24C16_WriteByte+0x10a>
	else if (__tmp > 65535)
    1fa0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	4c f5       	brge	.+82     	; 0x200a <Eeprom24C16_WriteByte+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1fba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e2       	ldi	r20, 0x20	; 32
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9c 8b       	std	Y+20, r25	; 0x14
    1fde:	8b 8b       	std	Y+19, r24	; 0x13
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <Eeprom24C16_WriteByte+0xec>
    1fe2:	80 e9       	ldi	r24, 0x90	; 144
    1fe4:	91 e0       	ldi	r25, 0x01	; 1
    1fe6:	9a 8b       	std	Y+18, r25	; 0x12
    1fe8:	89 8b       	std	Y+17, r24	; 0x11
    1fea:	89 89       	ldd	r24, Y+17	; 0x11
    1fec:	9a 89       	ldd	r25, Y+18	; 0x12
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <Eeprom24C16_WriteByte+0xda>
    1ff2:	9a 8b       	std	Y+18, r25	; 0x12
    1ff4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	9c 8b       	std	Y+20, r25	; 0x14
    1ffe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2000:	8b 89       	ldd	r24, Y+19	; 0x13
    2002:	9c 89       	ldd	r25, Y+20	; 0x14
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	69 f7       	brne	.-38     	; 0x1fe2 <Eeprom24C16_WriteByte+0xce>
    2008:	14 c0       	rjmp	.+40     	; 0x2032 <Eeprom24C16_WriteByte+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200a:	6d 89       	ldd	r22, Y+21	; 0x15
    200c:	7e 89       	ldd	r23, Y+22	; 0x16
    200e:	8f 89       	ldd	r24, Y+23	; 0x17
    2010:	98 8d       	ldd	r25, Y+24	; 0x18
    2012:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9c 8b       	std	Y+20, r25	; 0x14
    201c:	8b 8b       	std	Y+19, r24	; 0x13
    201e:	8b 89       	ldd	r24, Y+19	; 0x13
    2020:	9c 89       	ldd	r25, Y+20	; 0x14
    2022:	98 8b       	std	Y+16, r25	; 0x10
    2024:	8f 87       	std	Y+15, r24	; 0x0f
    2026:	8f 85       	ldd	r24, Y+15	; 0x0f
    2028:	98 89       	ldd	r25, Y+16	; 0x10
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <Eeprom24C16_WriteByte+0x116>
    202e:	98 8b       	std	Y+16, r25	; 0x10
    2030:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	I2C_WriteByte(data);
    2032:	89 a1       	ldd	r24, Y+33	; 0x21
    2034:	0e 94 13 15 	call	0x2a26	; 0x2a26 <I2C_WriteByte>
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a0 ea       	ldi	r26, 0xA0	; 160
    203e:	b0 e4       	ldi	r27, 0x40	; 64
    2040:	8b 87       	std	Y+11, r24	; 0x0b
    2042:	9c 87       	std	Y+12, r25	; 0x0c
    2044:	ad 87       	std	Y+13, r26	; 0x0d
    2046:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2048:	6b 85       	ldd	r22, Y+11	; 0x0b
    204a:	7c 85       	ldd	r23, Y+12	; 0x0c
    204c:	8d 85       	ldd	r24, Y+13	; 0x0d
    204e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a e7       	ldi	r20, 0x7A	; 122
    2056:	55 e4       	ldi	r21, 0x45	; 69
    2058:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	8f 83       	std	Y+7, r24	; 0x07
    2062:	98 87       	std	Y+8, r25	; 0x08
    2064:	a9 87       	std	Y+9, r26	; 0x09
    2066:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2068:	6f 81       	ldd	r22, Y+7	; 0x07
    206a:	78 85       	ldd	r23, Y+8	; 0x08
    206c:	89 85       	ldd	r24, Y+9	; 0x09
    206e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e8       	ldi	r20, 0x80	; 128
    2076:	5f e3       	ldi	r21, 0x3F	; 63
    2078:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    207c:	88 23       	and	r24, r24
    207e:	2c f4       	brge	.+10     	; 0x208a <Eeprom24C16_WriteByte+0x176>
		__ticks = 1;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	8d 83       	std	Y+5, r24	; 0x05
    2088:	3f c0       	rjmp	.+126    	; 0x2108 <Eeprom24C16_WriteByte+0x1f4>
	else if (__tmp > 65535)
    208a:	6f 81       	ldd	r22, Y+7	; 0x07
    208c:	78 85       	ldd	r23, Y+8	; 0x08
    208e:	89 85       	ldd	r24, Y+9	; 0x09
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	4f e7       	ldi	r20, 0x7F	; 127
    2098:	57 e4       	ldi	r21, 0x47	; 71
    209a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    209e:	18 16       	cp	r1, r24
    20a0:	4c f5       	brge	.+82     	; 0x20f4 <Eeprom24C16_WriteByte+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e2       	ldi	r20, 0x20	; 32
    20b0:	51 e4       	ldi	r21, 0x41	; 65
    20b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
    20ca:	0f c0       	rjmp	.+30     	; 0x20ea <Eeprom24C16_WriteByte+0x1d6>
    20cc:	80 e9       	ldi	r24, 0x90	; 144
    20ce:	91 e0       	ldi	r25, 0x01	; 1
    20d0:	9c 83       	std	Y+4, r25	; 0x04
    20d2:	8b 83       	std	Y+3, r24	; 0x03
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <Eeprom24C16_WriteByte+0x1c4>
    20dc:	9c 83       	std	Y+4, r25	; 0x04
    20de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ea:	8d 81       	ldd	r24, Y+5	; 0x05
    20ec:	9e 81       	ldd	r25, Y+6	; 0x06
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	69 f7       	brne	.-38     	; 0x20cc <Eeprom24C16_WriteByte+0x1b8>
    20f2:	14 c0       	rjmp	.+40     	; 0x211c <Eeprom24C16_WriteByte+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f4:	6f 81       	ldd	r22, Y+7	; 0x07
    20f6:	78 85       	ldd	r23, Y+8	; 0x08
    20f8:	89 85       	ldd	r24, Y+9	; 0x09
    20fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9e 83       	std	Y+6, r25	; 0x06
    2106:	8d 83       	std	Y+5, r24	; 0x05
    2108:	8d 81       	ldd	r24, Y+5	; 0x05
    210a:	9e 81       	ldd	r25, Y+6	; 0x06
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <Eeprom24C16_WriteByte+0x200>
    2118:	9a 83       	std	Y+2, r25	; 0x02
    211a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	I2C_StopCondition();
    211c:	0e 94 00 15 	call	0x2a00	; 0x2a00 <I2C_StopCondition>
}
    2120:	a1 96       	adiw	r28, 0x21	; 33
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <Eeprom24C16_ReadByte>:

/*	addr = 0 to 2047	*/
u8 Eeprom24C16_ReadByte(u16 addr)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	af 97       	sbiw	r28, 0x2f	; 47
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	9f a7       	std	Y+47, r25	; 0x2f
    2148:	8e a7       	std	Y+46, r24	; 0x2e
	u8 loc_pageNo = (addr/256);
    214a:	8e a5       	ldd	r24, Y+46	; 0x2e
    214c:	9f a5       	ldd	r25, Y+47	; 0x2f
    214e:	89 2f       	mov	r24, r25
    2150:	99 27       	eor	r25, r25
    2152:	8d a7       	std	Y+45, r24	; 0x2d
	u8 loc_byteNo = (addr%256);
    2154:	8e a5       	ldd	r24, Y+46	; 0x2e
    2156:	8c a7       	std	Y+44, r24	; 0x2c
	u8 loc_dataRead=0;
    2158:	1b a6       	std	Y+43, r1	; 0x2b
	I2C_StartCondition();
    215a:	0e 94 c7 14 	call	0x298e	; 0x298e <I2C_StartCondition>
	I2C_Send_SlaveAddressWriteOperation(0x50 | loc_pageNo );
    215e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2160:	80 65       	ori	r24, 0x50	; 80
    2162:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <I2C_Send_SlaveAddressWriteOperation>
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	a0 ea       	ldi	r26, 0xA0	; 160
    216c:	b0 e4       	ldi	r27, 0x40	; 64
    216e:	8f a3       	std	Y+39, r24	; 0x27
    2170:	98 a7       	std	Y+40, r25	; 0x28
    2172:	a9 a7       	std	Y+41, r26	; 0x29
    2174:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2176:	6f a1       	ldd	r22, Y+39	; 0x27
    2178:	78 a5       	ldd	r23, Y+40	; 0x28
    217a:	89 a5       	ldd	r24, Y+41	; 0x29
    217c:	9a a5       	ldd	r25, Y+42	; 0x2a
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	4a e7       	ldi	r20, 0x7A	; 122
    2184:	55 e4       	ldi	r21, 0x45	; 69
    2186:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	8b a3       	std	Y+35, r24	; 0x23
    2190:	9c a3       	std	Y+36, r25	; 0x24
    2192:	ad a3       	std	Y+37, r26	; 0x25
    2194:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2196:	6b a1       	ldd	r22, Y+35	; 0x23
    2198:	7c a1       	ldd	r23, Y+36	; 0x24
    219a:	8d a1       	ldd	r24, Y+37	; 0x25
    219c:	9e a1       	ldd	r25, Y+38	; 0x26
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	40 e8       	ldi	r20, 0x80	; 128
    21a4:	5f e3       	ldi	r21, 0x3F	; 63
    21a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21aa:	88 23       	and	r24, r24
    21ac:	2c f4       	brge	.+10     	; 0x21b8 <Eeprom24C16_ReadByte+0x86>
		__ticks = 1;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	9a a3       	std	Y+34, r25	; 0x22
    21b4:	89 a3       	std	Y+33, r24	; 0x21
    21b6:	3f c0       	rjmp	.+126    	; 0x2236 <Eeprom24C16_ReadByte+0x104>
	else if (__tmp > 65535)
    21b8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ba:	7c a1       	ldd	r23, Y+36	; 0x24
    21bc:	8d a1       	ldd	r24, Y+37	; 0x25
    21be:	9e a1       	ldd	r25, Y+38	; 0x26
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	3f ef       	ldi	r19, 0xFF	; 255
    21c4:	4f e7       	ldi	r20, 0x7F	; 127
    21c6:	57 e4       	ldi	r21, 0x47	; 71
    21c8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21cc:	18 16       	cp	r1, r24
    21ce:	4c f5       	brge	.+82     	; 0x2222 <Eeprom24C16_ReadByte+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d0:	6f a1       	ldd	r22, Y+39	; 0x27
    21d2:	78 a5       	ldd	r23, Y+40	; 0x28
    21d4:	89 a5       	ldd	r24, Y+41	; 0x29
    21d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e2       	ldi	r20, 0x20	; 32
    21de:	51 e4       	ldi	r21, 0x41	; 65
    21e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9a a3       	std	Y+34, r25	; 0x22
    21f6:	89 a3       	std	Y+33, r24	; 0x21
    21f8:	0f c0       	rjmp	.+30     	; 0x2218 <Eeprom24C16_ReadByte+0xe6>
    21fa:	80 e9       	ldi	r24, 0x90	; 144
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	98 a3       	std	Y+32, r25	; 0x20
    2200:	8f 8f       	std	Y+31, r24	; 0x1f
    2202:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2204:	98 a1       	ldd	r25, Y+32	; 0x20
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <Eeprom24C16_ReadByte+0xd4>
    220a:	98 a3       	std	Y+32, r25	; 0x20
    220c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    220e:	89 a1       	ldd	r24, Y+33	; 0x21
    2210:	9a a1       	ldd	r25, Y+34	; 0x22
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	9a a3       	std	Y+34, r25	; 0x22
    2216:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2218:	89 a1       	ldd	r24, Y+33	; 0x21
    221a:	9a a1       	ldd	r25, Y+34	; 0x22
    221c:	00 97       	sbiw	r24, 0x00	; 0
    221e:	69 f7       	brne	.-38     	; 0x21fa <Eeprom24C16_ReadByte+0xc8>
    2220:	14 c0       	rjmp	.+40     	; 0x224a <Eeprom24C16_ReadByte+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2222:	6b a1       	ldd	r22, Y+35	; 0x23
    2224:	7c a1       	ldd	r23, Y+36	; 0x24
    2226:	8d a1       	ldd	r24, Y+37	; 0x25
    2228:	9e a1       	ldd	r25, Y+38	; 0x26
    222a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	9a a3       	std	Y+34, r25	; 0x22
    2234:	89 a3       	std	Y+33, r24	; 0x21
    2236:	89 a1       	ldd	r24, Y+33	; 0x21
    2238:	9a a1       	ldd	r25, Y+34	; 0x22
    223a:	9e 8f       	std	Y+30, r25	; 0x1e
    223c:	8d 8f       	std	Y+29, r24	; 0x1d
    223e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2240:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	f1 f7       	brne	.-4      	; 0x2242 <Eeprom24C16_ReadByte+0x110>
    2246:	9e 8f       	std	Y+30, r25	; 0x1e
    2248:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	I2C_WriteByte(loc_byteNo);
    224a:	8c a5       	ldd	r24, Y+44	; 0x2c
    224c:	0e 94 13 15 	call	0x2a26	; 0x2a26 <I2C_WriteByte>
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	a0 ea       	ldi	r26, 0xA0	; 160
    2256:	b0 e4       	ldi	r27, 0x40	; 64
    2258:	89 8f       	std	Y+25, r24	; 0x19
    225a:	9a 8f       	std	Y+26, r25	; 0x1a
    225c:	ab 8f       	std	Y+27, r26	; 0x1b
    225e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2260:	69 8d       	ldd	r22, Y+25	; 0x19
    2262:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2264:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2266:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	4a e7       	ldi	r20, 0x7A	; 122
    226e:	55 e4       	ldi	r21, 0x45	; 69
    2270:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	8d 8b       	std	Y+21, r24	; 0x15
    227a:	9e 8b       	std	Y+22, r25	; 0x16
    227c:	af 8b       	std	Y+23, r26	; 0x17
    227e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2280:	6d 89       	ldd	r22, Y+21	; 0x15
    2282:	7e 89       	ldd	r23, Y+22	; 0x16
    2284:	8f 89       	ldd	r24, Y+23	; 0x17
    2286:	98 8d       	ldd	r25, Y+24	; 0x18
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e8       	ldi	r20, 0x80	; 128
    228e:	5f e3       	ldi	r21, 0x3F	; 63
    2290:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2294:	88 23       	and	r24, r24
    2296:	2c f4       	brge	.+10     	; 0x22a2 <Eeprom24C16_ReadByte+0x170>
		__ticks = 1;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9c 8b       	std	Y+20, r25	; 0x14
    229e:	8b 8b       	std	Y+19, r24	; 0x13
    22a0:	3f c0       	rjmp	.+126    	; 0x2320 <Eeprom24C16_ReadByte+0x1ee>
	else if (__tmp > 65535)
    22a2:	6d 89       	ldd	r22, Y+21	; 0x15
    22a4:	7e 89       	ldd	r23, Y+22	; 0x16
    22a6:	8f 89       	ldd	r24, Y+23	; 0x17
    22a8:	98 8d       	ldd	r25, Y+24	; 0x18
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	3f ef       	ldi	r19, 0xFF	; 255
    22ae:	4f e7       	ldi	r20, 0x7F	; 127
    22b0:	57 e4       	ldi	r21, 0x47	; 71
    22b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22b6:	18 16       	cp	r1, r24
    22b8:	4c f5       	brge	.+82     	; 0x230c <Eeprom24C16_ReadByte+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ba:	69 8d       	ldd	r22, Y+25	; 0x19
    22bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e2       	ldi	r20, 0x20	; 32
    22c8:	51 e4       	ldi	r21, 0x41	; 65
    22ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	bc 01       	movw	r22, r24
    22d4:	cd 01       	movw	r24, r26
    22d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22da:	dc 01       	movw	r26, r24
    22dc:	cb 01       	movw	r24, r22
    22de:	9c 8b       	std	Y+20, r25	; 0x14
    22e0:	8b 8b       	std	Y+19, r24	; 0x13
    22e2:	0f c0       	rjmp	.+30     	; 0x2302 <Eeprom24C16_ReadByte+0x1d0>
    22e4:	80 e9       	ldi	r24, 0x90	; 144
    22e6:	91 e0       	ldi	r25, 0x01	; 1
    22e8:	9a 8b       	std	Y+18, r25	; 0x12
    22ea:	89 8b       	std	Y+17, r24	; 0x11
    22ec:	89 89       	ldd	r24, Y+17	; 0x11
    22ee:	9a 89       	ldd	r25, Y+18	; 0x12
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <Eeprom24C16_ReadByte+0x1be>
    22f4:	9a 8b       	std	Y+18, r25	; 0x12
    22f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f8:	8b 89       	ldd	r24, Y+19	; 0x13
    22fa:	9c 89       	ldd	r25, Y+20	; 0x14
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	9c 8b       	std	Y+20, r25	; 0x14
    2300:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2302:	8b 89       	ldd	r24, Y+19	; 0x13
    2304:	9c 89       	ldd	r25, Y+20	; 0x14
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	69 f7       	brne	.-38     	; 0x22e4 <Eeprom24C16_ReadByte+0x1b2>
    230a:	14 c0       	rjmp	.+40     	; 0x2334 <Eeprom24C16_ReadByte+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230c:	6d 89       	ldd	r22, Y+21	; 0x15
    230e:	7e 89       	ldd	r23, Y+22	; 0x16
    2310:	8f 89       	ldd	r24, Y+23	; 0x17
    2312:	98 8d       	ldd	r25, Y+24	; 0x18
    2314:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9c 8b       	std	Y+20, r25	; 0x14
    231e:	8b 8b       	std	Y+19, r24	; 0x13
    2320:	8b 89       	ldd	r24, Y+19	; 0x13
    2322:	9c 89       	ldd	r25, Y+20	; 0x14
    2324:	98 8b       	std	Y+16, r25	; 0x10
    2326:	8f 87       	std	Y+15, r24	; 0x0f
    2328:	8f 85       	ldd	r24, Y+15	; 0x0f
    232a:	98 89       	ldd	r25, Y+16	; 0x10
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <Eeprom24C16_ReadByte+0x1fa>
    2330:	98 8b       	std	Y+16, r25	; 0x10
    2332:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	I2C_RepeatedStartCondition();
    2334:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <I2C_RepeatedStartCondition>
	I2C_Send_SlaveAddressReadOperation(0x50 | loc_pageNo);
    2338:	8d a5       	ldd	r24, Y+45	; 0x2d
    233a:	80 65       	ori	r24, 0x50	; 80
    233c:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <I2C_Send_SlaveAddressReadOperation>
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	a0 ea       	ldi	r26, 0xA0	; 160
    2346:	b0 e4       	ldi	r27, 0x40	; 64
    2348:	8b 87       	std	Y+11, r24	; 0x0b
    234a:	9c 87       	std	Y+12, r25	; 0x0c
    234c:	ad 87       	std	Y+13, r26	; 0x0d
    234e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2350:	6b 85       	ldd	r22, Y+11	; 0x0b
    2352:	7c 85       	ldd	r23, Y+12	; 0x0c
    2354:	8d 85       	ldd	r24, Y+13	; 0x0d
    2356:	9e 85       	ldd	r25, Y+14	; 0x0e
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	4a e7       	ldi	r20, 0x7A	; 122
    235e:	55 e4       	ldi	r21, 0x45	; 69
    2360:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	8f 83       	std	Y+7, r24	; 0x07
    236a:	98 87       	std	Y+8, r25	; 0x08
    236c:	a9 87       	std	Y+9, r26	; 0x09
    236e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e8       	ldi	r20, 0x80	; 128
    237e:	5f e3       	ldi	r21, 0x3F	; 63
    2380:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2384:	88 23       	and	r24, r24
    2386:	2c f4       	brge	.+10     	; 0x2392 <Eeprom24C16_ReadByte+0x260>
		__ticks = 1;
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	9e 83       	std	Y+6, r25	; 0x06
    238e:	8d 83       	std	Y+5, r24	; 0x05
    2390:	3f c0       	rjmp	.+126    	; 0x2410 <Eeprom24C16_ReadByte+0x2de>
	else if (__tmp > 65535)
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	3f ef       	ldi	r19, 0xFF	; 255
    239e:	4f e7       	ldi	r20, 0x7F	; 127
    23a0:	57 e4       	ldi	r21, 0x47	; 71
    23a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23a6:	18 16       	cp	r1, r24
    23a8:	4c f5       	brge	.+82     	; 0x23fc <Eeprom24C16_ReadByte+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e2       	ldi	r20, 0x20	; 32
    23b8:	51 e4       	ldi	r21, 0x41	; 65
    23ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	bc 01       	movw	r22, r24
    23c4:	cd 01       	movw	r24, r26
    23c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	9e 83       	std	Y+6, r25	; 0x06
    23d0:	8d 83       	std	Y+5, r24	; 0x05
    23d2:	0f c0       	rjmp	.+30     	; 0x23f2 <Eeprom24C16_ReadByte+0x2c0>
    23d4:	80 e9       	ldi	r24, 0x90	; 144
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	9c 83       	std	Y+4, r25	; 0x04
    23da:	8b 83       	std	Y+3, r24	; 0x03
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	9c 81       	ldd	r25, Y+4	; 0x04
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	f1 f7       	brne	.-4      	; 0x23e0 <Eeprom24C16_ReadByte+0x2ae>
    23e4:	9c 83       	std	Y+4, r25	; 0x04
    23e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	9e 81       	ldd	r25, Y+6	; 0x06
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	9e 81       	ldd	r25, Y+6	; 0x06
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	69 f7       	brne	.-38     	; 0x23d4 <Eeprom24C16_ReadByte+0x2a2>
    23fa:	14 c0       	rjmp	.+40     	; 0x2424 <Eeprom24C16_ReadByte+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fc:	6f 81       	ldd	r22, Y+7	; 0x07
    23fe:	78 85       	ldd	r23, Y+8	; 0x08
    2400:	89 85       	ldd	r24, Y+9	; 0x09
    2402:	9a 85       	ldd	r25, Y+10	; 0x0a
    2404:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05
    2410:	8d 81       	ldd	r24, Y+5	; 0x05
    2412:	9e 81       	ldd	r25, Y+6	; 0x06
    2414:	9a 83       	std	Y+2, r25	; 0x02
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	9a 81       	ldd	r25, Y+2	; 0x02
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <Eeprom24C16_ReadByte+0x2ea>
    2420:	9a 83       	std	Y+2, r25	; 0x02
    2422:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	loc_dataRead = I2C_ReadByte();
    2424:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <I2C_ReadByte>
    2428:	8b a7       	std	Y+43, r24	; 0x2b
	I2C_StopCondition();
    242a:	0e 94 00 15 	call	0x2a00	; 0x2a00 <I2C_StopCondition>
	return loc_dataRead;
    242e:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    2430:	af 96       	adiw	r28, 0x2f	; 47
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <DcMotor_vidInit>:
 */
#include "Dc_Motor_Types.h"
#include <util/delay.h>

void DcMotor_vidInit(void)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Pins Directions	*/

	/*	Make Sure Motor Stopped	*/

}
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <DcMotor_vidStart>:

void DcMotor_vidStart(dcMotor_dir_t dir)
{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	0f 92       	push	r0
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	89 83       	std	Y+1, r24	; 0x01
	{
		/*	Clear IN1	*/

		/*	Set IN2	*/
	}
}
    245c:	0f 90       	pop	r0
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <Dc_Motor_vidStop>:

void Dc_Motor_vidStop(void)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	2e 97       	sbiw	r28, 0x0e	; 14
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e8       	ldi	r25, 0x80	; 128
    247c:	ab e3       	ldi	r26, 0x3B	; 59
    247e:	b5 e4       	ldi	r27, 0x45	; 69
    2480:	8b 87       	std	Y+11, r24	; 0x0b
    2482:	9c 87       	std	Y+12, r25	; 0x0c
    2484:	ad 87       	std	Y+13, r26	; 0x0d
    2486:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	6b 85       	ldd	r22, Y+11	; 0x0b
    248a:	7c 85       	ldd	r23, Y+12	; 0x0c
    248c:	8d 85       	ldd	r24, Y+13	; 0x0d
    248e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a e7       	ldi	r20, 0x7A	; 122
    2496:	55 e4       	ldi	r21, 0x45	; 69
    2498:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	8f 83       	std	Y+7, r24	; 0x07
    24a2:	98 87       	std	Y+8, r25	; 0x08
    24a4:	a9 87       	std	Y+9, r26	; 0x09
    24a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a8:	6f 81       	ldd	r22, Y+7	; 0x07
    24aa:	78 85       	ldd	r23, Y+8	; 0x08
    24ac:	89 85       	ldd	r24, Y+9	; 0x09
    24ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <Dc_Motor_vidStop+0x66>
		__ticks = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
    24c8:	3f c0       	rjmp	.+126    	; 0x2548 <Dc_Motor_vidStop+0xe4>
	else if (__tmp > 65535)
    24ca:	6f 81       	ldd	r22, Y+7	; 0x07
    24cc:	78 85       	ldd	r23, Y+8	; 0x08
    24ce:	89 85       	ldd	r24, Y+9	; 0x09
    24d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	4c f5       	brge	.+82     	; 0x2534 <Dc_Motor_vidStop+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9e 83       	std	Y+6, r25	; 0x06
    2508:	8d 83       	std	Y+5, r24	; 0x05
    250a:	0f c0       	rjmp	.+30     	; 0x252a <Dc_Motor_vidStop+0xc6>
    250c:	80 e9       	ldi	r24, 0x90	; 144
    250e:	91 e0       	ldi	r25, 0x01	; 1
    2510:	9c 83       	std	Y+4, r25	; 0x04
    2512:	8b 83       	std	Y+3, r24	; 0x03
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	9c 81       	ldd	r25, Y+4	; 0x04
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <Dc_Motor_vidStop+0xb4>
    251c:	9c 83       	std	Y+4, r25	; 0x04
    251e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	8d 81       	ldd	r24, Y+5	; 0x05
    2522:	9e 81       	ldd	r25, Y+6	; 0x06
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <Dc_Motor_vidStop+0xa8>
    2532:	14 c0       	rjmp	.+40     	; 0x255c <Dc_Motor_vidStop+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	6f 81       	ldd	r22, Y+7	; 0x07
    2536:	78 85       	ldd	r23, Y+8	; 0x08
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9e 83       	std	Y+6, r25	; 0x06
    2546:	8d 83       	std	Y+5, r24	; 0x05
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	9e 81       	ldd	r25, Y+6	; 0x06
    254c:	9a 83       	std	Y+2, r25	; 0x02
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	9a 81       	ldd	r25, Y+2	; 0x02
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <Dc_Motor_vidStop+0xf0>
    2558:	9a 83       	std	Y+2, r25	; 0x02
    255a:	89 83       	std	Y+1, r24	; 0x01
	/*	Clear En Pin	*/

	_delay_ms(3000);
}
    255c:	2e 96       	adiw	r28, 0x0e	; 14
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	f8 94       	cli
    2562:	de bf       	out	0x3e, r29	; 62
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	cd bf       	out	0x3d, r28	; 61
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <Button_vidbuttonInit>:
 *      Author: Eng_Fawzi
 */
#include "Button.h"
#include "Dio.h"
void Button_vidbuttonInit(void)
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
	Dio_vidconfigChanel(DIO_PORTB,DIO_PIN0,DIO_INPUT);
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	60 e0       	ldi	r22, 0x00	; 0
    257a:	40 e0       	ldi	r20, 0x00	; 0
    257c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTB,DIO_PIN4,DIO_INPUT);
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	64 e0       	ldi	r22, 0x04	; 4
    2584:	40 e0       	ldi	r20, 0x00	; 0
    2586:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	Dio_vidconfigChanel(DIO_PORTD,DIO_PIN2,DIO_INPUT);
    258a:	83 e0       	ldi	r24, 0x03	; 3
    258c:	62 e0       	ldi	r22, 0x02	; 2
    258e:	40 e0       	ldi	r20, 0x00	; 0
    2590:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
}
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <Button_udtbuttonStatus>:

button_butStatus_t Button_udtbuttonStatus(button_buttonId_t butnId)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <Button_udtbuttonStatus+0x6>
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <Button_udtbuttonStatus+0x8>
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	8a 83       	std	Y+2, r24	; 0x02
	button_butStatus_t loc_btnStatus = RELEASED;
    25a8:	19 82       	std	Y+1, r1	; 0x01

	switch (butnId)
    25aa:	8a 81       	ldd	r24, Y+2	; 0x02
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	3c 83       	std	Y+4, r19	; 0x04
    25b2:	2b 83       	std	Y+3, r18	; 0x03
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	81 30       	cpi	r24, 0x01	; 1
    25ba:	91 05       	cpc	r25, r1
    25bc:	a1 f0       	breq	.+40     	; 0x25e6 <Button_udtbuttonStatus+0x4c>
    25be:	2b 81       	ldd	r18, Y+3	; 0x03
    25c0:	3c 81       	ldd	r19, Y+4	; 0x04
    25c2:	22 30       	cpi	r18, 0x02	; 2
    25c4:	31 05       	cpc	r19, r1
    25c6:	d1 f0       	breq	.+52     	; 0x25fc <Button_udtbuttonStatus+0x62>
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	9c 81       	ldd	r25, Y+4	; 0x04
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	01 f5       	brne	.+64     	; 0x2610 <Button_udtbuttonStatus+0x76>
	{
	case BUTTON0:
		if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN0) == DIO_HIGH)
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	60 e0       	ldi	r22, 0x00	; 0
    25d4:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <Dio_udtreadChanel>
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	19 f4       	brne	.+6      	; 0x25e2 <Button_udtbuttonStatus+0x48>
		{
			loc_btnStatus = PRESSED;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	17 c0       	rjmp	.+46     	; 0x2610 <Button_udtbuttonStatus+0x76>
		}
		else
		{
			loc_btnStatus = RELEASED;
    25e2:	19 82       	std	Y+1, r1	; 0x01
    25e4:	15 c0       	rjmp	.+42     	; 0x2610 <Button_udtbuttonStatus+0x76>
		}
		break;

	case BUTTON1:
		if (Dio_udtreadChanel(DIO_PORTB, DIO_PIN4) == DIO_HIGH)
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	64 e0       	ldi	r22, 0x04	; 4
    25ea:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <Dio_udtreadChanel>
    25ee:	81 30       	cpi	r24, 0x01	; 1
    25f0:	19 f4       	brne	.+6      	; 0x25f8 <Button_udtbuttonStatus+0x5e>
		{
			loc_btnStatus = PRESSED;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	0c c0       	rjmp	.+24     	; 0x2610 <Button_udtbuttonStatus+0x76>
		}
		else
		{
			loc_btnStatus = RELEASED;
    25f8:	19 82       	std	Y+1, r1	; 0x01
    25fa:	0a c0       	rjmp	.+20     	; 0x2610 <Button_udtbuttonStatus+0x76>
		}
		break;

	case BUTTON2:
		if (Dio_udtreadChanel(DIO_PORTD, DIO_PIN2) == DIO_HIGH)
    25fc:	83 e0       	ldi	r24, 0x03	; 3
    25fe:	62 e0       	ldi	r22, 0x02	; 2
    2600:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <Dio_udtreadChanel>
    2604:	81 30       	cpi	r24, 0x01	; 1
    2606:	19 f4       	brne	.+6      	; 0x260e <Button_udtbuttonStatus+0x74>
		{
			loc_btnStatus = PRESSED;
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	89 83       	std	Y+1, r24	; 0x01
    260c:	01 c0       	rjmp	.+2      	; 0x2610 <Button_udtbuttonStatus+0x76>
		}
		else
		{
			loc_btnStatus = RELEASED;
    260e:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_btnStatus;
    2610:	89 81       	ldd	r24, Y+1	; 0x01
}
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <USART_Init>:
#include "Uart.h"
#include "Std_Types.h"
#include "Bit_Math.h"

void USART_Init(u32 baud)
{
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	28 97       	sbiw	r28, 0x08	; 8
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	de bf       	out	0x3e, r29	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	cd bf       	out	0x3d, r28	; 61
    2634:	6d 83       	std	Y+5, r22	; 0x05
    2636:	7e 83       	std	Y+6, r23	; 0x06
    2638:	8f 83       	std	Y+7, r24	; 0x07
    263a:	98 87       	std	Y+8, r25	; 0x08
	u32 loc_UBBR_val = ((F_OSC/(16*baud))-1);
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	af 81       	ldd	r26, Y+7	; 0x07
    2642:	b8 85       	ldd	r27, Y+8	; 0x08
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	aa 1f       	adc	r26, r26
    264a:	bb 1f       	adc	r27, r27
    264c:	88 0f       	add	r24, r24
    264e:	99 1f       	adc	r25, r25
    2650:	aa 1f       	adc	r26, r26
    2652:	bb 1f       	adc	r27, r27
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	aa 1f       	adc	r26, r26
    265a:	bb 1f       	adc	r27, r27
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	aa 1f       	adc	r26, r26
    2662:	bb 1f       	adc	r27, r27
    2664:	9c 01       	movw	r18, r24
    2666:	ad 01       	movw	r20, r26
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	94 e2       	ldi	r25, 0x24	; 36
    266c:	a4 ef       	ldi	r26, 0xF4	; 244
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	bc 01       	movw	r22, r24
    2672:	cd 01       	movw	r24, r26
    2674:	0e 94 82 19 	call	0x3304	; 0x3304 <__udivmodsi4>
    2678:	da 01       	movw	r26, r20
    267a:	c9 01       	movw	r24, r18
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	a1 09       	sbc	r26, r1
    2680:	b1 09       	sbc	r27, r1
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	9a 83       	std	Y+2, r25	; 0x02
    2686:	ab 83       	std	Y+3, r26	; 0x03
    2688:	bc 83       	std	Y+4, r27	; 0x04
	/* Set baud rate */
	UART_UBRRH_REG = loc_UBBR_val>>8;
    268a:	e0 e4       	ldi	r30, 0x40	; 64
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	9a 81       	ldd	r25, Y+2	; 0x02
    2692:	ab 81       	ldd	r26, Y+3	; 0x03
    2694:	bc 81       	ldd	r27, Y+4	; 0x04
    2696:	89 2f       	mov	r24, r25
    2698:	9a 2f       	mov	r25, r26
    269a:	ab 2f       	mov	r26, r27
    269c:	bb 27       	eor	r27, r27
    269e:	80 83       	st	Z, r24
	UART_UBRRL_REG = loc_UBBR_val;
    26a0:	e9 e2       	ldi	r30, 0x29	; 41
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UART_UCSRB_REG = (1<<UART_RXEN_BIT)|(1<<UART_TXEN_BIT);
    26a8:	ea e2       	ldi	r30, 0x2A	; 42
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	88 e1       	ldi	r24, 0x18	; 24
    26ae:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit */
	UART_UCSRC_REG = (1<<UART_URSEL_BIT)|(1<<UART_USBS_BIT)|(3<<UART_UCSZ0_BIT);
    26b0:	e0 e4       	ldi	r30, 0x40	; 64
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	8e e8       	ldi	r24, 0x8E	; 142
    26b6:	80 83       	st	Z, r24
}
    26b8:	28 96       	adiw	r28, 0x08	; 8
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	de bf       	out	0x3e, r29	; 62
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	cd bf       	out	0x3d, r28	; 61
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

000026ca <USART_TransmitChar>:

void USART_TransmitChar(u8 data)
{
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	0f 92       	push	r0
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (CHECK_BIT(UART_UCSRA_REG,UART_UDRE_BIT) == 0)
    26d6:	eb e2       	ldi	r30, 0x2B	; 43
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	82 95       	swap	r24
    26de:	86 95       	lsr	r24
    26e0:	87 70       	andi	r24, 0x07	; 7
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	81 70       	andi	r24, 0x01	; 1
    26e8:	90 70       	andi	r25, 0x00	; 0
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	a1 f3       	breq	.-24     	; 0x26d6 <USART_TransmitChar+0xc>
	{
		;
	}
		/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
    26ee:	ec e2       	ldi	r30, 0x2C	; 44
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	80 83       	st	Z, r24
}
    26f6:	0f 90       	pop	r0
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <USART_Receive_NonBlock>:

/*	it shall be called periodically	*/
u8 USART_Receive_NonBlock(void)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	0f 92       	push	r0
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	if (CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 1)
    2708:	eb e2       	ldi	r30, 0x2B	; 43
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	88 1f       	adc	r24, r24
    2710:	88 27       	eor	r24, r24
    2712:	88 1f       	adc	r24, r24
    2714:	81 30       	cpi	r24, 0x01	; 1
    2716:	29 f4       	brne	.+10     	; 0x2722 <USART_Receive_NonBlock+0x24>
	{
		/* Get and return received data from buffer */
		return UART_UDR_REG;
    2718:	ec e2       	ldi	r30, 0x2C	; 44
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	01 c0       	rjmp	.+2      	; 0x2724 <USART_Receive_NonBlock+0x26>
	}
	else
	{
		return 0;
    2722:	19 82       	std	Y+1, r1	; 0x01
    2724:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    2726:	0f 90       	pop	r0
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <USART_Receive_Block>:

u8 USART_Receive_Block(void)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while(CHECK_BIT(UART_UCSRA_REG,UART_RXC_BIT) == 0)
    2736:	eb e2       	ldi	r30, 0x2B	; 43
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	80 81       	ld	r24, Z
    273c:	88 23       	and	r24, r24
    273e:	dc f7       	brge	.-10     	; 0x2736 <USART_Receive_Block+0x8>
	{
		;
	}
	/* Get and return received data from buffer */
	return UART_UDR_REG;
    2740:	ec e2       	ldi	r30, 0x2C	; 44
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
}
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <USART_TransmitStr>:

void USART_TransmitStr(u8 *str)
{
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	00 d0       	rcall	.+0      	; 0x2752 <USART_TransmitStr+0x6>
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    2756:	9a 83       	std	Y+2, r25	; 0x02
    2758:	89 83       	std	Y+1, r24	; 0x01
    275a:	0a c0       	rjmp	.+20     	; 0x2770 <USART_TransmitStr+0x24>
	while (*str != '\0')
	{
		USART_TransmitChar(*str);
    275c:	e9 81       	ldd	r30, Y+1	; 0x01
    275e:	fa 81       	ldd	r31, Y+2	; 0x02
    2760:	80 81       	ld	r24, Z
    2762:	0e 94 65 13 	call	0x26ca	; 0x26ca <USART_TransmitChar>
		str++;
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	9a 81       	ldd	r25, Y+2	; 0x02
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	89 83       	std	Y+1, r24	; 0x01
	return UART_UDR_REG;
}

void USART_TransmitStr(u8 *str)
{
	while (*str != '\0')
    2770:	e9 81       	ldd	r30, Y+1	; 0x01
    2772:	fa 81       	ldd	r31, Y+2	; 0x02
    2774:	80 81       	ld	r24, Z
    2776:	88 23       	and	r24, r24
    2778:	89 f7       	brne	.-30     	; 0x275c <USART_TransmitStr+0x10>
	{
		USART_TransmitChar(*str);
		str++;
	}
}
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	cf 91       	pop	r28
    2780:	df 91       	pop	r29
    2782:	08 95       	ret

00002784 <USART_ReceiveInterruptEnable>:

void USART_ReceiveInterruptEnable(void)
{
    2784:	df 93       	push	r29
    2786:	cf 93       	push	r28
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UART_UCSRB_REG,UART_RXC_INT_BIT);
    278c:	aa e2       	ldi	r26, 0x2A	; 42
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	ea e2       	ldi	r30, 0x2A	; 42
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	80 68       	ori	r24, 0x80	; 128
    2798:	8c 93       	st	X, r24
}
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	08 95       	ret

000027a0 <Spi_vidMasterInit>:
 *
 *************************************************/
#include "Spi.h"

void Spi_vidMasterInit(void)
{
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN5, DIO_OUTPUT);
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	65 e0       	ldi	r22, 0x05	; 5
    27ac:	41 e0       	ldi	r20, 0x01	; 1
    27ae:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	/*	configure SPI SS Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN4, DIO_OUTPUT);
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	64 e0       	ldi	r22, 0x04	; 4
    27b6:	41 e0       	ldi	r20, 0x01	; 1
    27b8:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	/*	configure SPI SCK Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN7, DIO_OUTPUT);
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	67 e0       	ldi	r22, 0x07	; 7
    27c0:	41 e0       	ldi	r20, 0x01	; 1
    27c2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	/*	configure SPI MISO Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN6, DIO_INPUT);
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	66 e0       	ldi	r22, 0x06	; 6
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	/*	initialize SPI SS pin with HIGH (No slave selected) */
	Dio_vidwriteChanel(DIO_PORTB, DIO_PIN4, DIO_HIGH);
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	64 e0       	ldi	r22, 0x04	; 4
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <Dio_vidwriteChanel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    27da:	ad e2       	ldi	r26, 0x2D	; 45
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	ed e2       	ldi	r30, 0x2D	; 45
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	80 64       	ori	r24, 0x40	; 64
    27e6:	8c 93       	st	X, r24
	/*	enable SPI Module in Master mode	*/
	SET_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    27e8:	ad e2       	ldi	r26, 0x2D	; 45
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	ed e2       	ldi	r30, 0x2D	; 45
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	80 61       	ori	r24, 0x10	; 16
    27f4:	8c 93       	st	X, r24
	/*	set SCK frequency by F_CPU/16	*/
	/*	Set SPI Speed	1MHZ*/
	SPI_SPCR_REG |= SPI_SCK_FREQ_FCPU_DIV_16;
    27f6:	ad e2       	ldi	r26, 0x2D	; 45
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	ed e2       	ldi	r30, 0x2D	; 45
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	81 60       	ori	r24, 0x01	; 1
    2802:	8c 93       	st	X, r24
}
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <Spi_vidSlaveInit>:

void Spi_vidSlaveInit(void)
{
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN5, DIO_INPUT);
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	65 e0       	ldi	r22, 0x05	; 5
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	/*	configure SPI SS Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN4, DIO_INPUT);
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	64 e0       	ldi	r22, 0x04	; 4
    2820:	40 e0       	ldi	r20, 0x00	; 0
    2822:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	/*	configure SPI SCK Pin as input	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN7, DIO_INPUT);
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	67 e0       	ldi	r22, 0x07	; 7
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	/*	configure SPI MISO Pin as output	*/
	Dio_vidconfigChanel(DIO_PORTB, DIO_PIN6, DIO_OUTPUT);
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	66 e0       	ldi	r22, 0x06	; 6
    2834:	41 e0       	ldi	r20, 0x01	; 1
    2836:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <Dio_vidconfigChanel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    283a:	ad e2       	ldi	r26, 0x2D	; 45
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	ed e2       	ldi	r30, 0x2D	; 45
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	80 64       	ori	r24, 0x40	; 64
    2846:	8c 93       	st	X, r24
	/*	enable SPI Module in Slave mode	*/
	CLEAR_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    2848:	ad e2       	ldi	r26, 0x2D	; 45
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	ed e2       	ldi	r30, 0x2D	; 45
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	8f 7e       	andi	r24, 0xEF	; 239
    2854:	8c 93       	st	X, r24
}
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	08 95       	ret

0000285c <Spi_MasterWrite>:

void Spi_MasterWrite(u8 data)
{
    285c:	df 93       	push	r29
    285e:	cf 93       	push	r28
    2860:	00 d0       	rcall	.+0      	; 0x2862 <Spi_MasterWrite+0x6>
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_flush_byte;
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    2868:	ef e2       	ldi	r30, 0x2F	; 47
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	8a 81       	ldd	r24, Y+2	; 0x02
    286e:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    2870:	ee e2       	ldi	r30, 0x2E	; 46
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	88 23       	and	r24, r24
    2878:	dc f7       	brge	.-10     	; 0x2870 <Spi_MasterWrite+0x14>
	{
		;
	}
		/*	flush the data register	*/
	loc_flush_byte = SPI_SPDR_REG;
    287a:	ef e2       	ldi	r30, 0x2F	; 47
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	89 83       	std	Y+1, r24	; 0x01
}
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <Spi_u8MasterRead>:

u8 Spi_u8MasterRead(void)
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	0f 92       	push	r0
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
	u8 loc_dummy_byte=0xFF;
    2896:	8f ef       	ldi	r24, 0xFF	; 255
    2898:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = loc_dummy_byte;
    289a:	ef e2       	ldi	r30, 0x2F	; 47
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	80 83       	st	Z, r24
	/*	wait until byte received	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    28a2:	ee e2       	ldi	r30, 0x2E	; 46
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	88 23       	and	r24, r24
    28aa:	dc f7       	brge	.-10     	; 0x28a2 <Spi_u8MasterRead+0x16>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    28ac:	ef e2       	ldi	r30, 0x2F	; 47
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
}
    28b2:	0f 90       	pop	r0
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	08 95       	ret

000028ba <Spi_u8MasterTranseve>:

u8 Spi_u8MasterTranseve(u8 data)
{
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	0f 92       	push	r0
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    28c6:	ef e2       	ldi	r30, 0x2F	; 47
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    28ce:	ee e2       	ldi	r30, 0x2E	; 46
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	88 23       	and	r24, r24
    28d6:	dc f7       	brge	.-10     	; 0x28ce <Spi_u8MasterTranseve+0x14>
	{
		;
	}
	/*	flush the data register	*/
	return SPI_SPDR_REG;
    28d8:	ef e2       	ldi	r30, 0x2F	; 47
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
}
    28de:	0f 90       	pop	r0
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <Spi_u8SlaveRead>:

u8 Spi_u8SlaveRead(void)
{
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
	/*	wait until byte received	*/
	while(CHECK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO) == 0)
    28ee:	ee e2       	ldi	r30, 0x2E	; 46
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	88 23       	and	r24, r24
    28f6:	dc f7       	brge	.-10     	; 0x28ee <Spi_u8SlaveRead+0x8>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    28f8:	ef e2       	ldi	r30, 0x2F	; 47
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
}
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <Spi_vidSlaveWrite>:

void Spi_vidSlaveWrite(u8 data)
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	0f 92       	push	r0
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	89 83       	std	Y+1, r24	; 0x01
	SPI_SPDR_REG = data;
    2910:	ef e2       	ldi	r30, 0x2F	; 47
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	80 83       	st	Z, r24
}
    2918:	0f 90       	pop	r0
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <I2C_MasterInit>:
 *
 ***********************************************/
#include "I2c.h"

void I2C_MasterInit(void)
{
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400 KHZ */
	I2C_TWBR_REG=0x0C;
    2928:	e0 e2       	ldi	r30, 0x20	; 32
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	8c e0       	ldi	r24, 0x0C	; 12
    292e:	80 83       	st	Z, r24
    /* enable I2C Module	*/
	/* enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    2930:	a6 e5       	ldi	r26, 0x56	; 86
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	e6 e5       	ldi	r30, 0x56	; 86
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	84 64       	ori	r24, 0x44	; 68
    293c:	8c 93       	st	X, r24
}
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <I2C_SlaveInit>:

void I2C_SlaveInit(u8 addr)
{
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	0f 92       	push	r0
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	89 83       	std	Y+1, r24	; 0x01
	/*	enable general call response in slave mode	*/
	SET_BIT(I2C_TWAR_REG,I2C_SLAVE_RESPONSE_BIT_NO);
    2950:	a2 e2       	ldi	r26, 0x22	; 34
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e2 e2       	ldi	r30, 0x22	; 34
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	81 60       	ori	r24, 0x01	; 1
    295c:	8c 93       	st	X, r24
    /* I2C Bus Slave Address	*/
	I2C_TWAR_REG |= (addr<<1);
    295e:	a2 e2       	ldi	r26, 0x22	; 34
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e2 e2       	ldi	r30, 0x22	; 34
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	28 2f       	mov	r18, r24
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	88 2f       	mov	r24, r24
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	82 2b       	or	r24, r18
    2976:	8c 93       	st	X, r24
    /* enable I2C Module	*/
	/*	enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    2978:	a6 e5       	ldi	r26, 0x56	; 86
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e6 e5       	ldi	r30, 0x56	; 86
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	84 64       	ori	r24, 0x44	; 68
    2984:	8c 93       	st	X, r24
}
    2986:	0f 90       	pop	r0
    2988:	cf 91       	pop	r28
    298a:	df 91       	pop	r29
    298c:	08 95       	ret

0000298e <I2C_StartCondition>:
boolean I2C_StartCondition(void)
{
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	0f 92       	push	r0
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG = I2C_ENABLE|I2C_INTERRUPT_FLAG|I2C_START_COND;
    2998:	e6 e5       	ldi	r30, 0x56	; 86
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	84 ea       	ldi	r24, 0xA4	; 164
    299e:	80 83       	st	Z, r24
    /*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    29a0:	e6 e5       	ldi	r30, 0x56	; 86
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	88 23       	and	r24, r24
    29a8:	dc f7       	brge	.-10     	; 0x29a0 <I2C_StartCondition+0x12>
    {
    	/*Do Nothing */
    	   ;
    }

    if (I2C_ReadStatus() != I2C_START_ACK)
    29aa:	0e 94 81 15 	call	0x2b02	; 0x2b02 <I2C_ReadStatus>
    29ae:	88 30       	cpi	r24, 0x08	; 8
    29b0:	11 f0       	breq	.+4      	; 0x29b6 <I2C_StartCondition+0x28>
    {
    	return FALSE;
    29b2:	19 82       	std	Y+1, r1	; 0x01
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <I2C_StartCondition+0x2c>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    29bc:	0f 90       	pop	r0
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <I2C_RepeatedStartCondition>:
boolean I2C_RepeatedStartCondition(void)
{
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	0f 92       	push	r0
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG|I2C_START_COND;
    29ce:	a6 e5       	ldi	r26, 0x56	; 86
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e6 e5       	ldi	r30, 0x56	; 86
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	84 6a       	ori	r24, 0xA4	; 164
    29da:	8c 93       	st	X, r24
    /*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    29dc:	e6 e5       	ldi	r30, 0x56	; 86
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	88 23       	and	r24, r24
    29e4:	dc f7       	brge	.-10     	; 0x29dc <I2C_RepeatedStartCondition+0x18>
    {
    	/*Do Nothing */
    	   ;
    }
    if (I2C_ReadStatus() != I2C_REP_START_ACK)
    29e6:	0e 94 81 15 	call	0x2b02	; 0x2b02 <I2C_ReadStatus>
    29ea:	80 31       	cpi	r24, 0x10	; 16
    29ec:	11 f0       	breq	.+4      	; 0x29f2 <I2C_RepeatedStartCondition+0x2e>
    {
    	return FALSE;
    29ee:	19 82       	std	Y+1, r1	; 0x01
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <I2C_RepeatedStartCondition+0x32>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29f8:	0f 90       	pop	r0
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	08 95       	ret

00002a00 <I2C_StopCondition>:
void I2C_StopCondition(void)
{
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
	/*	send stop condition	*/
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG|I2C_STOP_COND;
    2a08:	a6 e5       	ldi	r26, 0x56	; 86
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e6 e5       	ldi	r30, 0x56	; 86
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	84 69       	ori	r24, 0x94	; 148
    2a14:	8c 93       	st	X, r24
	/*	Wait until start condition sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    2a16:	e6 e5       	ldi	r30, 0x56	; 86
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	88 23       	and	r24, r24
    2a1e:	dc f7       	brge	.-10     	; 0x2a16 <I2C_StopCondition+0x16>
    {
    	/*Do Nothing */
    	   ;
    }
}
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <I2C_WriteByte>:
void I2C_WriteByte(u8 data)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	0f 92       	push	r0
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	89 83       	std	Y+1, r24	; 0x01
    /*	Put data On I2C data Register	*/
	I2C_TWDR_REG = data;
    2a32:	e3 e2       	ldi	r30, 0x23	; 35
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	80 83       	st	Z, r24

    /*	Send byte	*/
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG;
    2a3a:	a6 e5       	ldi	r26, 0x56	; 86
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	e6 e5       	ldi	r30, 0x56	; 86
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	84 68       	ori	r24, 0x84	; 132
    2a46:	8c 93       	st	X, r24



	/*	Wait until data sent successfully	*/
    while (CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)==0)
    2a48:	e6 e5       	ldi	r30, 0x56	; 86
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	88 23       	and	r24, r24
    2a50:	dc f7       	brge	.-10     	; 0x2a48 <I2C_WriteByte+0x22>
    {
    	/*Do Nothing */
    	   ;
    }
}
    2a52:	0f 90       	pop	r0
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	08 95       	ret

00002a5a <I2C_Send_SlaveAddressWriteOperation>:
boolean I2C_Send_SlaveAddressWriteOperation(u8 addr)
{
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <I2C_Send_SlaveAddressWriteOperation+0x6>
    2a60:	0f 92       	push	r0
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    2a68:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1);
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	88 0f       	add	r24, r24
    2a6e:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	0e 94 13 15 	call	0x2a26	; 0x2a26 <I2C_WriteByte>
    if (I2C_ReadStatus() != I2C_SLA_W_ACK)
    2a76:	0e 94 81 15 	call	0x2b02	; 0x2b02 <I2C_ReadStatus>
    2a7a:	88 31       	cpi	r24, 0x18	; 24
    2a7c:	11 f0       	breq	.+4      	; 0x2a82 <I2C_Send_SlaveAddressWriteOperation+0x28>
    {
    	return FALSE;
    2a7e:	1b 82       	std	Y+3, r1	; 0x03
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <I2C_Send_SlaveAddressWriteOperation+0x2c>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	8b 83       	std	Y+3, r24	; 0x03
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03

}
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	08 95       	ret

00002a94 <I2C_Send_SlaveAddressReadOperation>:
boolean I2C_Send_SlaveAddressReadOperation(u8 addr)
{
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	00 d0       	rcall	.+0      	; 0x2a9a <I2C_Send_SlaveAddressReadOperation+0x6>
    2a9a:	0f 92       	push	r0
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    2aa2:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1)|(0x01);
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	88 2f       	mov	r24, r24
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	88 0f       	add	r24, r24
    2aac:	99 1f       	adc	r25, r25
    2aae:	81 60       	ori	r24, 0x01	; 1
    2ab0:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	0e 94 13 15 	call	0x2a26	; 0x2a26 <I2C_WriteByte>
    if (I2C_ReadStatus() != I2C_SLA_R_ACK)
    2ab8:	0e 94 81 15 	call	0x2b02	; 0x2b02 <I2C_ReadStatus>
    2abc:	80 34       	cpi	r24, 0x40	; 64
    2abe:	11 f0       	breq	.+4      	; 0x2ac4 <I2C_Send_SlaveAddressReadOperation+0x30>
    {
    	return FALSE;
    2ac0:	1b 82       	std	Y+3, r1	; 0x03
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <I2C_Send_SlaveAddressReadOperation+0x34>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	8b 83       	std	Y+3, r24	; 0x03
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <I2C_ReadByte>:
u8 I2C_ReadByte(void)
{
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
	I2C_TWCR_REG |= I2C_ENABLE|I2C_INTERRUPT_FLAG;
    2ade:	a6 e5       	ldi	r26, 0x56	; 86
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	e6 e5       	ldi	r30, 0x56	; 86
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	84 68       	ori	r24, 0x84	; 132
    2aea:	8c 93       	st	X, r24
	/*	Wait until data sent successfully	*/
    while (!(CHECK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    2aec:	e6 e5       	ldi	r30, 0x56	; 86
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	88 23       	and	r24, r24
    2af4:	dc f7       	brge	.-10     	; 0x2aec <I2C_ReadByte+0x16>
    {
    	/*Do Nothing */
    	   ;
    }
    return I2C_TWDR_REG;
    2af6:	e3 e2       	ldi	r30, 0x23	; 35
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
}
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <I2C_ReadStatus>:
u8 I2C_ReadStatus(void)
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	0f 92       	push	r0
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    u8 status;
    status = I2C_TWSR_REG & 0xF8; // 1111 1000
    2b0c:	e1 e2       	ldi	r30, 0x21	; 33
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	88 7f       	andi	r24, 0xF8	; 248
    2b14:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b18:	0f 90       	pop	r0
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <GINT_vidEnableAllInterrupts>:
 */
#include "GINT_Reg.h"
#include "Bit_Math.h"

void GINT_vidEnableAllInterrupts(void)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GINT_SREG_REG,7);
    2b28:	af e5       	ldi	r26, 0x5F	; 95
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	ef e5       	ldi	r30, 0x5F	; 95
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	80 68       	ori	r24, 0x80	; 128
    2b34:	8c 93       	st	X, r24
}
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <GINT_vidDisableAllInterrupts>:
void GINT_vidDisableAllInterrupts(void)
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GINT_SREG_REG,7);
    2b44:	af e5       	ldi	r26, 0x5F	; 95
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	ef e5       	ldi	r30, 0x5F	; 95
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	8f 77       	andi	r24, 0x7F	; 127
    2b50:	8c 93       	st	X, r24
}
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	08 95       	ret

00002b58 <EXTINT_vidEnableExtInt>:
#include "EXTINT_Types.h"
#include "EXTINT_Reg.h"
#include "Bit_Math.h"

void EXTINT_vidEnableExtInt(extint_intId_t intId, extint_sensId_t snensId)
{
    2b58:	df 93       	push	r29
    2b5a:	cf 93       	push	r28
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <EXTINT_vidEnableExtInt+0x6>
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	6a 83       	std	Y+2, r22	; 0x02

}
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	cf 91       	pop	r28
    2b6c:	df 91       	pop	r29
    2b6e:	08 95       	ret

00002b70 <Dio_vidconfigChanel>:
 */
#include "Dio.h"
#include "Bit_Math.h"

void Dio_vidconfigChanel(dio_port_t port, dio_pin_t pin,dio_dir_t dir)
{
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	00 d0       	rcall	.+0      	; 0x2b76 <Dio_vidconfigChanel+0x6>
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <Dio_vidconfigChanel+0x8>
    2b78:	0f 92       	push	r0
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	6a 83       	std	Y+2, r22	; 0x02
    2b82:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	3d 83       	std	Y+5, r19	; 0x05
    2b8c:	2c 83       	std	Y+4, r18	; 0x04
    2b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b90:	9d 81       	ldd	r25, Y+5	; 0x05
    2b92:	81 30       	cpi	r24, 0x01	; 1
    2b94:	91 05       	cpc	r25, r1
    2b96:	09 f4       	brne	.+2      	; 0x2b9a <Dio_vidconfigChanel+0x2a>
    2b98:	43 c0       	rjmp	.+134    	; 0x2c20 <Dio_vidconfigChanel+0xb0>
    2b9a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b9c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b9e:	22 30       	cpi	r18, 0x02	; 2
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	2c f4       	brge	.+10     	; 0x2bae <Dio_vidconfigChanel+0x3e>
    2ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	71 f0       	breq	.+28     	; 0x2bc8 <Dio_vidconfigChanel+0x58>
    2bac:	bc c0       	rjmp	.+376    	; 0x2d26 <Dio_vidconfigChanel+0x1b6>
    2bae:	2c 81       	ldd	r18, Y+4	; 0x04
    2bb0:	3d 81       	ldd	r19, Y+5	; 0x05
    2bb2:	22 30       	cpi	r18, 0x02	; 2
    2bb4:	31 05       	cpc	r19, r1
    2bb6:	09 f4       	brne	.+2      	; 0x2bba <Dio_vidconfigChanel+0x4a>
    2bb8:	5f c0       	rjmp	.+190    	; 0x2c78 <Dio_vidconfigChanel+0x108>
    2bba:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbe:	83 30       	cpi	r24, 0x03	; 3
    2bc0:	91 05       	cpc	r25, r1
    2bc2:	09 f4       	brne	.+2      	; 0x2bc6 <Dio_vidconfigChanel+0x56>
    2bc4:	85 c0       	rjmp	.+266    	; 0x2cd0 <Dio_vidconfigChanel+0x160>
    2bc6:	af c0       	rjmp	.+350    	; 0x2d26 <Dio_vidconfigChanel+0x1b6>
	{
	case DIO_PORTA:
		if (dir == DIO_INPUT)
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	88 23       	and	r24, r24
    2bcc:	a9 f4       	brne	.+42     	; 0x2bf8 <Dio_vidconfigChanel+0x88>
		{
			CLEAR_BIT(DIO_DDRA_REG,pin);
    2bce:	aa e3       	ldi	r26, 0x3A	; 58
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	ea e3       	ldi	r30, 0x3A	; 58
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	48 2f       	mov	r20, r24
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	28 2f       	mov	r18, r24
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	02 2e       	mov	r0, r18
    2be6:	02 c0       	rjmp	.+4      	; 0x2bec <Dio_vidconfigChanel+0x7c>
    2be8:	88 0f       	add	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	0a 94       	dec	r0
    2bee:	e2 f7       	brpl	.-8      	; 0x2be8 <Dio_vidconfigChanel+0x78>
    2bf0:	80 95       	com	r24
    2bf2:	84 23       	and	r24, r20
    2bf4:	8c 93       	st	X, r24
    2bf6:	97 c0       	rjmp	.+302    	; 0x2d26 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    2bf8:	aa e3       	ldi	r26, 0x3A	; 58
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	ea e3       	ldi	r30, 0x3A	; 58
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	48 2f       	mov	r20, r24
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	02 2e       	mov	r0, r18
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <Dio_vidconfigChanel+0xa6>
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	0a 94       	dec	r0
    2c18:	e2 f7       	brpl	.-8      	; 0x2c12 <Dio_vidconfigChanel+0xa2>
    2c1a:	84 2b       	or	r24, r20
    2c1c:	8c 93       	st	X, r24
    2c1e:	83 c0       	rjmp	.+262    	; 0x2d26 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (dir == DIO_INPUT)
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	88 23       	and	r24, r24
    2c24:	a9 f4       	brne	.+42     	; 0x2c50 <Dio_vidconfigChanel+0xe0>
		{
			CLEAR_BIT(DIO_DDRB_REG,pin);
    2c26:	a7 e3       	ldi	r26, 0x37	; 55
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	e7 e3       	ldi	r30, 0x37	; 55
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	48 2f       	mov	r20, r24
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	02 2e       	mov	r0, r18
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <Dio_vidconfigChanel+0xd4>
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	0a 94       	dec	r0
    2c46:	e2 f7       	brpl	.-8      	; 0x2c40 <Dio_vidconfigChanel+0xd0>
    2c48:	80 95       	com	r24
    2c4a:	84 23       	and	r24, r20
    2c4c:	8c 93       	st	X, r24
    2c4e:	6b c0       	rjmp	.+214    	; 0x2d26 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    2c50:	a7 e3       	ldi	r26, 0x37	; 55
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e7 e3       	ldi	r30, 0x37	; 55
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	48 2f       	mov	r20, r24
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	02 2e       	mov	r0, r18
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <Dio_vidconfigChanel+0xfe>
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	0a 94       	dec	r0
    2c70:	e2 f7       	brpl	.-8      	; 0x2c6a <Dio_vidconfigChanel+0xfa>
    2c72:	84 2b       	or	r24, r20
    2c74:	8c 93       	st	X, r24
    2c76:	57 c0       	rjmp	.+174    	; 0x2d26 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (dir == DIO_INPUT)
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	88 23       	and	r24, r24
    2c7c:	a9 f4       	brne	.+42     	; 0x2ca8 <Dio_vidconfigChanel+0x138>
		{
			CLEAR_BIT(DIO_DDRC_REG,pin);
    2c7e:	a4 e3       	ldi	r26, 0x34	; 52
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e4 e3       	ldi	r30, 0x34	; 52
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	48 2f       	mov	r20, r24
    2c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8c:	28 2f       	mov	r18, r24
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	02 2e       	mov	r0, r18
    2c96:	02 c0       	rjmp	.+4      	; 0x2c9c <Dio_vidconfigChanel+0x12c>
    2c98:	88 0f       	add	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	0a 94       	dec	r0
    2c9e:	e2 f7       	brpl	.-8      	; 0x2c98 <Dio_vidconfigChanel+0x128>
    2ca0:	80 95       	com	r24
    2ca2:	84 23       	and	r24, r20
    2ca4:	8c 93       	st	X, r24
    2ca6:	3f c0       	rjmp	.+126    	; 0x2d26 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    2ca8:	a4 e3       	ldi	r26, 0x34	; 52
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	e4 e3       	ldi	r30, 0x34	; 52
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	48 2f       	mov	r20, r24
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	02 2e       	mov	r0, r18
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <Dio_vidconfigChanel+0x156>
    2cc2:	88 0f       	add	r24, r24
    2cc4:	99 1f       	adc	r25, r25
    2cc6:	0a 94       	dec	r0
    2cc8:	e2 f7       	brpl	.-8      	; 0x2cc2 <Dio_vidconfigChanel+0x152>
    2cca:	84 2b       	or	r24, r20
    2ccc:	8c 93       	st	X, r24
    2cce:	2b c0       	rjmp	.+86     	; 0x2d26 <Dio_vidconfigChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (dir == DIO_INPUT)
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	88 23       	and	r24, r24
    2cd4:	a9 f4       	brne	.+42     	; 0x2d00 <Dio_vidconfigChanel+0x190>
		{
			CLEAR_BIT(DIO_DDRD_REG,pin);
    2cd6:	a1 e3       	ldi	r26, 0x31	; 49
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e1 e3       	ldi	r30, 0x31	; 49
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	48 2f       	mov	r20, r24
    2ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	02 2e       	mov	r0, r18
    2cee:	02 c0       	rjmp	.+4      	; 0x2cf4 <Dio_vidconfigChanel+0x184>
    2cf0:	88 0f       	add	r24, r24
    2cf2:	99 1f       	adc	r25, r25
    2cf4:	0a 94       	dec	r0
    2cf6:	e2 f7       	brpl	.-8      	; 0x2cf0 <Dio_vidconfigChanel+0x180>
    2cf8:	80 95       	com	r24
    2cfa:	84 23       	and	r24, r20
    2cfc:	8c 93       	st	X, r24
    2cfe:	13 c0       	rjmp	.+38     	; 0x2d26 <Dio_vidconfigChanel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    2d00:	a1 e3       	ldi	r26, 0x31	; 49
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	e1 e3       	ldi	r30, 0x31	; 49
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	48 2f       	mov	r20, r24
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	28 2f       	mov	r18, r24
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	02 2e       	mov	r0, r18
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <Dio_vidconfigChanel+0x1ae>
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	0a 94       	dec	r0
    2d20:	e2 f7       	brpl	.-8      	; 0x2d1a <Dio_vidconfigChanel+0x1aa>
    2d22:	84 2b       	or	r24, r20
    2d24:	8c 93       	st	X, r24
		}
		break;
	}
}
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	08 95       	ret

00002d36 <Dio_vidwriteChanel>:

void Dio_vidwriteChanel(dio_port_t port, dio_pin_t pin,dio_level_t level)
{
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	00 d0       	rcall	.+0      	; 0x2d3c <Dio_vidwriteChanel+0x6>
    2d3c:	00 d0       	rcall	.+0      	; 0x2d3e <Dio_vidwriteChanel+0x8>
    2d3e:	0f 92       	push	r0
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	6a 83       	std	Y+2, r22	; 0x02
    2d48:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	28 2f       	mov	r18, r24
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	3d 83       	std	Y+5, r19	; 0x05
    2d52:	2c 83       	std	Y+4, r18	; 0x04
    2d54:	8c 81       	ldd	r24, Y+4	; 0x04
    2d56:	9d 81       	ldd	r25, Y+5	; 0x05
    2d58:	81 30       	cpi	r24, 0x01	; 1
    2d5a:	91 05       	cpc	r25, r1
    2d5c:	09 f4       	brne	.+2      	; 0x2d60 <Dio_vidwriteChanel+0x2a>
    2d5e:	43 c0       	rjmp	.+134    	; 0x2de6 <Dio_vidwriteChanel+0xb0>
    2d60:	2c 81       	ldd	r18, Y+4	; 0x04
    2d62:	3d 81       	ldd	r19, Y+5	; 0x05
    2d64:	22 30       	cpi	r18, 0x02	; 2
    2d66:	31 05       	cpc	r19, r1
    2d68:	2c f4       	brge	.+10     	; 0x2d74 <Dio_vidwriteChanel+0x3e>
    2d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d6e:	00 97       	sbiw	r24, 0x00	; 0
    2d70:	71 f0       	breq	.+28     	; 0x2d8e <Dio_vidwriteChanel+0x58>
    2d72:	bc c0       	rjmp	.+376    	; 0x2eec <Dio_vidwriteChanel+0x1b6>
    2d74:	2c 81       	ldd	r18, Y+4	; 0x04
    2d76:	3d 81       	ldd	r19, Y+5	; 0x05
    2d78:	22 30       	cpi	r18, 0x02	; 2
    2d7a:	31 05       	cpc	r19, r1
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <Dio_vidwriteChanel+0x4a>
    2d7e:	5f c0       	rjmp	.+190    	; 0x2e3e <Dio_vidwriteChanel+0x108>
    2d80:	8c 81       	ldd	r24, Y+4	; 0x04
    2d82:	9d 81       	ldd	r25, Y+5	; 0x05
    2d84:	83 30       	cpi	r24, 0x03	; 3
    2d86:	91 05       	cpc	r25, r1
    2d88:	09 f4       	brne	.+2      	; 0x2d8c <Dio_vidwriteChanel+0x56>
    2d8a:	85 c0       	rjmp	.+266    	; 0x2e96 <Dio_vidwriteChanel+0x160>
    2d8c:	af c0       	rjmp	.+350    	; 0x2eec <Dio_vidwriteChanel+0x1b6>
	{
	case DIO_PORTA:
		if (level == DIO_HIGH)
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	81 30       	cpi	r24, 0x01	; 1
    2d92:	a1 f4       	brne	.+40     	; 0x2dbc <Dio_vidwriteChanel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    2d94:	ab e3       	ldi	r26, 0x3B	; 59
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	eb e3       	ldi	r30, 0x3B	; 59
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	48 2f       	mov	r20, r24
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	28 2f       	mov	r18, r24
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	02 2e       	mov	r0, r18
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <Dio_vidwriteChanel+0x7c>
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	0a 94       	dec	r0
    2db4:	e2 f7       	brpl	.-8      	; 0x2dae <Dio_vidwriteChanel+0x78>
    2db6:	84 2b       	or	r24, r20
    2db8:	8c 93       	st	X, r24
    2dba:	98 c0       	rjmp	.+304    	; 0x2eec <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTA_REG,pin);
    2dbc:	ab e3       	ldi	r26, 0x3B	; 59
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	eb e3       	ldi	r30, 0x3B	; 59
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	48 2f       	mov	r20, r24
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	02 2e       	mov	r0, r18
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <Dio_vidwriteChanel+0xa4>
    2dd6:	88 0f       	add	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	0a 94       	dec	r0
    2ddc:	e2 f7       	brpl	.-8      	; 0x2dd6 <Dio_vidwriteChanel+0xa0>
    2dde:	80 95       	com	r24
    2de0:	84 23       	and	r24, r20
    2de2:	8c 93       	st	X, r24
    2de4:	83 c0       	rjmp	.+262    	; 0x2eec <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == DIO_HIGH)
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	81 30       	cpi	r24, 0x01	; 1
    2dea:	a1 f4       	brne	.+40     	; 0x2e14 <Dio_vidwriteChanel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    2dec:	a8 e3       	ldi	r26, 0x38	; 56
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	e8 e3       	ldi	r30, 0x38	; 56
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	48 2f       	mov	r20, r24
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	28 2f       	mov	r18, r24
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	02 2e       	mov	r0, r18
    2e04:	02 c0       	rjmp	.+4      	; 0x2e0a <Dio_vidwriteChanel+0xd4>
    2e06:	88 0f       	add	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	0a 94       	dec	r0
    2e0c:	e2 f7       	brpl	.-8      	; 0x2e06 <Dio_vidwriteChanel+0xd0>
    2e0e:	84 2b       	or	r24, r20
    2e10:	8c 93       	st	X, r24
    2e12:	6c c0       	rjmp	.+216    	; 0x2eec <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTB_REG,pin);
    2e14:	a8 e3       	ldi	r26, 0x38	; 56
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	e8 e3       	ldi	r30, 0x38	; 56
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	80 81       	ld	r24, Z
    2e1e:	48 2f       	mov	r20, r24
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	28 2f       	mov	r18, r24
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	02 2e       	mov	r0, r18
    2e2c:	02 c0       	rjmp	.+4      	; 0x2e32 <Dio_vidwriteChanel+0xfc>
    2e2e:	88 0f       	add	r24, r24
    2e30:	99 1f       	adc	r25, r25
    2e32:	0a 94       	dec	r0
    2e34:	e2 f7       	brpl	.-8      	; 0x2e2e <Dio_vidwriteChanel+0xf8>
    2e36:	80 95       	com	r24
    2e38:	84 23       	and	r24, r20
    2e3a:	8c 93       	st	X, r24
    2e3c:	57 c0       	rjmp	.+174    	; 0x2eec <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == DIO_HIGH)
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	81 30       	cpi	r24, 0x01	; 1
    2e42:	a1 f4       	brne	.+40     	; 0x2e6c <Dio_vidwriteChanel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    2e44:	a5 e3       	ldi	r26, 0x35	; 53
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	e5 e3       	ldi	r30, 0x35	; 53
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	48 2f       	mov	r20, r24
    2e50:	8a 81       	ldd	r24, Y+2	; 0x02
    2e52:	28 2f       	mov	r18, r24
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	02 2e       	mov	r0, r18
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <Dio_vidwriteChanel+0x12c>
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	0a 94       	dec	r0
    2e64:	e2 f7       	brpl	.-8      	; 0x2e5e <Dio_vidwriteChanel+0x128>
    2e66:	84 2b       	or	r24, r20
    2e68:	8c 93       	st	X, r24
    2e6a:	40 c0       	rjmp	.+128    	; 0x2eec <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTC_REG,pin);
    2e6c:	a5 e3       	ldi	r26, 0x35	; 53
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e5 e3       	ldi	r30, 0x35	; 53
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	48 2f       	mov	r20, r24
    2e78:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	02 2e       	mov	r0, r18
    2e84:	02 c0       	rjmp	.+4      	; 0x2e8a <Dio_vidwriteChanel+0x154>
    2e86:	88 0f       	add	r24, r24
    2e88:	99 1f       	adc	r25, r25
    2e8a:	0a 94       	dec	r0
    2e8c:	e2 f7       	brpl	.-8      	; 0x2e86 <Dio_vidwriteChanel+0x150>
    2e8e:	80 95       	com	r24
    2e90:	84 23       	and	r24, r20
    2e92:	8c 93       	st	X, r24
    2e94:	2b c0       	rjmp	.+86     	; 0x2eec <Dio_vidwriteChanel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == DIO_HIGH)
    2e96:	8b 81       	ldd	r24, Y+3	; 0x03
    2e98:	81 30       	cpi	r24, 0x01	; 1
    2e9a:	a1 f4       	brne	.+40     	; 0x2ec4 <Dio_vidwriteChanel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    2e9c:	a2 e3       	ldi	r26, 0x32	; 50
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	e2 e3       	ldi	r30, 0x32	; 50
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	48 2f       	mov	r20, r24
    2ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eaa:	28 2f       	mov	r18, r24
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	02 2e       	mov	r0, r18
    2eb4:	02 c0       	rjmp	.+4      	; 0x2eba <Dio_vidwriteChanel+0x184>
    2eb6:	88 0f       	add	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	0a 94       	dec	r0
    2ebc:	e2 f7       	brpl	.-8      	; 0x2eb6 <Dio_vidwriteChanel+0x180>
    2ebe:	84 2b       	or	r24, r20
    2ec0:	8c 93       	st	X, r24
    2ec2:	14 c0       	rjmp	.+40     	; 0x2eec <Dio_vidwriteChanel+0x1b6>
		}
		else
		{
			CLEAR_BIT(DIO_PORTD_REG,pin);
    2ec4:	a2 e3       	ldi	r26, 0x32	; 50
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	e2 e3       	ldi	r30, 0x32	; 50
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	48 2f       	mov	r20, r24
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	02 2e       	mov	r0, r18
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <Dio_vidwriteChanel+0x1ac>
    2ede:	88 0f       	add	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	0a 94       	dec	r0
    2ee4:	e2 f7       	brpl	.-8      	; 0x2ede <Dio_vidwriteChanel+0x1a8>
    2ee6:	80 95       	com	r24
    2ee8:	84 23       	and	r24, r20
    2eea:	8c 93       	st	X, r24
		}
		break;
	}
}
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	cf 91       	pop	r28
    2ef8:	df 91       	pop	r29
    2efa:	08 95       	ret

00002efc <Dio_vidWriteChanelGroup>:

void Dio_vidWriteChanelGroup(dio_port_t port, u8 data, u8 mask)
{
    2efc:	df 93       	push	r29
    2efe:	cf 93       	push	r28
    2f00:	00 d0       	rcall	.+0      	; 0x2f02 <Dio_vidWriteChanelGroup+0x6>
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <Dio_vidWriteChanelGroup+0x8>
    2f04:	0f 92       	push	r0
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	6a 83       	std	Y+2, r22	; 0x02
    2f0e:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	28 2f       	mov	r18, r24
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	3d 83       	std	Y+5, r19	; 0x05
    2f18:	2c 83       	std	Y+4, r18	; 0x04
    2f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f1e:	81 30       	cpi	r24, 0x01	; 1
    2f20:	91 05       	cpc	r25, r1
    2f22:	01 f1       	breq	.+64     	; 0x2f64 <Dio_vidWriteChanelGroup+0x68>
    2f24:	2c 81       	ldd	r18, Y+4	; 0x04
    2f26:	3d 81       	ldd	r19, Y+5	; 0x05
    2f28:	22 30       	cpi	r18, 0x02	; 2
    2f2a:	31 05       	cpc	r19, r1
    2f2c:	2c f4       	brge	.+10     	; 0x2f38 <Dio_vidWriteChanelGroup+0x3c>
    2f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f30:	9d 81       	ldd	r25, Y+5	; 0x05
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	61 f0       	breq	.+24     	; 0x2f4e <Dio_vidWriteChanelGroup+0x52>
    2f36:	36 c0       	rjmp	.+108    	; 0x2fa4 <Dio_vidWriteChanelGroup+0xa8>
    2f38:	2c 81       	ldd	r18, Y+4	; 0x04
    2f3a:	3d 81       	ldd	r19, Y+5	; 0x05
    2f3c:	22 30       	cpi	r18, 0x02	; 2
    2f3e:	31 05       	cpc	r19, r1
    2f40:	e1 f0       	breq	.+56     	; 0x2f7a <Dio_vidWriteChanelGroup+0x7e>
    2f42:	8c 81       	ldd	r24, Y+4	; 0x04
    2f44:	9d 81       	ldd	r25, Y+5	; 0x05
    2f46:	83 30       	cpi	r24, 0x03	; 3
    2f48:	91 05       	cpc	r25, r1
    2f4a:	11 f1       	breq	.+68     	; 0x2f90 <Dio_vidWriteChanelGroup+0x94>
    2f4c:	2b c0       	rjmp	.+86     	; 0x2fa4 <Dio_vidWriteChanelGroup+0xa8>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG & mask)|(data);
    2f4e:	ab e3       	ldi	r26, 0x3B	; 59
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	eb e3       	ldi	r30, 0x3B	; 59
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	90 81       	ld	r25, Z
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	98 23       	and	r25, r24
    2f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5e:	89 2b       	or	r24, r25
    2f60:	8c 93       	st	X, r24
    2f62:	20 c0       	rjmp	.+64     	; 0x2fa4 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTB_REG & mask)|(data);
    2f64:	a8 e3       	ldi	r26, 0x38	; 56
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	e8 e3       	ldi	r30, 0x38	; 56
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	90 81       	ld	r25, Z
    2f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f70:	98 23       	and	r25, r24
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	89 2b       	or	r24, r25
    2f76:	8c 93       	st	X, r24
    2f78:	15 c0       	rjmp	.+42     	; 0x2fa4 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTC_REG & mask)|(data);
    2f7a:	a5 e3       	ldi	r26, 0x35	; 53
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	e5 e3       	ldi	r30, 0x35	; 53
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	90 81       	ld	r25, Z
    2f84:	8b 81       	ldd	r24, Y+3	; 0x03
    2f86:	98 23       	and	r25, r24
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	89 2b       	or	r24, r25
    2f8c:	8c 93       	st	X, r24
    2f8e:	0a c0       	rjmp	.+20     	; 0x2fa4 <Dio_vidWriteChanelGroup+0xa8>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTD_REG & mask)|(data);
    2f90:	a2 e3       	ldi	r26, 0x32	; 50
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	e2 e3       	ldi	r30, 0x32	; 50
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	90 81       	ld	r25, Z
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	98 23       	and	r25, r24
    2f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa0:	89 2b       	or	r24, r25
    2fa2:	8c 93       	st	X, r24
		break;
	}
}
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	cf 91       	pop	r28
    2fb0:	df 91       	pop	r29
    2fb2:	08 95       	ret

00002fb4 <Dio_udtreadChanel>:

dio_level_t Dio_udtreadChanel(dio_port_t port, dio_pin_t pin)
{
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <Dio_udtreadChanel+0x6>
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <Dio_udtreadChanel+0x8>
    2fbc:	0f 92       	push	r0
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	8a 83       	std	Y+2, r24	; 0x02
    2fc4:	6b 83       	std	Y+3, r22	; 0x03
	dio_level_t loc_result = DIO_LOW;
    2fc6:	19 82       	std	Y+1, r1	; 0x01

	switch (port)
    2fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fca:	28 2f       	mov	r18, r24
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	3d 83       	std	Y+5, r19	; 0x05
    2fd0:	2c 83       	std	Y+4, r18	; 0x04
    2fd2:	4c 81       	ldd	r20, Y+4	; 0x04
    2fd4:	5d 81       	ldd	r21, Y+5	; 0x05
    2fd6:	41 30       	cpi	r20, 0x01	; 1
    2fd8:	51 05       	cpc	r21, r1
    2fda:	79 f1       	breq	.+94     	; 0x303a <Dio_udtreadChanel+0x86>
    2fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    2fde:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe0:	82 30       	cpi	r24, 0x02	; 2
    2fe2:	91 05       	cpc	r25, r1
    2fe4:	34 f4       	brge	.+12     	; 0x2ff2 <Dio_udtreadChanel+0x3e>
    2fe6:	2c 81       	ldd	r18, Y+4	; 0x04
    2fe8:	3d 81       	ldd	r19, Y+5	; 0x05
    2fea:	21 15       	cp	r18, r1
    2fec:	31 05       	cpc	r19, r1
    2fee:	69 f0       	breq	.+26     	; 0x300a <Dio_udtreadChanel+0x56>
    2ff0:	6b c0       	rjmp	.+214    	; 0x30c8 <Dio_udtreadChanel+0x114>
    2ff2:	4c 81       	ldd	r20, Y+4	; 0x04
    2ff4:	5d 81       	ldd	r21, Y+5	; 0x05
    2ff6:	42 30       	cpi	r20, 0x02	; 2
    2ff8:	51 05       	cpc	r21, r1
    2ffa:	b9 f1       	breq	.+110    	; 0x306a <Dio_udtreadChanel+0xb6>
    2ffc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    3000:	83 30       	cpi	r24, 0x03	; 3
    3002:	91 05       	cpc	r25, r1
    3004:	09 f4       	brne	.+2      	; 0x3008 <Dio_udtreadChanel+0x54>
    3006:	49 c0       	rjmp	.+146    	; 0x309a <Dio_udtreadChanel+0xe6>
    3008:	5f c0       	rjmp	.+190    	; 0x30c8 <Dio_udtreadChanel+0x114>
	{
	case DIO_PORTA:
		if (CHECK_BIT(DIO_PINA_REG,pin) == 1)
    300a:	e9 e3       	ldi	r30, 0x39	; 57
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	80 81       	ld	r24, Z
    3010:	28 2f       	mov	r18, r24
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	8b 81       	ldd	r24, Y+3	; 0x03
    3016:	88 2f       	mov	r24, r24
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	a9 01       	movw	r20, r18
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <Dio_udtreadChanel+0x6e>
    301e:	55 95       	asr	r21
    3020:	47 95       	ror	r20
    3022:	8a 95       	dec	r24
    3024:	e2 f7       	brpl	.-8      	; 0x301e <Dio_udtreadChanel+0x6a>
    3026:	ca 01       	movw	r24, r20
    3028:	81 70       	andi	r24, 0x01	; 1
    302a:	90 70       	andi	r25, 0x00	; 0
    302c:	88 23       	and	r24, r24
    302e:	19 f0       	breq	.+6      	; 0x3036 <Dio_udtreadChanel+0x82>
		{
			loc_result = DIO_HIGH;
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	49 c0       	rjmp	.+146    	; 0x30c8 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    3036:	19 82       	std	Y+1, r1	; 0x01
    3038:	47 c0       	rjmp	.+142    	; 0x30c8 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTB:
		if (CHECK_BIT(DIO_PINB_REG,pin) == 1)
    303a:	e6 e3       	ldi	r30, 0x36	; 54
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	80 81       	ld	r24, Z
    3040:	28 2f       	mov	r18, r24
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	8b 81       	ldd	r24, Y+3	; 0x03
    3046:	88 2f       	mov	r24, r24
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	a9 01       	movw	r20, r18
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <Dio_udtreadChanel+0x9e>
    304e:	55 95       	asr	r21
    3050:	47 95       	ror	r20
    3052:	8a 95       	dec	r24
    3054:	e2 f7       	brpl	.-8      	; 0x304e <Dio_udtreadChanel+0x9a>
    3056:	ca 01       	movw	r24, r20
    3058:	81 70       	andi	r24, 0x01	; 1
    305a:	90 70       	andi	r25, 0x00	; 0
    305c:	88 23       	and	r24, r24
    305e:	19 f0       	breq	.+6      	; 0x3066 <Dio_udtreadChanel+0xb2>
		{
			loc_result = DIO_HIGH;
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	89 83       	std	Y+1, r24	; 0x01
    3064:	31 c0       	rjmp	.+98     	; 0x30c8 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    3066:	19 82       	std	Y+1, r1	; 0x01
    3068:	2f c0       	rjmp	.+94     	; 0x30c8 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTC:
		if (CHECK_BIT(DIO_PINC_REG,pin) == 1)
    306a:	e3 e3       	ldi	r30, 0x33	; 51
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	28 2f       	mov	r18, r24
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	8b 81       	ldd	r24, Y+3	; 0x03
    3076:	88 2f       	mov	r24, r24
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	a9 01       	movw	r20, r18
    307c:	02 c0       	rjmp	.+4      	; 0x3082 <Dio_udtreadChanel+0xce>
    307e:	55 95       	asr	r21
    3080:	47 95       	ror	r20
    3082:	8a 95       	dec	r24
    3084:	e2 f7       	brpl	.-8      	; 0x307e <Dio_udtreadChanel+0xca>
    3086:	ca 01       	movw	r24, r20
    3088:	81 70       	andi	r24, 0x01	; 1
    308a:	90 70       	andi	r25, 0x00	; 0
    308c:	88 23       	and	r24, r24
    308e:	19 f0       	breq	.+6      	; 0x3096 <Dio_udtreadChanel+0xe2>
		{
			loc_result = DIO_HIGH;
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	89 83       	std	Y+1, r24	; 0x01
    3094:	19 c0       	rjmp	.+50     	; 0x30c8 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    3096:	19 82       	std	Y+1, r1	; 0x01
    3098:	17 c0       	rjmp	.+46     	; 0x30c8 <Dio_udtreadChanel+0x114>
		}
		break;

	case DIO_PORTD:
		if (CHECK_BIT(DIO_PIND_REG,pin) == 1)
    309a:	e0 e3       	ldi	r30, 0x30	; 48
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	28 2f       	mov	r18, r24
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	8b 81       	ldd	r24, Y+3	; 0x03
    30a6:	88 2f       	mov	r24, r24
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	a9 01       	movw	r20, r18
    30ac:	02 c0       	rjmp	.+4      	; 0x30b2 <Dio_udtreadChanel+0xfe>
    30ae:	55 95       	asr	r21
    30b0:	47 95       	ror	r20
    30b2:	8a 95       	dec	r24
    30b4:	e2 f7       	brpl	.-8      	; 0x30ae <Dio_udtreadChanel+0xfa>
    30b6:	ca 01       	movw	r24, r20
    30b8:	81 70       	andi	r24, 0x01	; 1
    30ba:	90 70       	andi	r25, 0x00	; 0
    30bc:	88 23       	and	r24, r24
    30be:	19 f0       	breq	.+6      	; 0x30c6 <Dio_udtreadChanel+0x112>
		{
			loc_result = DIO_HIGH;
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	89 83       	std	Y+1, r24	; 0x01
    30c4:	01 c0       	rjmp	.+2      	; 0x30c8 <Dio_udtreadChanel+0x114>
		}
		else
		{
			loc_result = DIO_LOW;
    30c6:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return loc_result;
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    30ca:	0f 90       	pop	r0
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <Dio_vidflipChanel>:

void Dio_vidflipChanel(dio_port_t port, dio_pin_t pin)
{
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	00 d0       	rcall	.+0      	; 0x30e0 <Dio_vidflipChanel+0x6>
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <Dio_vidflipChanel+0x8>
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	89 83       	std	Y+1, r24	; 0x01
    30e8:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	28 2f       	mov	r18, r24
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	3c 83       	std	Y+4, r19	; 0x04
    30f2:	2b 83       	std	Y+3, r18	; 0x03
    30f4:	8b 81       	ldd	r24, Y+3	; 0x03
    30f6:	9c 81       	ldd	r25, Y+4	; 0x04
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	91 05       	cpc	r25, r1
    30fc:	49 f1       	breq	.+82     	; 0x3150 <Dio_vidflipChanel+0x76>
    30fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3100:	3c 81       	ldd	r19, Y+4	; 0x04
    3102:	22 30       	cpi	r18, 0x02	; 2
    3104:	31 05       	cpc	r19, r1
    3106:	2c f4       	brge	.+10     	; 0x3112 <Dio_vidflipChanel+0x38>
    3108:	8b 81       	ldd	r24, Y+3	; 0x03
    310a:	9c 81       	ldd	r25, Y+4	; 0x04
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	61 f0       	breq	.+24     	; 0x3128 <Dio_vidflipChanel+0x4e>
    3110:	5a c0       	rjmp	.+180    	; 0x31c6 <Dio_vidflipChanel+0xec>
    3112:	2b 81       	ldd	r18, Y+3	; 0x03
    3114:	3c 81       	ldd	r19, Y+4	; 0x04
    3116:	22 30       	cpi	r18, 0x02	; 2
    3118:	31 05       	cpc	r19, r1
    311a:	71 f1       	breq	.+92     	; 0x3178 <Dio_vidflipChanel+0x9e>
    311c:	8b 81       	ldd	r24, Y+3	; 0x03
    311e:	9c 81       	ldd	r25, Y+4	; 0x04
    3120:	83 30       	cpi	r24, 0x03	; 3
    3122:	91 05       	cpc	r25, r1
    3124:	e9 f1       	breq	.+122    	; 0x31a0 <Dio_vidflipChanel+0xc6>
    3126:	4f c0       	rjmp	.+158    	; 0x31c6 <Dio_vidflipChanel+0xec>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,pin);
    3128:	ab e3       	ldi	r26, 0x3B	; 59
    312a:	b0 e0       	ldi	r27, 0x00	; 0
    312c:	eb e3       	ldi	r30, 0x3B	; 59
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	48 2f       	mov	r20, r24
    3134:	8a 81       	ldd	r24, Y+2	; 0x02
    3136:	28 2f       	mov	r18, r24
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	02 2e       	mov	r0, r18
    3140:	02 c0       	rjmp	.+4      	; 0x3146 <Dio_vidflipChanel+0x6c>
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	0a 94       	dec	r0
    3148:	e2 f7       	brpl	.-8      	; 0x3142 <Dio_vidflipChanel+0x68>
    314a:	84 27       	eor	r24, r20
    314c:	8c 93       	st	X, r24
    314e:	3b c0       	rjmp	.+118    	; 0x31c6 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,pin);
    3150:	a8 e3       	ldi	r26, 0x38	; 56
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	e8 e3       	ldi	r30, 0x38	; 56
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	48 2f       	mov	r20, r24
    315c:	8a 81       	ldd	r24, Y+2	; 0x02
    315e:	28 2f       	mov	r18, r24
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	02 2e       	mov	r0, r18
    3168:	02 c0       	rjmp	.+4      	; 0x316e <Dio_vidflipChanel+0x94>
    316a:	88 0f       	add	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	0a 94       	dec	r0
    3170:	e2 f7       	brpl	.-8      	; 0x316a <Dio_vidflipChanel+0x90>
    3172:	84 27       	eor	r24, r20
    3174:	8c 93       	st	X, r24
    3176:	27 c0       	rjmp	.+78     	; 0x31c6 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,pin);
    3178:	a5 e3       	ldi	r26, 0x35	; 53
    317a:	b0 e0       	ldi	r27, 0x00	; 0
    317c:	e5 e3       	ldi	r30, 0x35	; 53
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	48 2f       	mov	r20, r24
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	28 2f       	mov	r18, r24
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	02 2e       	mov	r0, r18
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <Dio_vidflipChanel+0xbc>
    3192:	88 0f       	add	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	0a 94       	dec	r0
    3198:	e2 f7       	brpl	.-8      	; 0x3192 <Dio_vidflipChanel+0xb8>
    319a:	84 27       	eor	r24, r20
    319c:	8c 93       	st	X, r24
    319e:	13 c0       	rjmp	.+38     	; 0x31c6 <Dio_vidflipChanel+0xec>
		break;

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,pin);
    31a0:	a2 e3       	ldi	r26, 0x32	; 50
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	e2 e3       	ldi	r30, 0x32	; 50
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	48 2f       	mov	r20, r24
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	28 2f       	mov	r18, r24
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	02 2e       	mov	r0, r18
    31b8:	02 c0       	rjmp	.+4      	; 0x31be <Dio_vidflipChanel+0xe4>
    31ba:	88 0f       	add	r24, r24
    31bc:	99 1f       	adc	r25, r25
    31be:	0a 94       	dec	r0
    31c0:	e2 f7       	brpl	.-8      	; 0x31ba <Dio_vidflipChanel+0xe0>
    31c2:	84 27       	eor	r24, r20
    31c4:	8c 93       	st	X, r24
		break;
	}
}
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	08 95       	ret

000031d4 <Adc_vidInit>:
#include "Adc_Reg.h"
#include "Adc_Types.h"
#include "Bit_Math.h"

void Adc_vidInit(void)
{
    31d4:	df 93       	push	r29
    31d6:	cf 93       	push	r28
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62

	/*	Enable ADC	*/
	SET_BIT(ADC_ADCSRA_REG, 7);
    31dc:	a6 e2       	ldi	r26, 0x26	; 38
    31de:	b0 e0       	ldi	r27, 0x00	; 0
    31e0:	e6 e2       	ldi	r30, 0x26	; 38
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	80 81       	ld	r24, Z
    31e6:	80 68       	ori	r24, 0x80	; 128
    31e8:	8c 93       	st	X, r24
	/*	Configure ADC prescaler	 /128	*/
	ADC_ADCSRA_REG |= 7 /*0000 0111*/;
    31ea:	a6 e2       	ldi	r26, 0x26	; 38
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	e6 e2       	ldi	r30, 0x26	; 38
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	87 60       	ori	r24, 0x07	; 7
    31f6:	8c 93       	st	X, r24
	/*	Select Vref +	AVCC	*/
	SET_BIT(ADC_ADMUX_REG,6);
    31f8:	a7 e2       	ldi	r26, 0x27	; 39
    31fa:	b0 e0       	ldi	r27, 0x00	; 0
    31fc:	e7 e2       	ldi	r30, 0x27	; 39
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	80 81       	ld	r24, Z
    3202:	80 64       	ori	r24, 0x40	; 64
    3204:	8c 93       	st	X, r24
}
    3206:	cf 91       	pop	r28
    3208:	df 91       	pop	r29
    320a:	08 95       	ret

0000320c <Adc_u16AdcRead>:

f64 Adc_u16AdcRead(adc_channlId_t channel)
{
    320c:	df 93       	push	r29
    320e:	cf 93       	push	r28
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	27 97       	sbiw	r28, 0x07	; 7
    3216:	0f b6       	in	r0, 0x3f	; 63
    3218:	f8 94       	cli
    321a:	de bf       	out	0x3e, r29	; 62
    321c:	0f be       	out	0x3f, r0	; 63
    321e:	cd bf       	out	0x3d, r28	; 61
    3220:	8f 83       	std	Y+7, r24	; 0x07
	u16 loc_adcResult = 0;
    3222:	1e 82       	std	Y+6, r1	; 0x06
    3224:	1d 82       	std	Y+5, r1	; 0x05
	f64 loc_volt =0;
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	a0 e0       	ldi	r26, 0x00	; 0
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	89 83       	std	Y+1, r24	; 0x01
    3230:	9a 83       	std	Y+2, r25	; 0x02
    3232:	ab 83       	std	Y+3, r26	; 0x03
    3234:	bc 83       	std	Y+4, r27	; 0x04
	/*	select ADC channel	*/
	ADC_ADMUX_REG =  (ADC_ADMUX_REG & 0xF8)| channel;
    3236:	a7 e2       	ldi	r26, 0x27	; 39
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	e7 e2       	ldi	r30, 0x27	; 39
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	98 2f       	mov	r25, r24
    3242:	98 7f       	andi	r25, 0xF8	; 248
    3244:	8f 81       	ldd	r24, Y+7	; 0x07
    3246:	89 2b       	or	r24, r25
    3248:	8c 93       	st	X, r24
	/*	Start ADC conversion	*/
	SET_BIT(ADC_ADCSRA_REG,6);
    324a:	a6 e2       	ldi	r26, 0x26	; 38
    324c:	b0 e0       	ldi	r27, 0x00	; 0
    324e:	e6 e2       	ldi	r30, 0x26	; 38
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	80 64       	ori	r24, 0x40	; 64
    3256:	8c 93       	st	X, r24

	/*	wait until ADIF flag become 1 */
	while(CHECK_BIT(ADC_ADCSRA_REG,4) !=1)
    3258:	e6 e2       	ldi	r30, 0x26	; 38
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	82 95       	swap	r24
    3260:	8f 70       	andi	r24, 0x0F	; 15
    3262:	88 2f       	mov	r24, r24
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	81 70       	andi	r24, 0x01	; 1
    3268:	90 70       	andi	r25, 0x00	; 0
    326a:	00 97       	sbiw	r24, 0x00	; 0
    326c:	a9 f3       	breq	.-22     	; 0x3258 <Adc_u16AdcRead+0x4c>
	{
		/*	Do Nothing	*/
	}

	/*	clear ADIF by writing 1 	*/
	SET_BIT(ADC_ADCSRA_REG,4);
    326e:	a6 e2       	ldi	r26, 0x26	; 38
    3270:	b0 e0       	ldi	r27, 0x00	; 0
    3272:	e6 e2       	ldi	r30, 0x26	; 38
    3274:	f0 e0       	ldi	r31, 0x00	; 0
    3276:	80 81       	ld	r24, Z
    3278:	80 61       	ori	r24, 0x10	; 16
    327a:	8c 93       	st	X, r24

	/*	read ADC result form ADCL, ADCH	*/
	loc_adcResult=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    327c:	e4 e2       	ldi	r30, 0x24	; 36
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	28 2f       	mov	r18, r24
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	e5 e2       	ldi	r30, 0x25	; 37
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	88 2f       	mov	r24, r24
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	98 2f       	mov	r25, r24
    3292:	88 27       	eor	r24, r24
    3294:	82 2b       	or	r24, r18
    3296:	93 2b       	or	r25, r19
    3298:	9e 83       	std	Y+6, r25	; 0x06
    329a:	8d 83       	std	Y+5, r24	; 0x05

	loc_volt = loc_adcResult * ADC_STEP;
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	9e 81       	ldd	r25, Y+6	; 0x06
    32a0:	cc 01       	movw	r24, r24
    32a2:	a0 e0       	ldi	r26, 0x00	; 0
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	bc 01       	movw	r22, r24
    32a8:	cd 01       	movw	r24, r26
    32aa:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	bc 01       	movw	r22, r24
    32b4:	cd 01       	movw	r24, r26
    32b6:	2a e9       	ldi	r18, 0x9A	; 154
    32b8:	39 e9       	ldi	r19, 0x99	; 153
    32ba:	49 e9       	ldi	r20, 0x99	; 153
    32bc:	50 e4       	ldi	r21, 0x40	; 64
    32be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	89 83       	std	Y+1, r24	; 0x01
    32c8:	9a 83       	std	Y+2, r25	; 0x02
    32ca:	ab 83       	std	Y+3, r26	; 0x03
    32cc:	bc 83       	std	Y+4, r27	; 0x04
	return loc_volt;
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	9a 81       	ldd	r25, Y+2	; 0x02
    32d2:	ab 81       	ldd	r26, Y+3	; 0x03
    32d4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    32d6:	bc 01       	movw	r22, r24
    32d8:	cd 01       	movw	r24, r26
    32da:	27 96       	adiw	r28, 0x07	; 7
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	f8 94       	cli
    32e0:	de bf       	out	0x3e, r29	; 62
    32e2:	0f be       	out	0x3f, r0	; 63
    32e4:	cd bf       	out	0x3d, r28	; 61
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <__udivmodqi4>:
    32ec:	99 1b       	sub	r25, r25
    32ee:	79 e0       	ldi	r23, 0x09	; 9
    32f0:	04 c0       	rjmp	.+8      	; 0x32fa <__udivmodqi4_ep>

000032f2 <__udivmodqi4_loop>:
    32f2:	99 1f       	adc	r25, r25
    32f4:	96 17       	cp	r25, r22
    32f6:	08 f0       	brcs	.+2      	; 0x32fa <__udivmodqi4_ep>
    32f8:	96 1b       	sub	r25, r22

000032fa <__udivmodqi4_ep>:
    32fa:	88 1f       	adc	r24, r24
    32fc:	7a 95       	dec	r23
    32fe:	c9 f7       	brne	.-14     	; 0x32f2 <__udivmodqi4_loop>
    3300:	80 95       	com	r24
    3302:	08 95       	ret

00003304 <__udivmodsi4>:
    3304:	a1 e2       	ldi	r26, 0x21	; 33
    3306:	1a 2e       	mov	r1, r26
    3308:	aa 1b       	sub	r26, r26
    330a:	bb 1b       	sub	r27, r27
    330c:	fd 01       	movw	r30, r26
    330e:	0d c0       	rjmp	.+26     	; 0x332a <__udivmodsi4_ep>

00003310 <__udivmodsi4_loop>:
    3310:	aa 1f       	adc	r26, r26
    3312:	bb 1f       	adc	r27, r27
    3314:	ee 1f       	adc	r30, r30
    3316:	ff 1f       	adc	r31, r31
    3318:	a2 17       	cp	r26, r18
    331a:	b3 07       	cpc	r27, r19
    331c:	e4 07       	cpc	r30, r20
    331e:	f5 07       	cpc	r31, r21
    3320:	20 f0       	brcs	.+8      	; 0x332a <__udivmodsi4_ep>
    3322:	a2 1b       	sub	r26, r18
    3324:	b3 0b       	sbc	r27, r19
    3326:	e4 0b       	sbc	r30, r20
    3328:	f5 0b       	sbc	r31, r21

0000332a <__udivmodsi4_ep>:
    332a:	66 1f       	adc	r22, r22
    332c:	77 1f       	adc	r23, r23
    332e:	88 1f       	adc	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	1a 94       	dec	r1
    3334:	69 f7       	brne	.-38     	; 0x3310 <__udivmodsi4_loop>
    3336:	60 95       	com	r22
    3338:	70 95       	com	r23
    333a:	80 95       	com	r24
    333c:	90 95       	com	r25
    333e:	9b 01       	movw	r18, r22
    3340:	ac 01       	movw	r20, r24
    3342:	bd 01       	movw	r22, r26
    3344:	cf 01       	movw	r24, r30
    3346:	08 95       	ret

00003348 <__prologue_saves__>:
    3348:	2f 92       	push	r2
    334a:	3f 92       	push	r3
    334c:	4f 92       	push	r4
    334e:	5f 92       	push	r5
    3350:	6f 92       	push	r6
    3352:	7f 92       	push	r7
    3354:	8f 92       	push	r8
    3356:	9f 92       	push	r9
    3358:	af 92       	push	r10
    335a:	bf 92       	push	r11
    335c:	cf 92       	push	r12
    335e:	df 92       	push	r13
    3360:	ef 92       	push	r14
    3362:	ff 92       	push	r15
    3364:	0f 93       	push	r16
    3366:	1f 93       	push	r17
    3368:	cf 93       	push	r28
    336a:	df 93       	push	r29
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	ca 1b       	sub	r28, r26
    3372:	db 0b       	sbc	r29, r27
    3374:	0f b6       	in	r0, 0x3f	; 63
    3376:	f8 94       	cli
    3378:	de bf       	out	0x3e, r29	; 62
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	09 94       	ijmp

00003380 <__epilogue_restores__>:
    3380:	2a 88       	ldd	r2, Y+18	; 0x12
    3382:	39 88       	ldd	r3, Y+17	; 0x11
    3384:	48 88       	ldd	r4, Y+16	; 0x10
    3386:	5f 84       	ldd	r5, Y+15	; 0x0f
    3388:	6e 84       	ldd	r6, Y+14	; 0x0e
    338a:	7d 84       	ldd	r7, Y+13	; 0x0d
    338c:	8c 84       	ldd	r8, Y+12	; 0x0c
    338e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3390:	aa 84       	ldd	r10, Y+10	; 0x0a
    3392:	b9 84       	ldd	r11, Y+9	; 0x09
    3394:	c8 84       	ldd	r12, Y+8	; 0x08
    3396:	df 80       	ldd	r13, Y+7	; 0x07
    3398:	ee 80       	ldd	r14, Y+6	; 0x06
    339a:	fd 80       	ldd	r15, Y+5	; 0x05
    339c:	0c 81       	ldd	r16, Y+4	; 0x04
    339e:	1b 81       	ldd	r17, Y+3	; 0x03
    33a0:	aa 81       	ldd	r26, Y+2	; 0x02
    33a2:	b9 81       	ldd	r27, Y+1	; 0x01
    33a4:	ce 0f       	add	r28, r30
    33a6:	d1 1d       	adc	r29, r1
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	de bf       	out	0x3e, r29	; 62
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	cd bf       	out	0x3d, r28	; 61
    33b2:	ed 01       	movw	r28, r26
    33b4:	08 95       	ret

000033b6 <sprintf>:
    33b6:	ae e0       	ldi	r26, 0x0E	; 14
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
    33ba:	e1 ee       	ldi	r30, 0xE1	; 225
    33bc:	f9 e1       	ldi	r31, 0x19	; 25
    33be:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__prologue_saves__+0x1c>
    33c2:	0d 89       	ldd	r16, Y+21	; 0x15
    33c4:	1e 89       	ldd	r17, Y+22	; 0x16
    33c6:	86 e0       	ldi	r24, 0x06	; 6
    33c8:	8c 83       	std	Y+4, r24	; 0x04
    33ca:	1a 83       	std	Y+2, r17	; 0x02
    33cc:	09 83       	std	Y+1, r16	; 0x01
    33ce:	8f ef       	ldi	r24, 0xFF	; 255
    33d0:	9f e7       	ldi	r25, 0x7F	; 127
    33d2:	9e 83       	std	Y+6, r25	; 0x06
    33d4:	8d 83       	std	Y+5, r24	; 0x05
    33d6:	9e 01       	movw	r18, r28
    33d8:	27 5e       	subi	r18, 0xE7	; 231
    33da:	3f 4f       	sbci	r19, 0xFF	; 255
    33dc:	ce 01       	movw	r24, r28
    33de:	01 96       	adiw	r24, 0x01	; 1
    33e0:	6f 89       	ldd	r22, Y+23	; 0x17
    33e2:	78 8d       	ldd	r23, Y+24	; 0x18
    33e4:	a9 01       	movw	r20, r18
    33e6:	0e 94 ff 19 	call	0x33fe	; 0x33fe <vfprintf>
    33ea:	2f 81       	ldd	r18, Y+7	; 0x07
    33ec:	38 85       	ldd	r19, Y+8	; 0x08
    33ee:	02 0f       	add	r16, r18
    33f0:	13 1f       	adc	r17, r19
    33f2:	f8 01       	movw	r30, r16
    33f4:	10 82       	st	Z, r1
    33f6:	2e 96       	adiw	r28, 0x0e	; 14
    33f8:	e4 e0       	ldi	r30, 0x04	; 4
    33fa:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__epilogue_restores__+0x1c>

000033fe <vfprintf>:
    33fe:	ab e0       	ldi	r26, 0x0B	; 11
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	e5 e0       	ldi	r30, 0x05	; 5
    3404:	fa e1       	ldi	r31, 0x1A	; 26
    3406:	0c 94 a4 19 	jmp	0x3348	; 0x3348 <__prologue_saves__>
    340a:	3c 01       	movw	r6, r24
    340c:	2b 01       	movw	r4, r22
    340e:	5a 01       	movw	r10, r20
    3410:	fc 01       	movw	r30, r24
    3412:	17 82       	std	Z+7, r1	; 0x07
    3414:	16 82       	std	Z+6, r1	; 0x06
    3416:	83 81       	ldd	r24, Z+3	; 0x03
    3418:	81 fd       	sbrc	r24, 1
    341a:	03 c0       	rjmp	.+6      	; 0x3422 <vfprintf+0x24>
    341c:	6f ef       	ldi	r22, 0xFF	; 255
    341e:	7f ef       	ldi	r23, 0xFF	; 255
    3420:	c6 c1       	rjmp	.+908    	; 0x37ae <vfprintf+0x3b0>
    3422:	9a e0       	ldi	r25, 0x0A	; 10
    3424:	89 2e       	mov	r8, r25
    3426:	1e 01       	movw	r2, r28
    3428:	08 94       	sec
    342a:	21 1c       	adc	r2, r1
    342c:	31 1c       	adc	r3, r1
    342e:	f3 01       	movw	r30, r6
    3430:	23 81       	ldd	r18, Z+3	; 0x03
    3432:	f2 01       	movw	r30, r4
    3434:	23 fd       	sbrc	r18, 3
    3436:	85 91       	lpm	r24, Z+
    3438:	23 ff       	sbrs	r18, 3
    343a:	81 91       	ld	r24, Z+
    343c:	2f 01       	movw	r4, r30
    343e:	88 23       	and	r24, r24
    3440:	09 f4       	brne	.+2      	; 0x3444 <vfprintf+0x46>
    3442:	b2 c1       	rjmp	.+868    	; 0x37a8 <vfprintf+0x3aa>
    3444:	85 32       	cpi	r24, 0x25	; 37
    3446:	39 f4       	brne	.+14     	; 0x3456 <vfprintf+0x58>
    3448:	23 fd       	sbrc	r18, 3
    344a:	85 91       	lpm	r24, Z+
    344c:	23 ff       	sbrs	r18, 3
    344e:	81 91       	ld	r24, Z+
    3450:	2f 01       	movw	r4, r30
    3452:	85 32       	cpi	r24, 0x25	; 37
    3454:	29 f4       	brne	.+10     	; 0x3460 <vfprintf+0x62>
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	b3 01       	movw	r22, r6
    345a:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <fputc>
    345e:	e7 cf       	rjmp	.-50     	; 0x342e <vfprintf+0x30>
    3460:	98 2f       	mov	r25, r24
    3462:	ff 24       	eor	r15, r15
    3464:	ee 24       	eor	r14, r14
    3466:	99 24       	eor	r9, r9
    3468:	ff e1       	ldi	r31, 0x1F	; 31
    346a:	ff 15       	cp	r31, r15
    346c:	d0 f0       	brcs	.+52     	; 0x34a2 <vfprintf+0xa4>
    346e:	9b 32       	cpi	r25, 0x2B	; 43
    3470:	69 f0       	breq	.+26     	; 0x348c <vfprintf+0x8e>
    3472:	9c 32       	cpi	r25, 0x2C	; 44
    3474:	28 f4       	brcc	.+10     	; 0x3480 <vfprintf+0x82>
    3476:	90 32       	cpi	r25, 0x20	; 32
    3478:	59 f0       	breq	.+22     	; 0x3490 <vfprintf+0x92>
    347a:	93 32       	cpi	r25, 0x23	; 35
    347c:	91 f4       	brne	.+36     	; 0x34a2 <vfprintf+0xa4>
    347e:	0e c0       	rjmp	.+28     	; 0x349c <vfprintf+0x9e>
    3480:	9d 32       	cpi	r25, 0x2D	; 45
    3482:	49 f0       	breq	.+18     	; 0x3496 <vfprintf+0x98>
    3484:	90 33       	cpi	r25, 0x30	; 48
    3486:	69 f4       	brne	.+26     	; 0x34a2 <vfprintf+0xa4>
    3488:	41 e0       	ldi	r20, 0x01	; 1
    348a:	24 c0       	rjmp	.+72     	; 0x34d4 <vfprintf+0xd6>
    348c:	52 e0       	ldi	r21, 0x02	; 2
    348e:	f5 2a       	or	r15, r21
    3490:	84 e0       	ldi	r24, 0x04	; 4
    3492:	f8 2a       	or	r15, r24
    3494:	28 c0       	rjmp	.+80     	; 0x34e6 <vfprintf+0xe8>
    3496:	98 e0       	ldi	r25, 0x08	; 8
    3498:	f9 2a       	or	r15, r25
    349a:	25 c0       	rjmp	.+74     	; 0x34e6 <vfprintf+0xe8>
    349c:	e0 e1       	ldi	r30, 0x10	; 16
    349e:	fe 2a       	or	r15, r30
    34a0:	22 c0       	rjmp	.+68     	; 0x34e6 <vfprintf+0xe8>
    34a2:	f7 fc       	sbrc	r15, 7
    34a4:	29 c0       	rjmp	.+82     	; 0x34f8 <vfprintf+0xfa>
    34a6:	89 2f       	mov	r24, r25
    34a8:	80 53       	subi	r24, 0x30	; 48
    34aa:	8a 30       	cpi	r24, 0x0A	; 10
    34ac:	70 f4       	brcc	.+28     	; 0x34ca <vfprintf+0xcc>
    34ae:	f6 fe       	sbrs	r15, 6
    34b0:	05 c0       	rjmp	.+10     	; 0x34bc <vfprintf+0xbe>
    34b2:	98 9c       	mul	r9, r8
    34b4:	90 2c       	mov	r9, r0
    34b6:	11 24       	eor	r1, r1
    34b8:	98 0e       	add	r9, r24
    34ba:	15 c0       	rjmp	.+42     	; 0x34e6 <vfprintf+0xe8>
    34bc:	e8 9c       	mul	r14, r8
    34be:	e0 2c       	mov	r14, r0
    34c0:	11 24       	eor	r1, r1
    34c2:	e8 0e       	add	r14, r24
    34c4:	f0 e2       	ldi	r31, 0x20	; 32
    34c6:	ff 2a       	or	r15, r31
    34c8:	0e c0       	rjmp	.+28     	; 0x34e6 <vfprintf+0xe8>
    34ca:	9e 32       	cpi	r25, 0x2E	; 46
    34cc:	29 f4       	brne	.+10     	; 0x34d8 <vfprintf+0xda>
    34ce:	f6 fc       	sbrc	r15, 6
    34d0:	6b c1       	rjmp	.+726    	; 0x37a8 <vfprintf+0x3aa>
    34d2:	40 e4       	ldi	r20, 0x40	; 64
    34d4:	f4 2a       	or	r15, r20
    34d6:	07 c0       	rjmp	.+14     	; 0x34e6 <vfprintf+0xe8>
    34d8:	9c 36       	cpi	r25, 0x6C	; 108
    34da:	19 f4       	brne	.+6      	; 0x34e2 <vfprintf+0xe4>
    34dc:	50 e8       	ldi	r21, 0x80	; 128
    34de:	f5 2a       	or	r15, r21
    34e0:	02 c0       	rjmp	.+4      	; 0x34e6 <vfprintf+0xe8>
    34e2:	98 36       	cpi	r25, 0x68	; 104
    34e4:	49 f4       	brne	.+18     	; 0x34f8 <vfprintf+0xfa>
    34e6:	f2 01       	movw	r30, r4
    34e8:	23 fd       	sbrc	r18, 3
    34ea:	95 91       	lpm	r25, Z+
    34ec:	23 ff       	sbrs	r18, 3
    34ee:	91 91       	ld	r25, Z+
    34f0:	2f 01       	movw	r4, r30
    34f2:	99 23       	and	r25, r25
    34f4:	09 f0       	breq	.+2      	; 0x34f8 <vfprintf+0xfa>
    34f6:	b8 cf       	rjmp	.-144    	; 0x3468 <vfprintf+0x6a>
    34f8:	89 2f       	mov	r24, r25
    34fa:	85 54       	subi	r24, 0x45	; 69
    34fc:	83 30       	cpi	r24, 0x03	; 3
    34fe:	18 f0       	brcs	.+6      	; 0x3506 <vfprintf+0x108>
    3500:	80 52       	subi	r24, 0x20	; 32
    3502:	83 30       	cpi	r24, 0x03	; 3
    3504:	38 f4       	brcc	.+14     	; 0x3514 <vfprintf+0x116>
    3506:	44 e0       	ldi	r20, 0x04	; 4
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	a4 0e       	add	r10, r20
    350c:	b5 1e       	adc	r11, r21
    350e:	5f e3       	ldi	r21, 0x3F	; 63
    3510:	59 83       	std	Y+1, r21	; 0x01
    3512:	0f c0       	rjmp	.+30     	; 0x3532 <vfprintf+0x134>
    3514:	93 36       	cpi	r25, 0x63	; 99
    3516:	31 f0       	breq	.+12     	; 0x3524 <vfprintf+0x126>
    3518:	93 37       	cpi	r25, 0x73	; 115
    351a:	79 f0       	breq	.+30     	; 0x353a <vfprintf+0x13c>
    351c:	93 35       	cpi	r25, 0x53	; 83
    351e:	09 f0       	breq	.+2      	; 0x3522 <vfprintf+0x124>
    3520:	56 c0       	rjmp	.+172    	; 0x35ce <vfprintf+0x1d0>
    3522:	20 c0       	rjmp	.+64     	; 0x3564 <vfprintf+0x166>
    3524:	f5 01       	movw	r30, r10
    3526:	80 81       	ld	r24, Z
    3528:	89 83       	std	Y+1, r24	; 0x01
    352a:	42 e0       	ldi	r20, 0x02	; 2
    352c:	50 e0       	ldi	r21, 0x00	; 0
    352e:	a4 0e       	add	r10, r20
    3530:	b5 1e       	adc	r11, r21
    3532:	61 01       	movw	r12, r2
    3534:	01 e0       	ldi	r16, 0x01	; 1
    3536:	10 e0       	ldi	r17, 0x00	; 0
    3538:	12 c0       	rjmp	.+36     	; 0x355e <vfprintf+0x160>
    353a:	f5 01       	movw	r30, r10
    353c:	c0 80       	ld	r12, Z
    353e:	d1 80       	ldd	r13, Z+1	; 0x01
    3540:	f6 fc       	sbrc	r15, 6
    3542:	03 c0       	rjmp	.+6      	; 0x354a <vfprintf+0x14c>
    3544:	6f ef       	ldi	r22, 0xFF	; 255
    3546:	7f ef       	ldi	r23, 0xFF	; 255
    3548:	02 c0       	rjmp	.+4      	; 0x354e <vfprintf+0x150>
    354a:	69 2d       	mov	r22, r9
    354c:	70 e0       	ldi	r23, 0x00	; 0
    354e:	42 e0       	ldi	r20, 0x02	; 2
    3550:	50 e0       	ldi	r21, 0x00	; 0
    3552:	a4 0e       	add	r10, r20
    3554:	b5 1e       	adc	r11, r21
    3556:	c6 01       	movw	r24, r12
    3558:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <strnlen>
    355c:	8c 01       	movw	r16, r24
    355e:	5f e7       	ldi	r21, 0x7F	; 127
    3560:	f5 22       	and	r15, r21
    3562:	14 c0       	rjmp	.+40     	; 0x358c <vfprintf+0x18e>
    3564:	f5 01       	movw	r30, r10
    3566:	c0 80       	ld	r12, Z
    3568:	d1 80       	ldd	r13, Z+1	; 0x01
    356a:	f6 fc       	sbrc	r15, 6
    356c:	03 c0       	rjmp	.+6      	; 0x3574 <vfprintf+0x176>
    356e:	6f ef       	ldi	r22, 0xFF	; 255
    3570:	7f ef       	ldi	r23, 0xFF	; 255
    3572:	02 c0       	rjmp	.+4      	; 0x3578 <vfprintf+0x17a>
    3574:	69 2d       	mov	r22, r9
    3576:	70 e0       	ldi	r23, 0x00	; 0
    3578:	42 e0       	ldi	r20, 0x02	; 2
    357a:	50 e0       	ldi	r21, 0x00	; 0
    357c:	a4 0e       	add	r10, r20
    357e:	b5 1e       	adc	r11, r21
    3580:	c6 01       	movw	r24, r12
    3582:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <strnlen_P>
    3586:	8c 01       	movw	r16, r24
    3588:	50 e8       	ldi	r21, 0x80	; 128
    358a:	f5 2a       	or	r15, r21
    358c:	f3 fe       	sbrs	r15, 3
    358e:	07 c0       	rjmp	.+14     	; 0x359e <vfprintf+0x1a0>
    3590:	1a c0       	rjmp	.+52     	; 0x35c6 <vfprintf+0x1c8>
    3592:	80 e2       	ldi	r24, 0x20	; 32
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	b3 01       	movw	r22, r6
    3598:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <fputc>
    359c:	ea 94       	dec	r14
    359e:	8e 2d       	mov	r24, r14
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	08 17       	cp	r16, r24
    35a4:	19 07       	cpc	r17, r25
    35a6:	a8 f3       	brcs	.-22     	; 0x3592 <vfprintf+0x194>
    35a8:	0e c0       	rjmp	.+28     	; 0x35c6 <vfprintf+0x1c8>
    35aa:	f6 01       	movw	r30, r12
    35ac:	f7 fc       	sbrc	r15, 7
    35ae:	85 91       	lpm	r24, Z+
    35b0:	f7 fe       	sbrs	r15, 7
    35b2:	81 91       	ld	r24, Z+
    35b4:	6f 01       	movw	r12, r30
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	b3 01       	movw	r22, r6
    35ba:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <fputc>
    35be:	e1 10       	cpse	r14, r1
    35c0:	ea 94       	dec	r14
    35c2:	01 50       	subi	r16, 0x01	; 1
    35c4:	10 40       	sbci	r17, 0x00	; 0
    35c6:	01 15       	cp	r16, r1
    35c8:	11 05       	cpc	r17, r1
    35ca:	79 f7       	brne	.-34     	; 0x35aa <vfprintf+0x1ac>
    35cc:	ea c0       	rjmp	.+468    	; 0x37a2 <vfprintf+0x3a4>
    35ce:	94 36       	cpi	r25, 0x64	; 100
    35d0:	11 f0       	breq	.+4      	; 0x35d6 <vfprintf+0x1d8>
    35d2:	99 36       	cpi	r25, 0x69	; 105
    35d4:	69 f5       	brne	.+90     	; 0x3630 <vfprintf+0x232>
    35d6:	f7 fe       	sbrs	r15, 7
    35d8:	08 c0       	rjmp	.+16     	; 0x35ea <vfprintf+0x1ec>
    35da:	f5 01       	movw	r30, r10
    35dc:	20 81       	ld	r18, Z
    35de:	31 81       	ldd	r19, Z+1	; 0x01
    35e0:	42 81       	ldd	r20, Z+2	; 0x02
    35e2:	53 81       	ldd	r21, Z+3	; 0x03
    35e4:	84 e0       	ldi	r24, 0x04	; 4
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	0a c0       	rjmp	.+20     	; 0x35fe <vfprintf+0x200>
    35ea:	f5 01       	movw	r30, r10
    35ec:	80 81       	ld	r24, Z
    35ee:	91 81       	ldd	r25, Z+1	; 0x01
    35f0:	9c 01       	movw	r18, r24
    35f2:	44 27       	eor	r20, r20
    35f4:	37 fd       	sbrc	r19, 7
    35f6:	40 95       	com	r20
    35f8:	54 2f       	mov	r21, r20
    35fa:	82 e0       	ldi	r24, 0x02	; 2
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	a8 0e       	add	r10, r24
    3600:	b9 1e       	adc	r11, r25
    3602:	9f e6       	ldi	r25, 0x6F	; 111
    3604:	f9 22       	and	r15, r25
    3606:	57 ff       	sbrs	r21, 7
    3608:	09 c0       	rjmp	.+18     	; 0x361c <vfprintf+0x21e>
    360a:	50 95       	com	r21
    360c:	40 95       	com	r20
    360e:	30 95       	com	r19
    3610:	21 95       	neg	r18
    3612:	3f 4f       	sbci	r19, 0xFF	; 255
    3614:	4f 4f       	sbci	r20, 0xFF	; 255
    3616:	5f 4f       	sbci	r21, 0xFF	; 255
    3618:	e0 e8       	ldi	r30, 0x80	; 128
    361a:	fe 2a       	or	r15, r30
    361c:	ca 01       	movw	r24, r20
    361e:	b9 01       	movw	r22, r18
    3620:	a1 01       	movw	r20, r2
    3622:	2a e0       	ldi	r18, 0x0A	; 10
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	0e 94 1e 1c 	call	0x383c	; 0x383c <__ultoa_invert>
    362a:	d8 2e       	mov	r13, r24
    362c:	d2 18       	sub	r13, r2
    362e:	40 c0       	rjmp	.+128    	; 0x36b0 <vfprintf+0x2b2>
    3630:	95 37       	cpi	r25, 0x75	; 117
    3632:	29 f4       	brne	.+10     	; 0x363e <vfprintf+0x240>
    3634:	1f 2d       	mov	r17, r15
    3636:	1f 7e       	andi	r17, 0xEF	; 239
    3638:	2a e0       	ldi	r18, 0x0A	; 10
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	1d c0       	rjmp	.+58     	; 0x3678 <vfprintf+0x27a>
    363e:	1f 2d       	mov	r17, r15
    3640:	19 7f       	andi	r17, 0xF9	; 249
    3642:	9f 36       	cpi	r25, 0x6F	; 111
    3644:	61 f0       	breq	.+24     	; 0x365e <vfprintf+0x260>
    3646:	90 37       	cpi	r25, 0x70	; 112
    3648:	20 f4       	brcc	.+8      	; 0x3652 <vfprintf+0x254>
    364a:	98 35       	cpi	r25, 0x58	; 88
    364c:	09 f0       	breq	.+2      	; 0x3650 <vfprintf+0x252>
    364e:	ac c0       	rjmp	.+344    	; 0x37a8 <vfprintf+0x3aa>
    3650:	0f c0       	rjmp	.+30     	; 0x3670 <vfprintf+0x272>
    3652:	90 37       	cpi	r25, 0x70	; 112
    3654:	39 f0       	breq	.+14     	; 0x3664 <vfprintf+0x266>
    3656:	98 37       	cpi	r25, 0x78	; 120
    3658:	09 f0       	breq	.+2      	; 0x365c <vfprintf+0x25e>
    365a:	a6 c0       	rjmp	.+332    	; 0x37a8 <vfprintf+0x3aa>
    365c:	04 c0       	rjmp	.+8      	; 0x3666 <vfprintf+0x268>
    365e:	28 e0       	ldi	r18, 0x08	; 8
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	0a c0       	rjmp	.+20     	; 0x3678 <vfprintf+0x27a>
    3664:	10 61       	ori	r17, 0x10	; 16
    3666:	14 fd       	sbrc	r17, 4
    3668:	14 60       	ori	r17, 0x04	; 4
    366a:	20 e1       	ldi	r18, 0x10	; 16
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	04 c0       	rjmp	.+8      	; 0x3678 <vfprintf+0x27a>
    3670:	14 fd       	sbrc	r17, 4
    3672:	16 60       	ori	r17, 0x06	; 6
    3674:	20 e1       	ldi	r18, 0x10	; 16
    3676:	32 e0       	ldi	r19, 0x02	; 2
    3678:	17 ff       	sbrs	r17, 7
    367a:	08 c0       	rjmp	.+16     	; 0x368c <vfprintf+0x28e>
    367c:	f5 01       	movw	r30, r10
    367e:	60 81       	ld	r22, Z
    3680:	71 81       	ldd	r23, Z+1	; 0x01
    3682:	82 81       	ldd	r24, Z+2	; 0x02
    3684:	93 81       	ldd	r25, Z+3	; 0x03
    3686:	44 e0       	ldi	r20, 0x04	; 4
    3688:	50 e0       	ldi	r21, 0x00	; 0
    368a:	08 c0       	rjmp	.+16     	; 0x369c <vfprintf+0x29e>
    368c:	f5 01       	movw	r30, r10
    368e:	80 81       	ld	r24, Z
    3690:	91 81       	ldd	r25, Z+1	; 0x01
    3692:	bc 01       	movw	r22, r24
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	42 e0       	ldi	r20, 0x02	; 2
    369a:	50 e0       	ldi	r21, 0x00	; 0
    369c:	a4 0e       	add	r10, r20
    369e:	b5 1e       	adc	r11, r21
    36a0:	a1 01       	movw	r20, r2
    36a2:	0e 94 1e 1c 	call	0x383c	; 0x383c <__ultoa_invert>
    36a6:	d8 2e       	mov	r13, r24
    36a8:	d2 18       	sub	r13, r2
    36aa:	8f e7       	ldi	r24, 0x7F	; 127
    36ac:	f8 2e       	mov	r15, r24
    36ae:	f1 22       	and	r15, r17
    36b0:	f6 fe       	sbrs	r15, 6
    36b2:	0b c0       	rjmp	.+22     	; 0x36ca <vfprintf+0x2cc>
    36b4:	5e ef       	ldi	r21, 0xFE	; 254
    36b6:	f5 22       	and	r15, r21
    36b8:	d9 14       	cp	r13, r9
    36ba:	38 f4       	brcc	.+14     	; 0x36ca <vfprintf+0x2cc>
    36bc:	f4 fe       	sbrs	r15, 4
    36be:	07 c0       	rjmp	.+14     	; 0x36ce <vfprintf+0x2d0>
    36c0:	f2 fc       	sbrc	r15, 2
    36c2:	05 c0       	rjmp	.+10     	; 0x36ce <vfprintf+0x2d0>
    36c4:	8f ee       	ldi	r24, 0xEF	; 239
    36c6:	f8 22       	and	r15, r24
    36c8:	02 c0       	rjmp	.+4      	; 0x36ce <vfprintf+0x2d0>
    36ca:	1d 2d       	mov	r17, r13
    36cc:	01 c0       	rjmp	.+2      	; 0x36d0 <vfprintf+0x2d2>
    36ce:	19 2d       	mov	r17, r9
    36d0:	f4 fe       	sbrs	r15, 4
    36d2:	0d c0       	rjmp	.+26     	; 0x36ee <vfprintf+0x2f0>
    36d4:	fe 01       	movw	r30, r28
    36d6:	ed 0d       	add	r30, r13
    36d8:	f1 1d       	adc	r31, r1
    36da:	80 81       	ld	r24, Z
    36dc:	80 33       	cpi	r24, 0x30	; 48
    36de:	19 f4       	brne	.+6      	; 0x36e6 <vfprintf+0x2e8>
    36e0:	99 ee       	ldi	r25, 0xE9	; 233
    36e2:	f9 22       	and	r15, r25
    36e4:	08 c0       	rjmp	.+16     	; 0x36f6 <vfprintf+0x2f8>
    36e6:	1f 5f       	subi	r17, 0xFF	; 255
    36e8:	f2 fe       	sbrs	r15, 2
    36ea:	05 c0       	rjmp	.+10     	; 0x36f6 <vfprintf+0x2f8>
    36ec:	03 c0       	rjmp	.+6      	; 0x36f4 <vfprintf+0x2f6>
    36ee:	8f 2d       	mov	r24, r15
    36f0:	86 78       	andi	r24, 0x86	; 134
    36f2:	09 f0       	breq	.+2      	; 0x36f6 <vfprintf+0x2f8>
    36f4:	1f 5f       	subi	r17, 0xFF	; 255
    36f6:	0f 2d       	mov	r16, r15
    36f8:	f3 fc       	sbrc	r15, 3
    36fa:	14 c0       	rjmp	.+40     	; 0x3724 <vfprintf+0x326>
    36fc:	f0 fe       	sbrs	r15, 0
    36fe:	0f c0       	rjmp	.+30     	; 0x371e <vfprintf+0x320>
    3700:	1e 15       	cp	r17, r14
    3702:	10 f0       	brcs	.+4      	; 0x3708 <vfprintf+0x30a>
    3704:	9d 2c       	mov	r9, r13
    3706:	0b c0       	rjmp	.+22     	; 0x371e <vfprintf+0x320>
    3708:	9d 2c       	mov	r9, r13
    370a:	9e 0c       	add	r9, r14
    370c:	91 1a       	sub	r9, r17
    370e:	1e 2d       	mov	r17, r14
    3710:	06 c0       	rjmp	.+12     	; 0x371e <vfprintf+0x320>
    3712:	80 e2       	ldi	r24, 0x20	; 32
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	b3 01       	movw	r22, r6
    3718:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <fputc>
    371c:	1f 5f       	subi	r17, 0xFF	; 255
    371e:	1e 15       	cp	r17, r14
    3720:	c0 f3       	brcs	.-16     	; 0x3712 <vfprintf+0x314>
    3722:	04 c0       	rjmp	.+8      	; 0x372c <vfprintf+0x32e>
    3724:	1e 15       	cp	r17, r14
    3726:	10 f4       	brcc	.+4      	; 0x372c <vfprintf+0x32e>
    3728:	e1 1a       	sub	r14, r17
    372a:	01 c0       	rjmp	.+2      	; 0x372e <vfprintf+0x330>
    372c:	ee 24       	eor	r14, r14
    372e:	04 ff       	sbrs	r16, 4
    3730:	0f c0       	rjmp	.+30     	; 0x3750 <vfprintf+0x352>
    3732:	80 e3       	ldi	r24, 0x30	; 48
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	b3 01       	movw	r22, r6
    3738:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <fputc>
    373c:	02 ff       	sbrs	r16, 2
    373e:	1d c0       	rjmp	.+58     	; 0x377a <vfprintf+0x37c>
    3740:	01 fd       	sbrc	r16, 1
    3742:	03 c0       	rjmp	.+6      	; 0x374a <vfprintf+0x34c>
    3744:	88 e7       	ldi	r24, 0x78	; 120
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	0e c0       	rjmp	.+28     	; 0x3766 <vfprintf+0x368>
    374a:	88 e5       	ldi	r24, 0x58	; 88
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	0b c0       	rjmp	.+22     	; 0x3766 <vfprintf+0x368>
    3750:	80 2f       	mov	r24, r16
    3752:	86 78       	andi	r24, 0x86	; 134
    3754:	91 f0       	breq	.+36     	; 0x377a <vfprintf+0x37c>
    3756:	01 ff       	sbrs	r16, 1
    3758:	02 c0       	rjmp	.+4      	; 0x375e <vfprintf+0x360>
    375a:	8b e2       	ldi	r24, 0x2B	; 43
    375c:	01 c0       	rjmp	.+2      	; 0x3760 <vfprintf+0x362>
    375e:	80 e2       	ldi	r24, 0x20	; 32
    3760:	f7 fc       	sbrc	r15, 7
    3762:	8d e2       	ldi	r24, 0x2D	; 45
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	b3 01       	movw	r22, r6
    3768:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <fputc>
    376c:	06 c0       	rjmp	.+12     	; 0x377a <vfprintf+0x37c>
    376e:	80 e3       	ldi	r24, 0x30	; 48
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	b3 01       	movw	r22, r6
    3774:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <fputc>
    3778:	9a 94       	dec	r9
    377a:	d9 14       	cp	r13, r9
    377c:	c0 f3       	brcs	.-16     	; 0x376e <vfprintf+0x370>
    377e:	da 94       	dec	r13
    3780:	f1 01       	movw	r30, r2
    3782:	ed 0d       	add	r30, r13
    3784:	f1 1d       	adc	r31, r1
    3786:	80 81       	ld	r24, Z
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	b3 01       	movw	r22, r6
    378c:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <fputc>
    3790:	dd 20       	and	r13, r13
    3792:	a9 f7       	brne	.-22     	; 0x377e <vfprintf+0x380>
    3794:	06 c0       	rjmp	.+12     	; 0x37a2 <vfprintf+0x3a4>
    3796:	80 e2       	ldi	r24, 0x20	; 32
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	b3 01       	movw	r22, r6
    379c:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <fputc>
    37a0:	ea 94       	dec	r14
    37a2:	ee 20       	and	r14, r14
    37a4:	c1 f7       	brne	.-16     	; 0x3796 <vfprintf+0x398>
    37a6:	43 ce       	rjmp	.-890    	; 0x342e <vfprintf+0x30>
    37a8:	f3 01       	movw	r30, r6
    37aa:	66 81       	ldd	r22, Z+6	; 0x06
    37ac:	77 81       	ldd	r23, Z+7	; 0x07
    37ae:	cb 01       	movw	r24, r22
    37b0:	2b 96       	adiw	r28, 0x0b	; 11
    37b2:	e2 e1       	ldi	r30, 0x12	; 18
    37b4:	0c 94 c0 19 	jmp	0x3380	; 0x3380 <__epilogue_restores__>

000037b8 <strnlen_P>:
    37b8:	fc 01       	movw	r30, r24
    37ba:	05 90       	lpm	r0, Z+
    37bc:	61 50       	subi	r22, 0x01	; 1
    37be:	70 40       	sbci	r23, 0x00	; 0
    37c0:	01 10       	cpse	r0, r1
    37c2:	d8 f7       	brcc	.-10     	; 0x37ba <strnlen_P+0x2>
    37c4:	80 95       	com	r24
    37c6:	90 95       	com	r25
    37c8:	8e 0f       	add	r24, r30
    37ca:	9f 1f       	adc	r25, r31
    37cc:	08 95       	ret

000037ce <strnlen>:
    37ce:	fc 01       	movw	r30, r24
    37d0:	61 50       	subi	r22, 0x01	; 1
    37d2:	70 40       	sbci	r23, 0x00	; 0
    37d4:	01 90       	ld	r0, Z+
    37d6:	01 10       	cpse	r0, r1
    37d8:	d8 f7       	brcc	.-10     	; 0x37d0 <strnlen+0x2>
    37da:	80 95       	com	r24
    37dc:	90 95       	com	r25
    37de:	8e 0f       	add	r24, r30
    37e0:	9f 1f       	adc	r25, r31
    37e2:	08 95       	ret

000037e4 <fputc>:
    37e4:	0f 93       	push	r16
    37e6:	1f 93       	push	r17
    37e8:	cf 93       	push	r28
    37ea:	df 93       	push	r29
    37ec:	8c 01       	movw	r16, r24
    37ee:	eb 01       	movw	r28, r22
    37f0:	8b 81       	ldd	r24, Y+3	; 0x03
    37f2:	81 ff       	sbrs	r24, 1
    37f4:	1b c0       	rjmp	.+54     	; 0x382c <fputc+0x48>
    37f6:	82 ff       	sbrs	r24, 2
    37f8:	0d c0       	rjmp	.+26     	; 0x3814 <fputc+0x30>
    37fa:	2e 81       	ldd	r18, Y+6	; 0x06
    37fc:	3f 81       	ldd	r19, Y+7	; 0x07
    37fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3800:	9d 81       	ldd	r25, Y+5	; 0x05
    3802:	28 17       	cp	r18, r24
    3804:	39 07       	cpc	r19, r25
    3806:	64 f4       	brge	.+24     	; 0x3820 <fputc+0x3c>
    3808:	e8 81       	ld	r30, Y
    380a:	f9 81       	ldd	r31, Y+1	; 0x01
    380c:	01 93       	st	Z+, r16
    380e:	f9 83       	std	Y+1, r31	; 0x01
    3810:	e8 83       	st	Y, r30
    3812:	06 c0       	rjmp	.+12     	; 0x3820 <fputc+0x3c>
    3814:	e8 85       	ldd	r30, Y+8	; 0x08
    3816:	f9 85       	ldd	r31, Y+9	; 0x09
    3818:	80 2f       	mov	r24, r16
    381a:	09 95       	icall
    381c:	89 2b       	or	r24, r25
    381e:	31 f4       	brne	.+12     	; 0x382c <fputc+0x48>
    3820:	8e 81       	ldd	r24, Y+6	; 0x06
    3822:	9f 81       	ldd	r25, Y+7	; 0x07
    3824:	01 96       	adiw	r24, 0x01	; 1
    3826:	9f 83       	std	Y+7, r25	; 0x07
    3828:	8e 83       	std	Y+6, r24	; 0x06
    382a:	02 c0       	rjmp	.+4      	; 0x3830 <fputc+0x4c>
    382c:	0f ef       	ldi	r16, 0xFF	; 255
    382e:	1f ef       	ldi	r17, 0xFF	; 255
    3830:	c8 01       	movw	r24, r16
    3832:	df 91       	pop	r29
    3834:	cf 91       	pop	r28
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	08 95       	ret

0000383c <__ultoa_invert>:
    383c:	fa 01       	movw	r30, r20
    383e:	aa 27       	eor	r26, r26
    3840:	28 30       	cpi	r18, 0x08	; 8
    3842:	51 f1       	breq	.+84     	; 0x3898 <__ultoa_invert+0x5c>
    3844:	20 31       	cpi	r18, 0x10	; 16
    3846:	81 f1       	breq	.+96     	; 0x38a8 <__ultoa_invert+0x6c>
    3848:	e8 94       	clt
    384a:	6f 93       	push	r22
    384c:	6e 7f       	andi	r22, 0xFE	; 254
    384e:	6e 5f       	subi	r22, 0xFE	; 254
    3850:	7f 4f       	sbci	r23, 0xFF	; 255
    3852:	8f 4f       	sbci	r24, 0xFF	; 255
    3854:	9f 4f       	sbci	r25, 0xFF	; 255
    3856:	af 4f       	sbci	r26, 0xFF	; 255
    3858:	b1 e0       	ldi	r27, 0x01	; 1
    385a:	3e d0       	rcall	.+124    	; 0x38d8 <__ultoa_invert+0x9c>
    385c:	b4 e0       	ldi	r27, 0x04	; 4
    385e:	3c d0       	rcall	.+120    	; 0x38d8 <__ultoa_invert+0x9c>
    3860:	67 0f       	add	r22, r23
    3862:	78 1f       	adc	r23, r24
    3864:	89 1f       	adc	r24, r25
    3866:	9a 1f       	adc	r25, r26
    3868:	a1 1d       	adc	r26, r1
    386a:	68 0f       	add	r22, r24
    386c:	79 1f       	adc	r23, r25
    386e:	8a 1f       	adc	r24, r26
    3870:	91 1d       	adc	r25, r1
    3872:	a1 1d       	adc	r26, r1
    3874:	6a 0f       	add	r22, r26
    3876:	71 1d       	adc	r23, r1
    3878:	81 1d       	adc	r24, r1
    387a:	91 1d       	adc	r25, r1
    387c:	a1 1d       	adc	r26, r1
    387e:	20 d0       	rcall	.+64     	; 0x38c0 <__ultoa_invert+0x84>
    3880:	09 f4       	brne	.+2      	; 0x3884 <__ultoa_invert+0x48>
    3882:	68 94       	set
    3884:	3f 91       	pop	r19
    3886:	2a e0       	ldi	r18, 0x0A	; 10
    3888:	26 9f       	mul	r18, r22
    388a:	11 24       	eor	r1, r1
    388c:	30 19       	sub	r19, r0
    388e:	30 5d       	subi	r19, 0xD0	; 208
    3890:	31 93       	st	Z+, r19
    3892:	de f6       	brtc	.-74     	; 0x384a <__ultoa_invert+0xe>
    3894:	cf 01       	movw	r24, r30
    3896:	08 95       	ret
    3898:	46 2f       	mov	r20, r22
    389a:	47 70       	andi	r20, 0x07	; 7
    389c:	40 5d       	subi	r20, 0xD0	; 208
    389e:	41 93       	st	Z+, r20
    38a0:	b3 e0       	ldi	r27, 0x03	; 3
    38a2:	0f d0       	rcall	.+30     	; 0x38c2 <__ultoa_invert+0x86>
    38a4:	c9 f7       	brne	.-14     	; 0x3898 <__ultoa_invert+0x5c>
    38a6:	f6 cf       	rjmp	.-20     	; 0x3894 <__ultoa_invert+0x58>
    38a8:	46 2f       	mov	r20, r22
    38aa:	4f 70       	andi	r20, 0x0F	; 15
    38ac:	40 5d       	subi	r20, 0xD0	; 208
    38ae:	4a 33       	cpi	r20, 0x3A	; 58
    38b0:	18 f0       	brcs	.+6      	; 0x38b8 <__ultoa_invert+0x7c>
    38b2:	49 5d       	subi	r20, 0xD9	; 217
    38b4:	31 fd       	sbrc	r19, 1
    38b6:	40 52       	subi	r20, 0x20	; 32
    38b8:	41 93       	st	Z+, r20
    38ba:	02 d0       	rcall	.+4      	; 0x38c0 <__ultoa_invert+0x84>
    38bc:	a9 f7       	brne	.-22     	; 0x38a8 <__ultoa_invert+0x6c>
    38be:	ea cf       	rjmp	.-44     	; 0x3894 <__ultoa_invert+0x58>
    38c0:	b4 e0       	ldi	r27, 0x04	; 4
    38c2:	a6 95       	lsr	r26
    38c4:	97 95       	ror	r25
    38c6:	87 95       	ror	r24
    38c8:	77 95       	ror	r23
    38ca:	67 95       	ror	r22
    38cc:	ba 95       	dec	r27
    38ce:	c9 f7       	brne	.-14     	; 0x38c2 <__ultoa_invert+0x86>
    38d0:	00 97       	sbiw	r24, 0x00	; 0
    38d2:	61 05       	cpc	r22, r1
    38d4:	71 05       	cpc	r23, r1
    38d6:	08 95       	ret
    38d8:	9b 01       	movw	r18, r22
    38da:	ac 01       	movw	r20, r24
    38dc:	0a 2e       	mov	r0, r26
    38de:	06 94       	lsr	r0
    38e0:	57 95       	ror	r21
    38e2:	47 95       	ror	r20
    38e4:	37 95       	ror	r19
    38e6:	27 95       	ror	r18
    38e8:	ba 95       	dec	r27
    38ea:	c9 f7       	brne	.-14     	; 0x38de <__ultoa_invert+0xa2>
    38ec:	62 0f       	add	r22, r18
    38ee:	73 1f       	adc	r23, r19
    38f0:	84 1f       	adc	r24, r20
    38f2:	95 1f       	adc	r25, r21
    38f4:	a0 1d       	adc	r26, r0
    38f6:	08 95       	ret

000038f8 <_exit>:
    38f8:	f8 94       	cli

000038fa <__stop_program>:
    38fa:	ff cf       	rjmp	.-2      	; 0x38fa <__stop_program>
